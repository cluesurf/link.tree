
load @termsurf/snow/amazonaws.com/backup/2018-11-15/base/framework-controls
  take form framework-controls

load @termsurf/snow/amazonaws.com/backup/2018-11-15/base/framework-description
  take form framework-description

load @termsurf/snow/amazonaws.com/backup/2018-11-15/base/framework-name
  take form framework-name

load @termsurf/snow/amazonaws.com/backup/2018-11-15/base/string-map
  take form string-map

load @termsurf/snow/base/string
  take form string

form create-framework-input, name <CreateFrameworkInput>
  take framework-name, name <FrameworkName>
    like framework-name
    note <The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).>
  take framework-description, name <FrameworkDescription>
    like framework-description
    void take
    note <An optional description of the framework with a maximum of 1,024 characters.>
  take framework-controls, name <FrameworkControls>
    like framework-controls
    note <A list of the controls that make up the framework. Each control in the list has a name, input parameters, and scope.>
  take idempotency-token, name <IdempotencyToken>
    like string
    void take
    note <A customer-chosen string that you can use to distinguish between otherwise identical calls to `CreateFrameworkInput`. Retrying a successful request with the same idempotency token results in a success message with no action taken.>
  take framework-tags, name <FrameworkTags>
    like string-map
    void take
    note <Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.>