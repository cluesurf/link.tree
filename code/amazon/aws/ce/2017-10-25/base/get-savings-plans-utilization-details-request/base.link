
load @tunebond/snow/amazonaws.com/ce/2017-10-25/base/date-interval
  take form date-interval

load @tunebond/snow/amazonaws.com/ce/2017-10-25/base/expression
  take form expression

load @tunebond/snow/amazonaws.com/ce/2017-10-25/base/max-results
  take form max-results

load @tunebond/snow/amazonaws.com/ce/2017-10-25/base/next-page-token
  take form next-page-token

load @tunebond/snow/amazonaws.com/ce/2017-10-25/base/savings-plans-data-types
  take form savings-plans-data-types

load @tunebond/snow/amazonaws.com/ce/2017-10-25/base/sort-definition
  take form sort-definition

form get-savings-plans-utilization-details-request, name <GetSavingsPlansUtilizationDetailsRequest>
  take time-period, name <TimePeriod>
    like date-interval
    note <The time period that you want the usage and costs for. The `Start` date must be within 13 months. The `End` date must be after the `Start` date, and before the current date. Future dates can't be used as an `End` date.>
  take filter, name <Filter>
    like expression
    void take
    note <Filters Savings Plans utilization coverage data for active Savings Plans dimensions. You can filter data with the following dimensions:

- `LINKED_ACCOUNT`

- `SAVINGS_PLAN_ARN`

- `REGION`

- `PAYMENT_OPTION`

- `INSTANCE_TYPE_FAMILY`

`GetSavingsPlansUtilizationDetails` uses the same [Expression](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html) object as the other operations, but only `AND` is supported among each dimension.>
  take data-type, name <DataType>
    like savings-plans-data-types
    void take
    note <The data type.>
  take next-token, name <NextToken>
    like next-page-token
    void take
    note <The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.>
  take max-results, name <MaxResults>
    like max-results
    void take
    note <The number of items to be returned in a response. The default is `20`, with a minimum value of `1`.>
  take sort-by, name <SortBy>
    like sort-definition
    void take
    note <The value by which you want to sort the data.

The following values are supported for `Key`:

- `UtilizationPercentage`

- `TotalCommitment`

- `UsedCommitment`

- `UnusedCommitment`

- `NetSavings`

- `AmortizedRecurringCommitment`

- `AmortizedUpfrontCommitment`

Supported values for `SortOrder` are `ASCENDING` or `DESCENDING`.>