
load @treesurf/snow/amazonaws.com/swf/2012-01-25/base/arn
  take form arn

load @treesurf/snow/amazonaws.com/swf/2012-01-25/base/child-policy
  take form child-policy

load @treesurf/snow/amazonaws.com/swf/2012-01-25/base/data
  take form data

load @treesurf/snow/amazonaws.com/swf/2012-01-25/base/duration-in-seconds-optional
  take form duration-in-seconds-optional

load @treesurf/snow/amazonaws.com/swf/2012-01-25/base/event-id
  take form event-id

load @treesurf/snow/amazonaws.com/swf/2012-01-25/base/tag-list
  take form tag-list

load @treesurf/snow/amazonaws.com/swf/2012-01-25/base/task-list
  take form task-list

load @treesurf/snow/amazonaws.com/swf/2012-01-25/base/task-priority
  take form task-priority

load @treesurf/snow/amazonaws.com/swf/2012-01-25/base/workflow-run-id
  take form workflow-run-id

load @treesurf/snow/amazonaws.com/swf/2012-01-25/base/workflow-type
  take form workflow-type

form workflow-execution-continued-as-new-event-attributes, name <WorkflowExecutionContinuedAsNewEventAttributes>
  note <Provides the details of the `WorkflowExecutionContinuedAsNew` event.>
  take input, name <input>
    like data
    void take
    note <The input provided to the new workflow execution.>
  take decision-task-completed-event-id, name <decisionTaskCompletedEventId>
    like event-id
    note <The ID of the `DecisionTaskCompleted` event corresponding to the decision task that resulted in the `ContinueAsNewWorkflowExecution` decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.>
  take new-execution-run-id, name <newExecutionRunId>
    like workflow-run-id
    note <The `runId` of the new workflow execution.>
  take execution-start-to-close-timeout, name <executionStartToCloseTimeout>
    like duration-in-seconds-optional
    void take
    note <The total duration allowed for the new workflow execution.

The duration is specified in seconds, an integer greater than or equal to `0`. You can use `NONE` to specify unlimited duration.>
  take task-list, name <taskList>
    like task-list
    note <The task list to use for the decisions of the new (continued) workflow execution.>
  take task-priority, name <taskPriority>
    like task-priority
    void take
    note <The priority of the task to use for the decisions of the new (continued) workflow execution.>
  take task-start-to-close-timeout, name <taskStartToCloseTimeout>
    like duration-in-seconds-optional
    void take
    note <The maximum duration of decision tasks for the new workflow execution.

The duration is specified in seconds, an integer greater than or equal to `0`. You can use `NONE` to specify unlimited duration.>
  take child-policy, name <childPolicy>
    like child-policy
    note <The policy to use for the child workflow executions of the new execution if it is terminated by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout.

The supported child policies are:

- `TERMINATE` - The child executions are terminated.

- `REQUEST_CANCEL` - A request to cancel is attempted for each child execution by recording a `WorkflowExecutionCancelRequested` event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.

- `ABANDON` - No action is taken. The child executions continue to run.>
  take tag-list, name <tagList>
    like tag-list
    void take
    note <The list of tags associated with the new workflow execution.>
  take workflow-type, name <workflowType>
    like workflow-type
    note <The workflow type of this execution.>
  take lambda-role, name <lambdaRole>
    like arn
    void take
    note <The IAM role to attach to the new (continued) workflow execution.>