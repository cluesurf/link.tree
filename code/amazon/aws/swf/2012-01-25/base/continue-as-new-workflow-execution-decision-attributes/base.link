
load @drumwork/snow/amazonaws.com/swf/2012-01-25/base/arn
  take form arn

load @drumwork/snow/amazonaws.com/swf/2012-01-25/base/child-policy
  take form child-policy

load @drumwork/snow/amazonaws.com/swf/2012-01-25/base/data
  take form data

load @drumwork/snow/amazonaws.com/swf/2012-01-25/base/duration-in-seconds-optional
  take form duration-in-seconds-optional

load @drumwork/snow/amazonaws.com/swf/2012-01-25/base/tag-list
  take form tag-list

load @drumwork/snow/amazonaws.com/swf/2012-01-25/base/task-list
  take form task-list

load @drumwork/snow/amazonaws.com/swf/2012-01-25/base/task-priority
  take form task-priority

load @drumwork/snow/amazonaws.com/swf/2012-01-25/base/version
  take form version

form continue-as-new-workflow-execution-decision-attributes, name <ContinueAsNewWorkflowExecutionDecisionAttributes>
  note <Provides the details of the `ContinueAsNewWorkflowExecution` decision.

**Access Control** You can use IAM policies to control this decision's access to Amazon SWF resources as follows:

- Use a `Resource` element with the domain name to limit the action to only specified domains.

- Use an `Action` element to allow or deny permission to call this action.

- Constrain the following parameters by using a `Condition` element with the appropriate keys.

  - `tag` - A tag used to identify the workflow execution

  - `taskList` - String constraint. The key is `swf:taskList.name`.

  - `workflowType.version` - String constraint. The key is `swf:workflowType.version`.

If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's `cause` parameter is set to `OPERATION_NOT_PERMITTED`. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the _Amazon SWF Developer Guide_.>
  take input, name <input>
    like data
    void take
    note <The input provided to the new workflow execution.>
  take execution-start-to-close-timeout, name <executionStartToCloseTimeout>
    like duration-in-seconds-optional
    void take
    note <If set, specifies the total duration for this workflow execution. This overrides the `defaultExecutionStartToCloseTimeout` specified when registering the workflow type.

The duration is specified in seconds, an integer greater than or equal to `0`. You can use `NONE` to specify unlimited duration.

An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this field. If neither this field is set nor a default execution start-to-close timeout was specified at registration time then a fault is returned.>
  take task-list, name <taskList>
    like task-list
    void take
    note <The task list to use for the decisions of the new (continued) workflow execution.>
  take task-priority, name <taskPriority>
    like task-priority
    void take
    note <The task priority that, if set, specifies the priority for the decision tasks for this workflow execution. This overrides the defaultTaskPriority specified when registering the workflow type. Valid values are integers that range from Java's `Integer.MIN_VALUE` (-2147483648) to `Integer.MAX_VALUE` (2147483647). Higher numbers indicate higher priority.

For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the _Amazon SWF Developer Guide_.>
  take task-start-to-close-timeout, name <taskStartToCloseTimeout>
    like duration-in-seconds-optional
    void take
    note <Specifies the maximum duration of decision tasks for the new workflow execution. This parameter overrides the `defaultTaskStartToCloseTimout` specified when registering the workflow type using RegisterWorkflowType.

The duration is specified in seconds, an integer greater than or equal to `0`. You can use `NONE` to specify unlimited duration.

A task start-to-close timeout for the new workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned.>
  take child-policy, name <childPolicy>
    like child-policy
    void take
    note <If set, specifies the policy to use for the child workflow executions of the new execution if it is terminated by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using RegisterWorkflowType.

The supported child policies are:

- `TERMINATE` - The child executions are terminated.

- `REQUEST_CANCEL` - A request to cancel is attempted for each child execution by recording a `WorkflowExecutionCancelRequested` event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.

- `ABANDON` - No action is taken. The child executions continue to run.

A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.>
  take tag-list, name <tagList>
    like tag-list
    void take
    note <The list of tags to associate with the new workflow execution. A maximum of 5 tags can be specified. You can list workflow executions with a specific tag by calling ListOpenWorkflowExecutions or ListClosedWorkflowExecutions and specifying a TagFilter.>
  take workflow-type-version, name <workflowTypeVersion>
    like version
    void take
    note <The version of the workflow to start.>
  take lambda-role, name <lambdaRole>
    like arn
    void take
    note <The IAM role to attach to the new (continued) execution.>