
load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/double-min0
  take form double-min0

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-adaptive-quantization
  take form h265-adaptive-quantization

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-alternate-transfer-function-sei
  take form h265-alternate-transfer-function-sei

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-codec-level
  take form h265-codec-level

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-codec-profile
  take form h265-codec-profile

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-dynamic-sub-gop
  take form h265-dynamic-sub-gop

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-flicker-adaptive-quantization
  take form h265-flicker-adaptive-quantization

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-framerate-control
  take form h265-framerate-control

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-framerate-conversion-algorithm
  take form h265-framerate-conversion-algorithm

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-gop-b-reference
  take form h265-gop-b-reference

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-gop-size-units
  take form h265-gop-size-units

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-interlace-mode
  take form h265-interlace-mode

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-par-control
  take form h265-par-control

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-quality-tuning-level
  take form h265-quality-tuning-level

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-qvbr-settings
  take form h265-qvbr-settings

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-rate-control-mode
  take form h265-rate-control-mode

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-sample-adaptive-offset-filter-mode
  take form h265-sample-adaptive-offset-filter-mode

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-scan-type-conversion-mode
  take form h265-scan-type-conversion-mode

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-scene-change-detect
  take form h265-scene-change-detect

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-slow-pal
  take form h265-slow-pal

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-spatial-adaptive-quantization
  take form h265-spatial-adaptive-quantization

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-telecine
  take form h265-telecine

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-temporal-adaptive-quantization
  take form h265-temporal-adaptive-quantization

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-temporal-ids
  take form h265-temporal-ids

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-tiles
  take form h265-tiles

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-unregistered-sei-timecode
  take form h265-unregistered-sei-timecode

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/h265-write-mp4-packaging-type
  take form h265-write-mp4-packaging-type

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/integer-min0-max100
  take form integer-min0-max100

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/integer-min0-max1466400000
  take form integer-min0-max1466400000

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/integer-min0-max2147483647
  take form integer-min0-max2147483647

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/integer-min0-max30
  take form integer-min0-max30

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/integer-min0-max7
  take form integer-min0-max7

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/integer-min1-max2147483647
  take form integer-min1-max2147483647

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/integer-min1-max32
  take form integer-min1-max32

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/integer-min1-max6
  take form integer-min1-max6

load @nerdbond/snow/amazonaws.com/mediaconvert/2017-08-29/base/integer-min1000-max1466400000
  take form integer-min1000-max1466400000

form h265-settings, name <H265Settings>
  note <Settings for H265 codec>
  take adaptive-quantization, name <AdaptiveQuantization>
    like h265-adaptive-quantization
    void take
    note <Specify the strength of any adaptive quantization filters that you enable. The value that you choose here applies to the following settings: Flicker adaptive quantization (flickerAdaptiveQuantization), Spatial adaptive quantization (spatialAdaptiveQuantization), and Temporal adaptive quantization (temporalAdaptiveQuantization).>
    host xml
      host name, text <adaptiveQuantization>
  take alternate-transfer-function-sei, name <AlternateTransferFunctionSei>
    like h265-alternate-transfer-function-sei
    void take
    note <Enables Alternate Transfer Function SEI message for outputs using Hybrid Log Gamma (HLG) Electro-Optical Transfer Function (EOTF).>
    host xml
      host name, text <alternateTransferFunctionSei>
  take bitrate, name <Bitrate>
    like integer-min1000-max1466400000
    void take
    note <Specify the average bitrate in bits per second. Required for VBR and CBR. For MS Smooth outputs, bitrates must be unique when rounded down to the nearest multiple of 1000.>
    host xml
      host name, text <bitrate>
  take codec-level, name <CodecLevel>
    like h265-codec-level
    void take
    note <H.265 Level.>
    host xml
      host name, text <codecLevel>
  take codec-profile, name <CodecProfile>
    like h265-codec-profile
    void take
    note <Represents the Profile and Tier, per the HEVC (H.265) specification. Selections are grouped as [Profile] / [Tier], so "Main/High" represents Main Profile with High Tier. 4:2:2 profiles are only available with the HEVC 4:2:2 License.>
    host xml
      host name, text <codecProfile>
  take dynamic-sub-gop, name <DynamicSubGop>
    like h265-dynamic-sub-gop
    void take
    note <Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames (numberBFramesBetweenReferenceFrames).>
    host xml
      host name, text <dynamicSubGop>
  take flicker-adaptive-quantization, name <FlickerAdaptiveQuantization>
    like h265-flicker-adaptive-quantization
    void take
    note <Enable this setting to have the encoder reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. This setting is disabled by default. Related setting: In addition to enabling this setting, you must also set adaptiveQuantization to a value other than Off (OFF).>
    host xml
      host name, text <flickerAdaptiveQuantization>
  take framerate-control, name <FramerateControl>
    like h265-framerate-control
    void take
    note <If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.>
    host xml
      host name, text <framerateControl>
  take framerate-conversion-algorithm, name <FramerateConversionAlgorithm>
    like h265-framerate-conversion-algorithm
    void take
    note <Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.>
    host xml
      host name, text <framerateConversionAlgorithm>
  take framerate-denominator, name <FramerateDenominator>
    like integer-min1-max2147483647
    void take
    note <When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.>
    host xml
      host name, text <framerateDenominator>
  take framerate-numerator, name <FramerateNumerator>
    like integer-min1-max2147483647
    void take
    note <When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.>
    host xml
      host name, text <framerateNumerator>
  take gop-b-reference, name <GopBReference>
    like h265-gop-b-reference
    void take
    note <If enable, use reference B frames for GOP structures that have B frames &gt; 1.>
    host xml
      host name, text <gopBReference>
  take gop-closed-cadence, name <GopClosedCadence>
    like integer-min0-max2147483647
    void take
    note <Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.>
    host xml
      host name, text <gopClosedCadence>
  take gop-size, name <GopSize>
    like double-min0
    void take
    note <GOP Length (keyframe interval) in frames or seconds. Must be greater than zero.>
    host xml
      host name, text <gopSize>
  take gop-size-units, name <GopSizeUnits>
    like h265-gop-size-units
    void take
    note <Indicates if the GOP Size in H265 is specified in frames or seconds. If seconds the system will convert the GOP Size into a frame count at run time.>
    host xml
      host name, text <gopSizeUnits>
  take hrd-buffer-initial-fill-percentage, name <HrdBufferInitialFillPercentage>
    like integer-min0-max100
    void take
    note <Percentage of the buffer that should initially be filled (HRD buffer model).>
    host xml
      host name, text <hrdBufferInitialFillPercentage>
  take hrd-buffer-size, name <HrdBufferSize>
    like integer-min0-max1466400000
    void take
    note <Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.>
    host xml
      host name, text <hrdBufferSize>
  take interlace-mode, name <InterlaceMode>
    like h265-interlace-mode
    void take
    note <Choose the scan line type for the output. Keep the default value, Progressive (PROGRESSIVE) to create a progressive output, regardless of the scan type of your input. Use Top field first (TOP_FIELD) or Bottom field first (BOTTOM_FIELD) to create an output that's interlaced with the same field polarity throughout. Use Follow, default top (FOLLOW_TOP_FIELD) or Follow, default bottom (FOLLOW_BOTTOM_FIELD) to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.>
    host xml
      host name, text <interlaceMode>
  take max-bitrate, name <MaxBitrate>
    like integer-min1000-max1466400000
    void take
    note <Maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. Required when Rate control mode is QVBR.>
    host xml
      host name, text <maxBitrate>
  take min-i-interval, name <MinIInterval>
    like integer-min0-max30
    void take
    note <Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. This setting is only used when Scene Change Detect is enabled. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1>
    host xml
      host name, text <minIInterval>
  take number-b-frames-between-reference-frames, name <NumberBFramesBetweenReferenceFrames>
    like integer-min0-max7
    void take
    note <Specify the number of B-frames that MediaConvert puts between reference frames in this output. Valid values are whole numbers from 0 through 7. When you don't specify a value, MediaConvert defaults to 2.>
    host xml
      host name, text <numberBFramesBetweenReferenceFrames>
  take number-reference-frames, name <NumberReferenceFrames>
    like integer-min1-max6
    void take
    note <Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.>
    host xml
      host name, text <numberReferenceFrames>
  take par-control, name <ParControl>
    like h265-par-control
    void take
    note <Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.>
    host xml
      host name, text <parControl>
  take par-denominator, name <ParDenominator>
    like integer-min1-max2147483647
    void take
    note <Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.>
    host xml
      host name, text <parDenominator>
  take par-numerator, name <ParNumerator>
    like integer-min1-max2147483647
    void take
    note <Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.>
    host xml
      host name, text <parNumerator>
  take quality-tuning-level, name <QualityTuningLevel>
    like h265-quality-tuning-level
    void take
    note <Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.>
    host xml
      host name, text <qualityTuningLevel>
  take qvbr-settings, name <QvbrSettings>
    like h265-qvbr-settings
    void take
    note <Settings for quality-defined variable bitrate encoding with the H.265 codec. Use these settings only when you set QVBR for Rate control mode (RateControlMode).>
    host xml
      host name, text <qvbrSettings>
  take rate-control-mode, name <RateControlMode>
    like h265-rate-control-mode
    void take
    note <Use this setting to specify whether this output has a variable bitrate (VBR), constant bitrate (CBR) or quality-defined variable bitrate (QVBR).>
    host xml
      host name, text <rateControlMode>
  take sample-adaptive-offset-filter-mode, name <SampleAdaptiveOffsetFilterMode>
    like h265-sample-adaptive-offset-filter-mode
    void take
    note <Specify Sample Adaptive Offset (SAO) filter strength. Adaptive mode dynamically selects best strength based on content>
    host xml
      host name, text <sampleAdaptiveOffsetFilterMode>
  take scan-type-conversion-mode, name <ScanTypeConversionMode>
    like h265-scan-type-conversion-mode
    void take
    note <Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing (INTERLACED_OPTIMIZE) to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing (INTERLACED), for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine (telecine) to None (NONE) or Soft (SOFT). You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode (interlaceMode) to a value other than Progressive (PROGRESSIVE).>
    host xml
      host name, text <scanTypeConversionMode>
  take scene-change-detect, name <SceneChangeDetect>
    like h265-scene-change-detect
    void take
    note <Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default. If this output uses QVBR, choose Transition detection (TRANSITION_DETECTION) for further video quality improvement. For more information about QVBR, see https://docs.aws.amazon.com/console/mediaconvert/cbr-vbr-qvbr.>
    host xml
      host name, text <sceneChangeDetect>
  take slices, name <Slices>
    like integer-min1-max32
    void take
    note <Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures.>
    host xml
      host name, text <slices>
  take slow-pal, name <SlowPal>
    like h265-slow-pal
    void take
    note <Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.>
    host xml
      host name, text <slowPal>
  take spatial-adaptive-quantization, name <SpatialAdaptiveQuantization>
    like h265-spatial-adaptive-quantization
    void take
    note <Keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization (adaptiveQuantization) depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.>
    host xml
      host name, text <spatialAdaptiveQuantization>
  take telecine, name <Telecine>
    like h265-telecine
    void take
    note <This field applies only if the Streams &gt; Advanced &gt; Framerate (framerate) field is set to 29.970. This field works with the Streams &gt; Advanced &gt; Preprocessors &gt; Deinterlacer field (deinterlace_mode) and the Streams &gt; Advanced &gt; Interlaced Mode field (interlace_mode) to identify the scan type for the output: Progressive, Interlaced, Hard Telecine or Soft Telecine. - Hard: produces 29.97i output from 23.976 input. - Soft: produces 23.976; the player converts this output to 29.97i.>
    host xml
      host name, text <telecine>
  take temporal-adaptive-quantization, name <TemporalAdaptiveQuantization>
    like h265-temporal-adaptive-quantization
    void take
    note <Keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization (adaptiveQuantization).>
    host xml
      host name, text <temporalAdaptiveQuantization>
  take temporal-ids, name <TemporalIds>
    like h265-temporal-ids
    void take
    note <Enables temporal layer identifiers in the encoded bitstream. Up to 3 layers are supported depending on GOP structure: I- and P-frames form one layer, reference B-frames can form a second layer and non-reference b-frames can form a third layer. Decoders can optionally decode only the lower temporal layers to generate a lower frame rate output. For example, given a bitstream with temporal IDs and with b-frames = 1 (i.e. IbPbPb display order), a decoder could decode all the frames for full frame rate output or only the I and P frames (lowest temporal layer) for a half frame rate output.>
    host xml
      host name, text <temporalIds>
  take tiles, name <Tiles>
    like h265-tiles
    void take
    note <Enable use of tiles, allowing horizontal as well as vertical subdivision of the encoded pictures.>
    host xml
      host name, text <tiles>
  take unregistered-sei-timecode, name <UnregisteredSeiTimecode>
    like h265-unregistered-sei-timecode
    void take
    note <Inserts timecode for each frame as 4 bytes of an unregistered SEI message.>
    host xml
      host name, text <unregisteredSeiTimecode>
  take write-mp4-packaging-type, name <WriteMp4PackagingType>
    like h265-write-mp4-packaging-type
    void take
    note <If the location of parameter set NAL units doesn't matter in your workflow, ignore this setting. Use this setting only with CMAF or DASH outputs, or with standalone file outputs in an MPEG-4 container (MP4 outputs). Choose HVC1 to mark your output as HVC1. This makes your output compliant with the following specification: ISO IECJTC1 SC29 N13798 Text ISO/IEC FDIS 14496-15 3rd Edition. For these outputs, the service stores parameter set NAL units in the sample headers but not in the samples directly. For MP4 outputs, when you choose HVC1, your output video might not work properly with some downstream systems and video players. The service defaults to marking your output as HEV1. For these outputs, the service writes parameter set NAL units directly into the samples.>
    host xml
      host name, text <writeMp4PackagingType>