
load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/application-version-description-message
  take form application-version-description-message

load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/boxed-int
  take form boxed-int

load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/code-build-not-in-service-region-exception
  take form code-build-not-in-service-region-exception

load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/compute-type
  take form compute-type

load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/insufficient-privileges-exception
  take form insufficient-privileges-exception

load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/non-empty-string
  take form non-empty-string

load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/s3-bucket
  take form s3-bucket

load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/s3-key
  take form s3-key

load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/s3-location-not-in-service-region-exception
  take form s3-location-not-in-service-region-exception

load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/source-location
  take form source-location

load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/source-repository
  take form source-repository

load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/source-type
  take form source-type

load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/tag
  take form tag

load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/too-many-application-versions-exception
  take form too-many-application-versions-exception

load @textsurf/snow/amazonaws.com/elasticbeanstalk/2010-12-01/base/too-many-applications-exception
  take form too-many-applications-exception

load @textsurf/snow/base/form
  take form form

load @textsurf/snow/base/list
  take form list

load @textsurf/snow/base/native-boolean
  take form native-boolean

load @textsurf/snow/base/native-string
  take form native-string

load @textsurf/snow/base/string
  take form string

boot get-create-application-version, name <GET_CreateApplicationVersion>
  deed get
  note <Creates an application version for the specified application. You can create an application version from a source bundle in Amazon S3, a commit in AWS CodeCommit, or the output of an AWS CodeBuild build as follows:

Specify a commit in an AWS CodeCommit repository with `SourceBuildInformation`.

Specify a build in an AWS CodeBuild with `SourceBuildInformation` and `BuildConfiguration`.

Specify a source bundle in S3 with `SourceBundle`

Omit both `SourceBuildInformation` and `SourceBundle` to use the default sample application.

After you create an application version with a specified Amazon S3 bucket and key location, you can't change that Amazon S3 location. If you change the Amazon S3 location, you receive an exception when you attempt to launch an environment from the application version.>

  take application-name
    like native-string
    note <The name of the application. If no application is found with this name, and `AutoCreateApplication` is `false`, returns an `InvalidParameterValue` error.>
  take version-label
    like native-string
    note <A label identifying this version.

Constraint: Must be unique per application. If an application version already exists with this label for the specified application, AWS Elastic Beanstalk returns an `InvalidParameterValue` error.>
  take description
    like native-string
    note <A description of this application version.>
    void take
  take source-build-information
    like form
      take source-type, name <SourceType>
        like source-type
        note <The type of repository.

- `Git`

- `Zip`>
      take source-repository, name <SourceRepository>
        like source-repository
        note <Location where the repository is stored.

- `CodeCommit`

- `S3`>
      take source-location, name <SourceLocation>
        like source-location
        note <The location of the source code, as a formatted string, depending on the value of `SourceRepository`

- For `CodeCommit`, the format is the repository name and commit ID, separated by a forward slash. For example, `my-git-repo/265cfa0cf6af46153527f55d6503ec030551f57a`.

- For `S3`, the format is the S3 bucket name and object key, separated by a forward slash. For example, `my-s3-bucket/Folders/my-source-file`.>
    note <Specify a commit in an AWS CodeCommit Git repository to use as the source code for the application version.>
    void take
  take source-bundle
    like form
      take s3-bucket, name <S3Bucket>
        like s3-bucket
        void take
        note <The Amazon S3 bucket where the data is located.>
      take s3-key, name <S3Key>
        like s3-key
        void take
        note <The Amazon S3 key where the data is located.>
    note <The Amazon S3 bucket and key that identify the location of the source bundle for this version.

The Amazon S3 bucket must be in the same region as the environment.

Specify a source bundle in S3 or a commit in an AWS CodeCommit repository (with `SourceBuildInformation`), but not both. If neither `SourceBundle` nor `SourceBuildInformation` are provided, Elastic Beanstalk uses a sample application.>
    void take
  take build-configuration
    like form
      take artifact-name, name <ArtifactName>
        like string
        void take
        note <The name of the artifact of the CodeBuild build. If provided, Elastic Beanstalk stores the build artifact in the S3 location _S3-bucket_/resources/_application-name_/codebuild/codebuild-_version-label_-_artifact-name_.zip. If not provided, Elastic Beanstalk stores the build artifact in the S3 location _S3-bucket_/resources/_application-name_/codebuild/codebuild-_version-label_.zip.>
      take code-build-service-role, name <CodeBuildServiceRole>
        like non-empty-string
        note <The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.>
      take compute-type, name <ComputeType>
        like compute-type
        void take
        note <Information about the compute resources the build project will use.

- `BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds`

- `BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds`

- `BUILD_GENERAL1_LARGE: Use up to 15 GB memory and 8 vCPUs for builds`>
      take image, name <Image>
        like non-empty-string
        note <The ID of the Docker image to use for this build project.>
      take timeout-in-minutes, name <TimeoutInMinutes>
        like boxed-int
        void take
        note <How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.>
    note <Settings for an AWS CodeBuild build.>
    void take
  take auto-create-application
    like native-boolean
    note <Set to `true` to create an application with the specified name if it doesn't already exist.>
    void take
  take process
    like native-boolean
    note <Pre-processes and validates the environment manifest (`env.yaml`) and configuration files (`*.config` files in the `.ebextensions` folder) in the source bundle. Validating configuration files can identify issues prior to deploying the application version to an environment.

You must turn processing on for application versions that you create using AWS CodeBuild or AWS CodeCommit. For application versions built from a source bundle in Amazon S3, processing is optional.

The `Process` option validates Elastic Beanstalk configuration files. It doesn't validate your application's configuration files, like proxy server or Docker configuration.>
    void take
  take tags
    like list
      like tag
    note <Specifies the tags applied to the application version.

Elastic Beanstalk applies these tags only to the application version. Environments that use the application version don't inherit the tags.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=CreateApplicationVersion>

  find <ApplicationName>, loan application-name
  find <VersionLabel>, loan version-label
  find <Description>, loan description
  find <SourceBuildInformation>, loan source-build-information
  find <SourceBundle>, loan source-bundle
  find <BuildConfiguration>, loan build-configuration
  find <AutoCreateApplication>, loan auto-create-application
  find <Process>, loan process
  find <Tags>, loan tags
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like application-version-description-message
    note <Success>
  loot 480
    seed xml, like too-many-applications-exception
    note <TooManyApplicationsException>
  loot 481
    seed xml, like too-many-application-versions-exception
    note <TooManyApplicationVersionsException>
  loot 482
    seed xml, like insufficient-privileges-exception
    note <InsufficientPrivilegesException>
  loot 483
    seed xml, like s3-location-not-in-service-region-exception
    note <S3LocationNotInServiceRegionException>
  loot 484
    seed xml, like code-build-not-in-service-region-exception
    note <CodeBuildNotInServiceRegionException>