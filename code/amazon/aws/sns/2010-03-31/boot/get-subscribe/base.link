
load @treesurf/snow/amazonaws.com/sns/2010-03-31/base/authorization-error-exception
  take form authorization-error-exception

load @treesurf/snow/amazonaws.com/sns/2010-03-31/base/filter-policy-limit-exceeded-exception
  take form filter-policy-limit-exceeded-exception

load @treesurf/snow/amazonaws.com/sns/2010-03-31/base/internal-error-exception
  take form internal-error-exception

load @treesurf/snow/amazonaws.com/sns/2010-03-31/base/invalid-parameter-exception
  take form invalid-parameter-exception

load @treesurf/snow/amazonaws.com/sns/2010-03-31/base/invalid-security-exception
  take form invalid-security-exception

load @treesurf/snow/amazonaws.com/sns/2010-03-31/base/not-found-exception
  take form not-found-exception

load @treesurf/snow/amazonaws.com/sns/2010-03-31/base/subscribe-response
  take form subscribe-response

load @treesurf/snow/amazonaws.com/sns/2010-03-31/base/subscription-limit-exceeded-exception
  take form subscription-limit-exceeded-exception

load @treesurf/snow/base/form
  take form form

load @treesurf/snow/base/native-boolean
  take form native-boolean

load @treesurf/snow/base/native-string
  take form native-string

boot get-subscribe, name <GET_Subscribe>
  deed get
  note <Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or if the endpoint and the topic are not in the same account, the endpoint owner must run the `ConfirmSubscription` action to confirm the subscription.

You call the `ConfirmSubscription` action with the token from the subscription response. Confirmation tokens are valid for three days.

This action is throttled at 100 transactions per second (TPS).>

  take topic-arn
    like native-string
    note <The ARN of the topic you want to subscribe to.>
  take protocol
    like native-string
    note <The protocol that you want to use. Supported protocols include:

- `http` - delivery of JSON-encoded message via HTTP POST

- `https` - delivery of JSON-encoded message via HTTPS POST

- `email` - delivery of message via SMTP

- `email-json` - delivery of JSON-encoded message via SMTP

- `sms` - delivery of message via SMS

- `sqs` - delivery of JSON-encoded message to an Amazon SQS queue

- `application` - delivery of JSON-encoded message to an EndpointArn for a mobile app and device

- `lambda` - delivery of JSON-encoded message to an Lambda function

- `firehose` - delivery of JSON-encoded message to an Amazon Kinesis Data Firehose delivery stream.>
  take endpoint
    like native-string
    note <The endpoint that you want to receive notifications. Endpoints vary by protocol:

- For the `http` protocol, the (public) endpoint is a URL beginning with `http://`.

- For the `https` protocol, the (public) endpoint is a URL beginning with `https://`.

- For the `email` protocol, the endpoint is an email address.

- For the `email-json` protocol, the endpoint is an email address.

- For the `sms` protocol, the endpoint is a phone number of an SMS-enabled device.

- For the `sqs` protocol, the endpoint is the ARN of an Amazon SQS queue.

- For the `application` protocol, the endpoint is the EndpointArn of a mobile app and device.

- For the `lambda` protocol, the endpoint is the ARN of an Lambda function.

- For the `firehose` protocol, the endpoint is the ARN of an Amazon Kinesis Data Firehose delivery stream.>
    void take
  take attributes
    like form
    note <A map of attributes with their corresponding values.

The following lists the names, descriptions, and values of the special request parameters that the `Subscribe` action uses:

- `DeliveryPolicy` - The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.

- `FilterPolicy` - The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.

- `RawMessageDelivery` - When set to `true`, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.

- `RedrivePolicy` - When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held in the dead-letter queue for further analysis or reprocessing.

The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:

- `SubscriptionRoleArn` - The ARN of the IAM role that has the following:

  - Permission to write to the Kinesis Data Firehose delivery stream

  - Amazon SNS listed as a trusted entity

  Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions. For more information, see [Fanout to Kinesis Data Firehose delivery streams](https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html) in the _Amazon SNS Developer Guide_.>
    void take
  take return-subscription-arn
    like native-boolean
    note <Sets whether the response from the `Subscribe` request includes the subscription ARN, even if the subscription is not yet confirmed.

If you set this parameter to `true`, the response includes the ARN in all cases, even if the subscription is not yet confirmed. In addition to the ARN for confirmed subscriptions, the response also includes the `pending subscription` ARN value for subscriptions that aren't yet confirmed. A subscription becomes confirmed when the subscriber calls the `ConfirmSubscription` action with a confirmation token.

The default value is `false`.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=Subscribe>

  find <TopicArn>, loan topic-arn
  find <Protocol>, loan protocol
  find <Endpoint>, loan endpoint
  find <Attributes>, loan attributes
  find <ReturnSubscriptionArn>, loan return-subscription-arn
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like subscribe-response
    note <Success>
  loot 480
    seed xml, like subscription-limit-exceeded-exception
    note <SubscriptionLimitExceededException>
  loot 481
    seed xml, like filter-policy-limit-exceeded-exception
    note <FilterPolicyLimitExceededException>
  loot 482
    seed xml, like invalid-parameter-exception
    note <InvalidParameterException>
  loot 483
    seed xml, like internal-error-exception
    note <InternalErrorException>
  loot 484
    seed xml, like not-found-exception
    note <NotFoundException>
  loot 485
    seed xml, like authorization-error-exception
    note <AuthorizationErrorException>
  loot 486
    seed xml, like invalid-security-exception
    note <InvalidSecurityException>