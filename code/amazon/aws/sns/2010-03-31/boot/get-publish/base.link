
load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/authorization-error-exception
  take form authorization-error-exception

load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/endpoint-disabled-exception
  take form endpoint-disabled-exception

load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/internal-error-exception
  take form internal-error-exception

load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/invalid-parameter-exception
  take form invalid-parameter-exception

load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/invalid-parameter-value-exception
  take form invalid-parameter-value-exception

load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/invalid-security-exception
  take form invalid-security-exception

load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/kms-access-denied-exception
  take form kms-access-denied-exception

load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/kms-disabled-exception
  take form kms-disabled-exception

load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/kms-invalid-state-exception
  take form kms-invalid-state-exception

load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/kms-not-found-exception
  take form kms-not-found-exception

load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/kms-opt-in-required
  take form kms-opt-in-required

load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/kms-throttling-exception
  take form kms-throttling-exception

load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/not-found-exception
  take form not-found-exception

load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/platform-application-disabled-exception
  take form platform-application-disabled-exception

load @nerdbond/snow/amazonaws.com/sns/2010-03-31/base/publish-response
  take form publish-response

load @nerdbond/snow/base/form
  take form form

load @nerdbond/snow/base/native-string
  take form native-string

boot get-publish, name <GET_Publish>
  deed get
  note <Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone number, or a message to a mobile platform endpoint (when you specify the `TargetArn`).

If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is subscribed to the topic. The format of the message depends on the notification protocol for each subscribed endpoint.

When a `messageId` is returned, the message has been saved and Amazon SNS will attempt to deliver it shortly.

To use the `Publish` action for sending a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the `CreatePlatformEndpoint` action.

For more information about formatting messages, see [Send Custom Platform-Specific Payloads in Messages to Mobile Devices](https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html).

You can publish messages only to topics and endpoints in the same Region.>

  take topic-arn
    like native-string
    note <The topic you want to publish to.

If you don't specify a value for the `TopicArn` parameter, you must specify a value for the `PhoneNumber` or `TargetArn` parameters.>
    void take
  take target-arn
    like native-string
    note <If you don't specify a value for the `TargetArn` parameter, you must specify a value for the `PhoneNumber` or `TopicArn` parameters.>
    void take
  take phone-number
    like native-string
    note <The phone number to which you want to deliver an SMS message. Use E.164 format.

If you don't specify a value for the `PhoneNumber` parameter, you must specify a value for the `TargetArn` or `TopicArn` parameters.>
    void take
  take message
    like native-string
    note <The message you want to send.

If you are publishing to a topic and you want to send the same message to all transport protocols, include the text of the message as a String value. If you want to send different messages for each transport protocol, set the value of the `MessageStructure` parameter to `json` and use a JSON object for the `Message` parameter.

Constraints:

- With the exception of SMS, messages must be UTF-8 encoded strings and at most 256 KB in size (262,144 bytes, not 262,144 characters).

- For SMS, each message can contain up to 140 characters. This character limit depends on the encoding schema. For example, an SMS message can contain 160 GSM characters, 140 ASCII characters, or 70 UCS-2 characters.

  If you publish a message that exceeds this size limit, Amazon SNS sends the message as multiple messages, each fitting within the size limit. Messages aren't truncated mid-word but are cut off at whole-word boundaries.

  The total size limit for a single SMS `Publish` action is 1,600 characters.

JSON-specific constraints:

- Keys in the JSON object that correspond to supported transport protocols must have simple JSON string values.

- The values will be parsed (unescaped) before they are used in outgoing messages.

- Outbound notifications are JSON encoded (meaning that the characters will be reescaped for sending).

- Values have a minimum length of 0 (the empty string, "", is allowed).

- Values have a maximum length bounded by the overall message size (so, including multiple protocols may limit message sizes).

- Non-string values will cause the key to be ignored.

- Keys that do not correspond to supported transport protocols are ignored.

- Duplicate keys are not allowed.

- Failure to parse or validate any key or value in the message will cause the `Publish` call to return an error (no partial delivery).>
  take subject
    like native-string
    note <Optional parameter to be used as the "Subject" line when the message is delivered to email endpoints. This field will also be included, if present, in the standard JSON messages delivered to other endpoints.

Constraints: Subjects must be ASCII text that begins with a letter, number, or punctuation mark; must not include line breaks or control characters; and must be less than 100 characters long.>
    void take
  take message-structure
    like native-string
    note <Set `MessageStructure` to `json` if you want to send a different message for each protocol. For example, using one publish action, you can send a short message to your SMS subscribers and a longer message to your email subscribers. If you set `MessageStructure` to `json`, the value of the `Message` parameter must:

- be a syntactically valid JSON object; and

- contain at least a top-level JSON key of "default" with a value that is a string.

You can define other top-level keys that define the message you want to send to a specific transport protocol (e.g., "http").

Valid value: `json`>
    void take
  take message-attributes
    like form
    note <Message attributes for Publish action.>
    void take
  take message-deduplication-id
    like native-string
    note <This parameter applies only to FIFO (first-in-first-out) topics. The `MessageDeduplicationId` can contain up to 128 alphanumeric characters (a-z, A-Z, 0-9) and punctuation ``(!"#$%&'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~)``.

Every message must have a unique `MessageDeduplicationId`, which is a token used for deduplication of sent messages. If a message with a particular `MessageDeduplicationId` is sent successfully, any message sent with the same `MessageDeduplicationId` during the 5-minute deduplication interval is treated as a duplicate.

If the topic has `ContentBasedDeduplication` set, the system generates a `MessageDeduplicationId` based on the contents of the message. Your `MessageDeduplicationId` overrides the generated one.>
    void take
  take message-group-id
    like native-string
    note <This parameter applies only to FIFO (first-in-first-out) topics. The `MessageGroupId` can contain up to 128 alphanumeric characters (a-z, A-Z, 0-9) and punctuation ``(!"#$%&'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~)``.

The `MessageGroupId` is a tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). Every message must include a `MessageGroupId`.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=Publish>

  find <TopicArn>, loan topic-arn
  find <TargetArn>, loan target-arn
  find <PhoneNumber>, loan phone-number
  find <Message>, loan message
  find <Subject>, loan subject
  find <MessageStructure>, loan message-structure
  find <MessageAttributes>, loan message-attributes
  find <MessageDeduplicationId>, loan message-deduplication-id
  find <MessageGroupId>, loan message-group-id
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like publish-response
    note <Success>
  loot 480
    seed xml, like invalid-parameter-exception
    note <InvalidParameterException>
  loot 481
    seed xml, like invalid-parameter-value-exception
    note <InvalidParameterValueException>
  loot 482
    seed xml, like internal-error-exception
    note <InternalErrorException>
  loot 483
    seed xml, like not-found-exception
    note <NotFoundException>
  loot 484
    seed xml, like endpoint-disabled-exception
    note <EndpointDisabledException>
  loot 485
    seed xml, like platform-application-disabled-exception
    note <PlatformApplicationDisabledException>
  loot 486
    seed xml, like authorization-error-exception
    note <AuthorizationErrorException>
  loot 487
    seed xml, like kms-disabled-exception
    note <KMSDisabledException>
  loot 488
    seed xml, like kms-invalid-state-exception
    note <KMSInvalidStateException>
  loot 489
    seed xml, like kms-not-found-exception
    note <KMSNotFoundException>
  loot 490
    seed xml, like kms-opt-in-required
    note <KMSOptInRequired>
  loot 491
    seed xml, like kms-throttling-exception
    note <KMSThrottlingException>
  loot 492
    seed xml, like kms-access-denied-exception
    note <KMSAccessDeniedException>
  loot 493
    seed xml, like invalid-security-exception
    note <InvalidSecurityException>