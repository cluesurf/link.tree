
load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/arn
  take form arn

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/arn-list
  take form arn-list

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/auto-ml-override-strategy
  take form auto-ml-override-strategy

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/encryption-config
  take form encryption-config

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/evaluation-parameters
  take form evaluation-parameters

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/featurization-config
  take form featurization-config

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/forecast-types
  take form forecast-types

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/hyper-parameter-tuning-job-config
  take form hyper-parameter-tuning-job-config

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/input-data-config
  take form input-data-config

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/long
  take form long

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/message
  take form message

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/name
  take form name

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/optimization-metric
  take form optimization-metric

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/predictor-execution-details
  take form predictor-execution-details

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/status
  take form status

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/timestamp
  take form timestamp

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/training-parameters
  take form training-parameters

load @termsurf/snow/base/boolean
  take form boolean

load @termsurf/snow/base/integer
  take form integer

form describe-predictor-response, name <DescribePredictorResponse>
  take predictor-arn, name <PredictorArn>
    like name
    void take
    note <The ARN of the predictor.>
  take predictor-name, name <PredictorName>
    like name
    void take
    note <The name of the predictor.>
  take algorithm-arn, name <AlgorithmArn>
    like arn
    void take
    note <The Amazon Resource Name (ARN) of the algorithm used for model training.>
  take forecast-horizon, name <ForecastHorizon>
    like integer
    void take
    note <The number of time-steps of the forecast. The forecast horizon is also called the prediction length.>
  take forecast-types, name <ForecastTypes>
    like forecast-types
    void take
    note <The forecast types used during predictor training. Default value is `["0.1","0.5","0.9"]`>
  take perform-auto-ml, name <PerformAutoML>
    like boolean
    void take
    note <Whether the predictor is set to perform AutoML.>
  take auto-ml-override-strategy, name <AutoMLOverrideStrategy>
    like auto-ml-override-strategy
    void take
    note <The `LatencyOptimized` AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges.

The AutoML strategy used to train the predictor. Unless `LatencyOptimized` is specified, the AutoML strategy optimizes predictor accuracy.

This parameter is only valid for predictors trained using AutoML.>
  take perform-hpo, name <PerformHPO>
    like boolean
    void take
    note <Whether the predictor is set to perform hyperparameter optimization (HPO).>
  take training-parameters, name <TrainingParameters>
    like training-parameters
    void take
    note <The default training parameters or overrides selected during model training. When running AutoML or choosing HPO with CNN-QR or DeepAR+, the optimized values for the chosen hyperparameters are returned. For more information, see aws-forecast-choosing-recipes.>
  take evaluation-parameters, name <EvaluationParameters>
    like evaluation-parameters
    void take
    note <Used to override the default evaluation parameters of the specified algorithm. Amazon Forecast evaluates a predictor by splitting a dataset into training data and testing data. The evaluation parameters define how to perform the split and the number of iterations.>
  take hpo-config, name <HPOConfig>
    like hyper-parameter-tuning-job-config
    void take
    note <The hyperparameter override values for the algorithm.>
  take input-data-config, name <InputDataConfig>
    like input-data-config
    void take
    note <Describes the dataset group that contains the data to use to train the predictor.>
  take featurization-config, name <FeaturizationConfig>
    like featurization-config
    void take
    note <The featurization configuration.>
  take encryption-config, name <EncryptionConfig>
    like encryption-config
    void take
    note <An AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.>
  take predictor-execution-details, name <PredictorExecutionDetails>
    like predictor-execution-details
    void take
    note <Details on the the status and results of the backtests performed to evaluate the accuracy of the predictor. You specify the number of backtests to perform when you call the operation.>
  take estimated-time-remaining-in-minutes, name <EstimatedTimeRemainingInMinutes>
    like long
    void take
    note <The estimated time remaining in minutes for the predictor training job to complete.>
  take dataset-import-job-arns, name <DatasetImportJobArns>
    like arn-list
    void take
    note <An array of the ARNs of the dataset import jobs used to import training data for the predictor.>
  take auto-ml-algorithm-arns, name <AutoMLAlgorithmArns>
    like arn-list
    void take
    note <When `PerformAutoML` is specified, the ARN of the chosen algorithm.>
  take status, name <Status>
    like status
    void take
    note <The status of the predictor. States include:

- `ACTIVE`

- `CREATE_PENDING`, `CREATE_IN_PROGRESS`, `CREATE_FAILED`

- `DELETE_PENDING`, `DELETE_IN_PROGRESS`, `DELETE_FAILED`

- `CREATE_STOPPING`, `CREATE_STOPPED`

The `Status` of the predictor must be `ACTIVE` before you can use the predictor to create a forecast.>
  take message, name <Message>
    like message
    void take
    note <If an error occurred, an informational message about the error.>
  take creation-time, name <CreationTime>
    like timestamp
    void take
    note <When the model training task was created.>
  take last-modification-time, name <LastModificationTime>
    like timestamp
    void take
    note <The last time the resource was modified. The timestamp depends on the status of the job:

- `CREATE_PENDING` - The `CreationTime`.

- `CREATE_IN_PROGRESS` - The current timestamp.

- `CREATE_STOPPING` - The current timestamp.

- `CREATE_STOPPED` - When the job stopped.

- `ACTIVE` or `CREATE_FAILED` - When the job finished or failed.>
  take optimization-metric, name <OptimizationMetric>
    like optimization-metric
    void take
    note <The accuracy metric used to optimize the predictor.>