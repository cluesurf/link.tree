
load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/arn
  take form arn

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/auto-ml-override-strategy
  take form auto-ml-override-strategy

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/encryption-config
  take form encryption-config

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/evaluation-parameters
  take form evaluation-parameters

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/featurization-config
  take form featurization-config

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/forecast-types
  take form forecast-types

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/hyper-parameter-tuning-job-config
  take form hyper-parameter-tuning-job-config

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/input-data-config
  take form input-data-config

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/name
  take form name

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/optimization-metric
  take form optimization-metric

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/tags
  take form tags

load @termsurf/snow/amazonaws.com/forecast/2018-06-26/base/training-parameters
  take form training-parameters

load @termsurf/snow/base/boolean
  take form boolean

load @termsurf/snow/base/integer
  take form integer

form create-predictor-request, name <CreatePredictorRequest>
  take predictor-name, name <PredictorName>
    like name
    note <A name for the predictor.>
  take algorithm-arn, name <AlgorithmArn>
    like arn
    void take
    note <The Amazon Resource Name (ARN) of the algorithm to use for model training. Required if `PerformAutoML` is not set to `true`.

**Supported algorithms:** - `arn:aws:forecast:::algorithm/ARIMA`

- `arn:aws:forecast:::algorithm/CNN-QR`

- `arn:aws:forecast:::algorithm/Deep_AR_Plus`

- `arn:aws:forecast:::algorithm/ETS`

- `arn:aws:forecast:::algorithm/NPTS`

- `arn:aws:forecast:::algorithm/Prophet`>
  take forecast-horizon, name <ForecastHorizon>
    like integer
    note <Specifies the number of time-steps that the model is trained to predict. The forecast horizon is also called the prediction length.

For example, if you configure a dataset for daily data collection (using the `DataFrequency` parameter of the CreateDataset operation) and set the forecast horizon to 10, the model returns predictions for 10 days.

The maximum forecast horizon is the lesser of 500 time-steps or 1/3 of the TARGET_TIME_SERIES dataset length.>
  take forecast-types, name <ForecastTypes>
    like forecast-types
    void take
    note <Specifies the forecast types used to train a predictor. You can specify up to five forecast types. Forecast types can be quantiles from 0.01 to 0.99, by increments of 0.01 or higher. You can also specify the mean forecast with `mean`.

The default value is `["0.10", "0.50", "0.9"]`.>
  take perform-auto-ml, name <PerformAutoML>
    like boolean
    void take
    note <Whether to perform AutoML. When Amazon Forecast performs AutoML, it evaluates the algorithms it provides and chooses the best algorithm and configuration for your training dataset.

The default value is `false`. In this case, you are required to specify an algorithm.

Set `PerformAutoML` to `true` to have Amazon Forecast perform AutoML. This is a good option if you aren't sure which algorithm is suitable for your training data. In this case, `PerformHPO` must be false.>
  take auto-ml-override-strategy, name <AutoMLOverrideStrategy>
    like auto-ml-override-strategy
    void take
    note <The `LatencyOptimized` AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges.

Used to overide the default AutoML strategy, which is to optimize predictor accuracy. To apply an AutoML strategy that minimizes training time, use `LatencyOptimized`.

This parameter is only valid for predictors trained using AutoML.>
  take perform-hpo, name <PerformHPO>
    like boolean
    void take
    note <Whether to perform hyperparameter optimization (HPO). HPO finds optimal hyperparameter values for your training data. The process of performing HPO is known as running a hyperparameter tuning job.

The default value is `false`. In this case, Amazon Forecast uses default hyperparameter values from the chosen algorithm.

To override the default values, set `PerformHPO` to `true` and, optionally, supply the HyperParameterTuningJobConfig object. The tuning job specifies a metric to optimize, which hyperparameters participate in tuning, and the valid range for each tunable hyperparameter. In this case, you are required to specify an algorithm and `PerformAutoML` must be false.

The following algorithms support HPO:

- DeepAR+

- CNN-QR>
  take training-parameters, name <TrainingParameters>
    like training-parameters
    void take
    note <The hyperparameters to override for model training. The hyperparameters that you can override are listed in the individual algorithms. For the list of supported algorithms, see aws-forecast-choosing-recipes.>
  take evaluation-parameters, name <EvaluationParameters>
    like evaluation-parameters
    void take
    note <Used to override the default evaluation parameters of the specified algorithm. Amazon Forecast evaluates a predictor by splitting a dataset into training data and testing data. The evaluation parameters define how to perform the split and the number of iterations.>
  take hpo-config, name <HPOConfig>
    like hyper-parameter-tuning-job-config
    void take
    note <Provides hyperparameter override values for the algorithm. If you don't provide this parameter, Amazon Forecast uses default values. The individual algorithms specify which hyperparameters support hyperparameter optimization (HPO). For more information, see aws-forecast-choosing-recipes.

If you included the `HPOConfig` object, you must set `PerformHPO` to true.>
  take input-data-config, name <InputDataConfig>
    like input-data-config
    note <Describes the dataset group that contains the data to use to train the predictor.>
  take featurization-config, name <FeaturizationConfig>
    like featurization-config
    note <The featurization configuration.>
  take encryption-config, name <EncryptionConfig>
    like encryption-config
    void take
    note <An AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.>
  take tags, name <Tags>
    like tags
    void take
    note <The optional metadata that you apply to the predictor to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.

The following basic restrictions apply to tags:

- Maximum number of tags per resource - 50.

- For each resource, each tag key must be unique, and each tag key can have only one value.

- Maximum key length - 128 Unicode characters in UTF-8.

- Maximum value length - 256 Unicode characters in UTF-8.

- If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.

- Tag keys and values are case sensitive.

- Do not use `aws:`, `AWS:`, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has `aws` as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of `aws` do not count against your tags per resource limit.>
  take optimization-metric, name <OptimizationMetric>
    like optimization-metric
    void take
    note <The accuracy metric used to optimize the predictor.>