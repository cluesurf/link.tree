
load @textsurf/snow/amazonaws.com/forecast/2018-06-26/base/filters
  take form filters

load @textsurf/snow/amazonaws.com/forecast/2018-06-26/base/max-results
  take form max-results

load @textsurf/snow/amazonaws.com/forecast/2018-06-26/base/next-token
  take form next-token

form list-predictor-backtest-export-jobs-request, name <ListPredictorBacktestExportJobsRequest>
  take next-token, name <NextToken>
    like next-token
    void take
    note <If the result of the previous request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.>
  take max-results, name <MaxResults>
    like max-results
    void take
    note <The number of items to return in the response.>
  take filters, name <Filters>
    like filters
    void take
    note <An array of filters. For each filter, provide a condition and a match statement. The condition is either `IS` or `IS_NOT`, which specifies whether to include or exclude the predictor backtest export jobs that match the statement from the list. The match statement consists of a key and a value.

**Filter properties** - `Condition` - The condition to apply. Valid values are `IS` and `IS_NOT`. To include the predictor backtest export jobs that match the statement, specify `IS`. To exclude matching predictor backtest export jobs, specify `IS_NOT`.

- `Key` - The name of the parameter to filter on. Valid values are `PredictorArn` and `Status`.

- `Value` - The value to match.>