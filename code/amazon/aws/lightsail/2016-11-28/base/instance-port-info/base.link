
load @wavebond/snow/amazonaws.com/lightsail/2016-11-28/base/access-direction
  take form access-direction

load @wavebond/snow/amazonaws.com/lightsail/2016-11-28/base/network-protocol
  take form network-protocol

load @wavebond/snow/amazonaws.com/lightsail/2016-11-28/base/port
  take form port

load @wavebond/snow/amazonaws.com/lightsail/2016-11-28/base/port-access-type
  take form port-access-type

load @wavebond/snow/amazonaws.com/lightsail/2016-11-28/base/string-list
  take form string-list

load @wavebond/snow/base/string
  take form string

form instance-port-info, name <InstancePortInfo>
  note <Describes information about ports for an Amazon Lightsail instance.>
  take from-port, name <fromPort>
    like port
    void take
    note <The first port in a range of open ports on an instance.

Allowed ports:

- TCP and UDP - `0` to `65535`

- ICMP - The ICMP type for IPv4 addresses. For example, specify `8` as the `fromPort` (ICMP type), and `-1` as the `toPort` (ICMP code), to enable ICMP Ping. For more information, see [Control Messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) on _Wikipedia_.

- ICMPv6 - The ICMP type for IPv6 addresses. For example, specify `128` as the `fromPort` (ICMPv6 type), and `0` as `toPort` (ICMPv6 code). For more information, see [Internet Control Message Protocol for IPv6](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6).>
  take to-port, name <toPort>
    like port
    void take
    note <The last port in a range of open ports on an instance.

Allowed ports:

- TCP and UDP - `0` to `65535`

- ICMP - The ICMP code for IPv4 addresses. For example, specify `8` as the `fromPort` (ICMP type), and `-1` as the `toPort` (ICMP code), to enable ICMP Ping. For more information, see [Control Messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) on _Wikipedia_.

- ICMPv6 - The ICMP code for IPv6 addresses. For example, specify `128` as the `fromPort` (ICMPv6 type), and `0` as `toPort` (ICMPv6 code). For more information, see [Internet Control Message Protocol for IPv6](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6).>
  take protocol, name <protocol>
    like network-protocol
    void take
    note <The IP protocol name.

The name can be one of the following:

- `tcp` - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.

- `all` - All transport layer protocol types. For more general information, see [Transport layer](https://en.wikipedia.org/wiki/Transport_layer) on _Wikipedia_.

- `udp` - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.

- `icmp` - Internet Control Message Protocol (ICMP) is used to send error messages and operational information indicating success or failure when communicating with an instance. For example, an error is indicated when an instance could not be reached. When you specify `icmp` as the `protocol`, you must specify the ICMP type using the `fromPort` parameter, and ICMP code using the `toPort` parameter.>
  take access-from, name <accessFrom>
    like string
    void take
    note <The location from which access is allowed. For example, `Anywhere (0.0.0.0/0)`, or `Custom` if a specific IP address or range of IP addresses is allowed.>
  take access-type, name <accessType>
    like port-access-type
    void take
    note <The type of access (`Public` or `Private`).>
  take common-name, name <commonName>
    like string
    void take
    note <The common name of the port information.>
  take access-direction, name <accessDirection>
    like access-direction
    void take
    note <The access direction (`inbound` or `outbound`).

Lightsail currently supports only `inbound` access direction.>
  take cidrs, name <cidrs>
    like string-list
    void take
    note <The IPv4 address, or range of IPv4 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol.

The `ipv6Cidrs` parameter lists the IPv6 addresses that are allowed to connect to an instance.

For more information about CIDR block notation, see [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) on _Wikipedia_.>
  take ipv6-cidrs, name <ipv6Cidrs>
    like string-list
    void take
    note <The IPv6 address, or range of IPv6 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol. Only devices with an IPv6 address can connect to an instance through IPv6; otherwise, IPv4 should be used.

The `cidrs` parameter lists the IPv4 addresses that are allowed to connect to an instance.

For more information about CIDR block notation, see [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) on _Wikipedia_.>
  take cidr-list-aliases, name <cidrListAliases>
    like string-list
    void take
    note <An alias that defines access for a preconfigured range of IP addresses.

The only alias currently supported is `lightsail-connect`, which allows IP addresses of the browser-based RDP/SSH client in the Lightsail console to connect to your instance.>