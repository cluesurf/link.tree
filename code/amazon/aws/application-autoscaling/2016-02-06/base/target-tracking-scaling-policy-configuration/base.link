
load @tunebond/snow/amazonaws.com/application-autoscaling/2016-02-06/base/cooldown
  take form cooldown

load @tunebond/snow/amazonaws.com/application-autoscaling/2016-02-06/base/customized-metric-specification
  take form customized-metric-specification

load @tunebond/snow/amazonaws.com/application-autoscaling/2016-02-06/base/disable-scale-in
  take form disable-scale-in

load @tunebond/snow/amazonaws.com/application-autoscaling/2016-02-06/base/metric-scale
  take form metric-scale

load @tunebond/snow/amazonaws.com/application-autoscaling/2016-02-06/base/predefined-metric-specification
  take form predefined-metric-specification

form target-tracking-scaling-policy-configuration, name <TargetTrackingScalingPolicyConfiguration>
  note <Represents a target tracking scaling policy configuration to use with Application Auto Scaling.>
  take target-value, name <TargetValue>
    like metric-scale
    note <The target value for the metric. Although this property accepts numbers of type Double, it won't accept values that are either too small or too large. Values must be in the range of -2^360 to 2^360. The value must be a valid number based on the choice of metric. For example, if the metric is CPU utilization, then the target value is a percent value that represents how much of the CPU can be used before scaling out.>
  take predefined-metric-specification, name <PredefinedMetricSpecification>
    like predefined-metric-specification
    void take
    note <A predefined metric. You can specify either a predefined metric or a customized metric.>
  take customized-metric-specification, name <CustomizedMetricSpecification>
    like customized-metric-specification
    void take
    note <A customized metric. You can specify either a predefined metric or a customized metric.>
  take scale-out-cooldown, name <ScaleOutCooldown>
    like cooldown
    void take
    note <The amount of time, in seconds, to wait for a previous scale-out activity to take effect.

With the _scale-out cooldown period_, the intention is to continuously (but not excessively) scale out. After Application Auto Scaling successfully scales out using a target tracking scaling policy, it starts to calculate the cooldown time. The scaling policy won't increase the desired capacity again unless either a larger scale out is triggered or the cooldown period ends. While the cooldown period is in effect, the capacity added by the initiating scale-out activity is calculated as part of the desired capacity for the next scale-out activity.

Application Auto Scaling provides a default value of 600 for Amazon ElastiCache replication groups and a default value of 300 for the following scalable targets:

- ECS services

- Spot Fleet requests

- EMR clusters

- AppStream 2.0 fleets

- Aurora DB clusters

- Amazon SageMaker endpoint variants

- Custom resources

For all other scalable targets, the default value is 0:

- DynamoDB tables

- DynamoDB global secondary indexes

- Amazon Comprehend document classification and entity recognizer endpoints

- Lambda provisioned concurrency

- Amazon Keyspaces tables

- Amazon MSK broker storage>
  take scale-in-cooldown, name <ScaleInCooldown>
    like cooldown
    void take
    note <The amount of time, in seconds, after a scale-in activity completes before another scale-in activity can start.

With the _scale-in cooldown period_, the intention is to scale in conservatively to protect your applicationâ€™s availability, so scale-in activities are blocked until the cooldown period has expired. However, if another alarm triggers a scale-out activity during the scale-in cooldown period, Application Auto Scaling scales out the target immediately. In this case, the scale-in cooldown period stops and doesn't complete.

Application Auto Scaling provides a default value of 600 for Amazon ElastiCache replication groups and a default value of 300 for the following scalable targets:

- ECS services

- Spot Fleet requests

- EMR clusters

- AppStream 2.0 fleets

- Aurora DB clusters

- Amazon SageMaker endpoint variants

- Custom resources

For all other scalable targets, the default value is 0:

- DynamoDB tables

- DynamoDB global secondary indexes

- Amazon Comprehend document classification and entity recognizer endpoints

- Lambda provisioned concurrency

- Amazon Keyspaces tables

- Amazon MSK broker storage>
  take disable-scale-in, name <DisableScaleIn>
    like disable-scale-in
    void take
    note <Indicates whether scale in by the target tracking scaling policy is disabled. If the value is `true`, scale in is disabled and the target tracking scaling policy won't remove capacity from the scalable target. Otherwise, scale in is enabled and the target tracking scaling policy can remove capacity from the scalable target. The default value is `false`.>