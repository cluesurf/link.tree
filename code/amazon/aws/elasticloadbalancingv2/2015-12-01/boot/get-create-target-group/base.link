
load @drumwork/snow/amazonaws.com/elasticloadbalancingv2/2015-12-01/base/create-target-group-output
  take form create-target-group-output

load @drumwork/snow/amazonaws.com/elasticloadbalancingv2/2015-12-01/base/duplicate-target-group-name-exception
  take form duplicate-target-group-name-exception

load @drumwork/snow/amazonaws.com/elasticloadbalancingv2/2015-12-01/base/grpc-code
  take form grpc-code

load @drumwork/snow/amazonaws.com/elasticloadbalancingv2/2015-12-01/base/http-code
  take form http-code

load @drumwork/snow/amazonaws.com/elasticloadbalancingv2/2015-12-01/base/invalid-configuration-request-exception
  take form invalid-configuration-request-exception

load @drumwork/snow/amazonaws.com/elasticloadbalancingv2/2015-12-01/base/tag
  take form tag

load @drumwork/snow/amazonaws.com/elasticloadbalancingv2/2015-12-01/base/too-many-tags-exception
  take form too-many-tags-exception

load @drumwork/snow/amazonaws.com/elasticloadbalancingv2/2015-12-01/base/too-many-target-groups-exception
  take form too-many-target-groups-exception

load @drumwork/snow/base/form
  take form form

load @drumwork/snow/base/list
  take form list

load @drumwork/snow/base/native-boolean
  take form native-boolean

load @drumwork/snow/base/native-integer
  take form native-integer

load @drumwork/snow/base/native-string
  take form native-string

boot get-create-target-group, name <GET_CreateTargetGroup>
  deed get
  note <Creates a target group.

For more information, see the following:

- [Target groups for your Application Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html)

- [Target groups for your Network Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html)

- [Target groups for your Gateway Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html)

This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple target groups with the same settings, each call succeeds.>

  take name
    like native-string
    note <The name of the target group.

This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.>
  take protocol
    like native-string
    note <The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a Lambda function, this parameter does not apply.>
    void take
  take protocol-version
    like native-string
    note <[HTTP/HTTPS protocol] The protocol version. Specify `GRPC` to send requests to targets using gRPC. Specify `HTTP2` to send requests to targets using HTTP/2. The default is `HTTP1`, which sends requests to targets using HTTP/1.1.>
    void take
  take port
    like native-integer
    note <The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.>
    void take
  take vpc-id
    like native-string
    note <The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply. Otherwise, this parameter is required.>
    void take
  take health-check-protocol
    like native-string
    note <The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.>
    void take
  take health-check-port
    like native-string
    note <The port the load balancer uses when performing health checks on targets. If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is `traffic-port`, which is the port on which each target receives traffic from the load balancer. If the protocol is GENEVE, the default is port 80.>
    void take
  take health-check-enabled
    like native-boolean
    note <Indicates whether health checks are enabled. If the target type is `lambda`, health checks are disabled by default but can be enabled. If the target type is `instance` or `ip`, health checks are always enabled and cannot be disabled.>
    void take
  take health-check-path
    like native-string
    note <[HTTP/HTTPS health checks] The destination for health checks on the targets.

[HTTP1 or HTTP2 protocol version] The ping path. The default is /.

[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.>
    void take
  take health-check-interval-seconds
    like native-integer
    note <The approximate amount of time, in seconds, between health checks of an individual target. If the target group protocol is TCP, TLS, UDP, or TCP_UDP, the supported values are 10 and 30 seconds. If the target group protocol is HTTP or HTTPS, the default is 30 seconds. If the target group protocol is GENEVE, the default is 10 seconds. If the target type is `lambda`, the default is 35 seconds.>
    void take
  take health-check-timeout-seconds
    like native-integer
    note <The amount of time, in seconds, during which no response from a target means a failed health check. For target groups with a protocol of HTTP, HTTPS, or GENEVE, the default is 5 seconds. For target groups with a protocol of TCP or TLS, this value must be 6 seconds for HTTP health checks and 10 seconds for TCP and HTTPS health checks. If the target type is `lambda`, the default is 30 seconds.>
    void take
  take healthy-threshold-count
    like native-integer
    note <The number of consecutive health checks successes required before considering an unhealthy target healthy. For target groups with a protocol of HTTP or HTTPS, the default is 5. For target groups with a protocol of TCP, TLS, or GENEVE, the default is 3. If the target type is `lambda`, the default is 5.>
    void take
  take unhealthy-threshold-count
    like native-integer
    note <The number of consecutive health check failures required before considering a target unhealthy. If the target group protocol is HTTP or HTTPS, the default is 2. If the target group protocol is TCP or TLS, this value must be the same as the healthy threshold count. If the target group protocol is GENEVE, the default is 3. If the target type is `lambda`, the default is 2.>
    void take
  take matcher
    like form
      take http-code, name <HttpCode>
        like http-code
        void take
        note <For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").

For Network Load Balancers and Gateway Load Balancers, this must be "200-399".>
      take grpc-code, name <GrpcCode>
        like grpc-code
        void take
        note <You can specify values between 0 and 99. You can specify multiple values (for example, "0,1") or a range of values (for example, "0-5"). The default value is 12.>
    note <[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.>
    void take
  take target-type
    like native-string
    note <The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.

- `instance` - Register targets by instance ID. This is the default value.

- `ip` - Register targets by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses.

- `lambda` - Register a single Lambda function as a target.>
    void take
  take tags
    like list
      like tag
    note <The tags to assign to the target group.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=CreateTargetGroup>

  find <Name>, loan name
  find <Protocol>, loan protocol
  find <ProtocolVersion>, loan protocol-version
  find <Port>, loan port
  find <VpcId>, loan vpc-id
  find <HealthCheckProtocol>, loan health-check-protocol
  find <HealthCheckPort>, loan health-check-port
  find <HealthCheckEnabled>, loan health-check-enabled
  find <HealthCheckPath>, loan health-check-path
  find <HealthCheckIntervalSeconds>, loan health-check-interval-seconds
  find <HealthCheckTimeoutSeconds>, loan health-check-timeout-seconds
  find <HealthyThresholdCount>, loan healthy-threshold-count
  find <UnhealthyThresholdCount>, loan unhealthy-threshold-count
  find <Matcher>, loan matcher
  find <TargetType>, loan target-type
  find <Tags>, loan tags
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like create-target-group-output
    note <Success>
  loot 480
    seed xml, like duplicate-target-group-name-exception
    note <DuplicateTargetGroupNameException>
  loot 481
    seed xml, like too-many-target-groups-exception
    note <TooManyTargetGroupsException>
  loot 482
    seed xml, like invalid-configuration-request-exception
    note <InvalidConfigurationRequestException>
  loot 483
    seed xml, like too-many-tags-exception
    note <TooManyTagsException>