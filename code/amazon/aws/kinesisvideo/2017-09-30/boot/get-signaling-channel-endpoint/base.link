
load @drumwork/snow/amazonaws.com/kinesisvideo/2017-09-30/base/access-denied-exception
  take form access-denied-exception

load @drumwork/snow/amazonaws.com/kinesisvideo/2017-09-30/base/client-limit-exceeded-exception
  take form client-limit-exceeded-exception

load @drumwork/snow/amazonaws.com/kinesisvideo/2017-09-30/base/get-signaling-channel-endpoint-body
  take form get-signaling-channel-endpoint-body

load @drumwork/snow/amazonaws.com/kinesisvideo/2017-09-30/base/get-signaling-channel-endpoint-output
  take form get-signaling-channel-endpoint-output

load @drumwork/snow/amazonaws.com/kinesisvideo/2017-09-30/base/invalid-argument-exception
  take form invalid-argument-exception

load @drumwork/snow/amazonaws.com/kinesisvideo/2017-09-30/base/resource-in-use-exception
  take form resource-in-use-exception

load @drumwork/snow/amazonaws.com/kinesisvideo/2017-09-30/base/resource-not-found-exception
  take form resource-not-found-exception

boot get-signaling-channel-endpoint, name <GetSignalingChannelEndpoint>
  deed post
  note <Provides an endpoint for the specified signaling channel to send and receive messages. This API uses the `SingleMasterChannelEndpointConfiguration` input parameter, which consists of the `Protocols` and `Role` properties.

`Protocols` is used to determine the communication mechanism. For example, if you specify `WSS` as the protocol, this API produces a secure websocket endpoint. If you specify `HTTPS` as the protocol, this API generates an HTTPS endpoint.

`Role` determines the messaging permissions. A `MASTER` role results in this API generating an endpoint that a client can use to communicate with any of the viewers on the channel. A `VIEWER` role results in this API generating an endpoint that a client can use to communicate only with a `MASTER`.>

  take get-signaling-channel-endpoint-body, like get-signaling-channel-endpoint-body

  line </getSignalingChannelEndpoint>

  seed json, loan get-signaling-channel-endpoint-body

  loot 200
    seed json, like get-signaling-channel-endpoint-output
    note <Success>
  loot 480
    seed json, like invalid-argument-exception
    note <InvalidArgumentException>
  loot 481
    seed json, like client-limit-exceeded-exception
    note <ClientLimitExceededException>
  loot 482
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 483
    seed json, like resource-in-use-exception
    note <ResourceInUseException>
  loot 484
    seed json, like access-denied-exception
    note <AccessDeniedException>