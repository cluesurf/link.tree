
load @termsurf/snow/amazonaws.com/states/2016-11-23/base/create-state-machine-output
  take form create-state-machine-output

load @termsurf/snow/amazonaws.com/states/2016-11-23/base/invalid-arn
  take form invalid-arn

load @termsurf/snow/amazonaws.com/states/2016-11-23/base/invalid-definition
  take form invalid-definition

load @termsurf/snow/amazonaws.com/states/2016-11-23/base/invalid-logging-configuration
  take form invalid-logging-configuration

load @termsurf/snow/amazonaws.com/states/2016-11-23/base/invalid-name
  take form invalid-name

load @termsurf/snow/amazonaws.com/states/2016-11-23/base/invalid-tracing-configuration
  take form invalid-tracing-configuration

load @termsurf/snow/amazonaws.com/states/2016-11-23/base/state-machine-already-exists
  take form state-machine-already-exists

load @termsurf/snow/amazonaws.com/states/2016-11-23/base/state-machine-deleting
  take form state-machine-deleting

load @termsurf/snow/amazonaws.com/states/2016-11-23/base/state-machine-limit-exceeded
  take form state-machine-limit-exceeded

load @termsurf/snow/amazonaws.com/states/2016-11-23/base/state-machine-type-not-supported
  take form state-machine-type-not-supported

load @termsurf/snow/amazonaws.com/states/2016-11-23/base/too-many-tags
  take form too-many-tags

load @termsurf/snow/base/native-string
  take form native-string

boot create-state-machine, name <CreateStateMachine>
  deed post
  note <Creates a state machine. A state machine consists of a collection of states that can do work (`Task` states), determine to which states to transition next (`Choice` states), stop an execution with an error (`Fail` states), and so on. State machines are specified using a JSON-based, structured language. For more information, see [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) in the AWS Step Functions User Guide.

This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.

`CreateStateMachine` is an idempotent API. Subsequent requests wonâ€™t create a duplicate resource if it was already created. `CreateStateMachine`'s idempotency check is based on the state machine `name`, `definition`, `type`, `LoggingConfiguration` and `TracingConfiguration`. If a following request has a different `roleArn` or `tags`, Step Functions will ignore these differences and treat it as an idempotent request of the previous. In this case, `roleArn` and `tags` will not be updated, even if they are different.>

  take x-amz-target
    like native-string
  take create-state-machine-input, like create-state-machine-input

  line </#X-Amz-Target=AWSStepFunctions.CreateStateMachine>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan create-state-machine-input

  loot 200
    seed json, like create-state-machine-output
    note <Success>
  loot 480
    seed json, like invalid-arn
    note <InvalidArn>
  loot 481
    seed json, like invalid-definition
    note <InvalidDefinition>
  loot 482
    seed json, like invalid-name
    note <InvalidName>
  loot 483
    seed json, like invalid-logging-configuration
    note <InvalidLoggingConfiguration>
  loot 484
    seed json, like invalid-tracing-configuration
    note <InvalidTracingConfiguration>
  loot 485
    seed json, like state-machine-already-exists
    note <StateMachineAlreadyExists>
  loot 486
    seed json, like state-machine-deleting
    note <StateMachineDeleting>
  loot 487
    seed json, like state-machine-limit-exceeded
    note <StateMachineLimitExceeded>
  loot 488
    seed json, like state-machine-type-not-supported
    note <StateMachineTypeNotSupported>
  loot 489
    seed json, like too-many-tags
    note <TooManyTags>