
load @tunebond/snow/amazonaws.com/autoscaling/2011-01-01/base/mixed-instance-spot-price
  take form mixed-instance-spot-price

load @tunebond/snow/amazonaws.com/autoscaling/2011-01-01/base/on-demand-base-capacity
  take form on-demand-base-capacity

load @tunebond/snow/amazonaws.com/autoscaling/2011-01-01/base/on-demand-percentage-above-base-capacity
  take form on-demand-percentage-above-base-capacity

load @tunebond/snow/amazonaws.com/autoscaling/2011-01-01/base/spot-instance-pools
  take form spot-instance-pools

load @tunebond/snow/amazonaws.com/autoscaling/2011-01-01/base/xml-string
  take form xml-string

form instances-distribution, name <InstancesDistribution>
  note <Describes an instances distribution for an Auto Scaling group with a MixedInstancesPolicy.

The instances distribution specifies the distribution of On-Demand Instances and Spot Instances, the maximum price to pay for Spot Instances, and how the Auto Scaling group allocates instance types to fulfill On-Demand and Spot capacities.

When you modify `SpotAllocationStrategy`, `SpotInstancePools`, or `SpotMaxPrice` in the UpdateAutoScalingGroup API call, this update action does not deploy any changes across the running Amazon EC2 instances in the group. Your existing Spot Instances continue to run as long as the maximum price for those instances is higher than the current Spot price. When scale out occurs, Amazon EC2 Auto Scaling launches instances based on the new settings. When scale in occurs, Amazon EC2 Auto Scaling terminates instances according to the group's termination policies.>
  take on-demand-allocation-strategy, name <OnDemandAllocationStrategy>
    like xml-string
    void take
    note <Indicates how to allocate instance types to fulfill On-Demand capacity. The only valid value is `prioritized`, which is also the default value. This strategy uses the order of instance types in the `LaunchTemplateOverrides` to define the launch priority of each instance type. The first instance type in the array is prioritized higher than the last. If all your On-Demand capacity cannot be fulfilled using your highest priority instance, then the Auto Scaling groups launches the remaining capacity using the second priority instance type, and so on.>
  take on-demand-base-capacity, name <OnDemandBaseCapacity>
    like on-demand-base-capacity
    void take
    note <The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand Instances. This base portion is provisioned first as your group scales. Defaults to 0 if not specified. If you specify weights for the instance types in the overrides, set the value of `OnDemandBaseCapacity` in terms of the number of capacity units, and not the number of instances.>
  take on-demand-percentage-above-base-capacity, name <OnDemandPercentageAboveBaseCapacity>
    like on-demand-percentage-above-base-capacity
    void take
    note <Controls the percentages of On-Demand Instances and Spot Instances for your additional capacity beyond `OnDemandBaseCapacity`. Expressed as a number (for example, 20 specifies 20% On-Demand Instances, 80% Spot Instances). Defaults to 100 if not specified. If set to 100, only On-Demand Instances are provisioned.>
  take spot-allocation-strategy, name <SpotAllocationStrategy>
    like xml-string
    void take
    note <Indicates how to allocate instances across Spot Instance pools.

If the allocation strategy is `lowest-price`, the Auto Scaling group launches instances using the Spot pools with the lowest price, and evenly allocates your instances across the number of Spot pools that you specify. Defaults to `lowest-price` if not specified.

If the allocation strategy is `capacity-optimized` (recommended), the Auto Scaling group launches instances using Spot pools that are optimally chosen based on the available Spot capacity. Alternatively, you can use `capacity-optimized-prioritized` and set the order of instance types in the list of launch template overrides from highest to lowest priority (from first to last in the list). Amazon EC2 Auto Scaling honors the instance type priorities on a best-effort basis but optimizes for capacity first.>
  take spot-instance-pools, name <SpotInstancePools>
    like spot-instance-pools
    void take
    note <The number of Spot Instance pools across which to allocate your Spot Instances. The Spot pools are determined from the different instance types in the overrides. Valid only when the Spot allocation strategy is `lowest-price`. Value must be in the range of 1 to 20. Defaults to 2 if not specified.>
  take spot-max-price, name <SpotMaxPrice>
    like mixed-instance-spot-price
    void take
    note <The maximum price per unit hour that you are willing to pay for a Spot Instance. If you leave the value at its default (empty), Amazon EC2 Auto Scaling uses the On-Demand price as the maximum Spot price. To remove a value that you previously set, include the property but specify an empty string ("") for the value.>