
load @termsurf/snow/amazonaws.com/dynamodb/2012-08-10/base/internal-server-error
  take form internal-server-error

load @termsurf/snow/amazonaws.com/dynamodb/2012-08-10/base/provisioned-throughput-exceeded-exception
  take form provisioned-throughput-exceeded-exception

load @termsurf/snow/amazonaws.com/dynamodb/2012-08-10/base/request-limit-exceeded
  take form request-limit-exceeded

load @termsurf/snow/amazonaws.com/dynamodb/2012-08-10/base/resource-not-found-exception
  take form resource-not-found-exception

load @termsurf/snow/amazonaws.com/dynamodb/2012-08-10/base/scan-output
  take form scan-output

load @termsurf/snow/base/native-string
  take form native-string

boot scan, name <Scan>
  deed post
  note <The `Scan` operation returns one or more items and item attributes by accessing every item in a table or a secondary index. To have DynamoDB return fewer items, you can provide a `FilterExpression` operation.

If the total number of scanned items exceeds the maximum dataset size limit of 1 MB, the scan stops and results are returned to the user as a `LastEvaluatedKey` value to continue the scan in a subsequent operation. The results also include the number of items exceeding the limit. A scan can result in no table data meeting the filter criteria.

A single `Scan` operation reads up to the maximum number of items set (if using the `Limit` parameter) or a maximum of 1 MB of data and then apply any filtering to the results using `FilterExpression`. If `LastEvaluatedKey` is present in the response, you need to paginate the result set. For more information, see [Paginating the Results](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination) in the _Amazon DynamoDB Developer Guide_.

`Scan` operations proceed sequentially; however, for faster performance on a large table or secondary index, applications can request a parallel `Scan` operation by providing the `Segment` and `TotalSegments` parameters. For more information, see [Parallel Scan](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan) in the _Amazon DynamoDB Developer Guide_.

`Scan` uses eventually consistent reads when accessing the data in a table; therefore, the result set might not include the changes to data in the table immediately before the operation began. If you need a consistent copy of the data, as of the time that the `Scan` begins, you can set the `ConsistentRead` parameter to `true`.>

  take x-amz-target
    like native-string
  take limit
    like native-string
    note <Pagination limit>
    void take
  take exclusive-start-key
    like native-string
    note <Pagination token>
    void take
  take scan-input, like scan-input

  line </#X-Amz-Target=DynamoDB_20120810.Scan>

  hint <X-Amz-Target>, loan x-amz-target

  find <Limit>, loan limit
  find <ExclusiveStartKey>, loan exclusive-start-key

  seed json, loan scan-input

  loot 200
    seed json, like scan-output
    note <Success>
  loot 480
    seed json, like provisioned-throughput-exceeded-exception
    note <ProvisionedThroughputExceededException>
  loot 481
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 482
    seed json, like request-limit-exceeded
    note <RequestLimitExceeded>
  loot 483
    seed json, like internal-server-error
    note <InternalServerError>