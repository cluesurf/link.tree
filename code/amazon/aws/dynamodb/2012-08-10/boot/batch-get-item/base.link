
load @textsurf/snow/amazonaws.com/dynamodb/2012-08-10/base/batch-get-item-output
  take form batch-get-item-output

load @textsurf/snow/amazonaws.com/dynamodb/2012-08-10/base/internal-server-error
  take form internal-server-error

load @textsurf/snow/amazonaws.com/dynamodb/2012-08-10/base/provisioned-throughput-exceeded-exception
  take form provisioned-throughput-exceeded-exception

load @textsurf/snow/amazonaws.com/dynamodb/2012-08-10/base/request-limit-exceeded
  take form request-limit-exceeded

load @textsurf/snow/amazonaws.com/dynamodb/2012-08-10/base/resource-not-found-exception
  take form resource-not-found-exception

load @textsurf/snow/base/native-string
  take form native-string

boot batch-get-item, name <BatchGetItem>
  deed post
  note <The `BatchGetItem` operation returns the attributes of one or more items from one or more tables. You identify requested items by primary key.

A single operation can retrieve up to 16 MB of data, which can contain as many as 100 items. `BatchGetItem` returns a partial result if the response size limit is exceeded, the table's provisioned throughput is exceeded, or an internal processing failure occurs. If a partial result is returned, the operation returns a value for `UnprocessedKeys`. You can use this value to retry the operation starting with the next item to get.

If you request more than 100 items, `BatchGetItem` returns a `ValidationException` with the message "Too many items requested for the BatchGetItem call."

For example, if you ask to retrieve 100 items, but each individual item is 300 KB in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also returns an appropriate `UnprocessedKeys` value so you can get the next page of results. If desired, your application can include its own logic to assemble the pages of results into one dataset.

If _none_ of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then `BatchGetItem` returns a `ProvisionedThroughputExceededException`. If _at least one_ of the items is successfully processed, then `BatchGetItem` completes successfully, while returning the keys of the unread items in `UnprocessedKeys`.

If DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, _we strongly recommend that you use an exponential backoff algorithm_. If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.

For more information, see [Batch Operations and Error Handling](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations) in the _Amazon DynamoDB Developer Guide_.

By default, `BatchGetItem` performs eventually consistent reads on every table in the request. If you want strongly consistent reads instead, you can set `ConsistentRead` to `true` for any or all tables.

In order to minimize response latency, `BatchGetItem` retrieves items in parallel.

When designing your application, keep in mind that DynamoDB does not return items in any particular order. To help parse the response by item, include the primary key values for the items in your request in the `ProjectionExpression` parameter.

If a requested item does not exist, it is not returned in the result. Requests for nonexistent items consume the minimum read capacity units according to the type of read. For more information, see [Working with Tables](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations) in the _Amazon DynamoDB Developer Guide_.>

  take x-amz-target
    like native-string
  take request-items
    like native-string
    note <Pagination token>
    void take
  take batch-get-item-input, like batch-get-item-input

  line </#X-Amz-Target=DynamoDB_20120810.BatchGetItem>

  hint <X-Amz-Target>, loan x-amz-target

  find <RequestItems>, loan request-items

  seed json, loan batch-get-item-input

  loot 200
    seed json, like batch-get-item-output
    note <Success>
  loot 480
    seed json, like provisioned-throughput-exceeded-exception
    note <ProvisionedThroughputExceededException>
  loot 481
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 482
    seed json, like request-limit-exceeded
    note <RequestLimitExceeded>
  loot 483
    seed json, like internal-server-error
    note <InternalServerError>