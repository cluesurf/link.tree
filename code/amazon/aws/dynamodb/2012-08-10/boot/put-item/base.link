
load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/conditional-check-failed-exception
  take form conditional-check-failed-exception

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/internal-server-error
  take form internal-server-error

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/item-collection-size-limit-exceeded-exception
  take form item-collection-size-limit-exceeded-exception

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/provisioned-throughput-exceeded-exception
  take form provisioned-throughput-exceeded-exception

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/put-item-output
  take form put-item-output

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/request-limit-exceeded
  take form request-limit-exceeded

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/resource-not-found-exception
  take form resource-not-found-exception

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/transaction-conflict-exception
  take form transaction-conflict-exception

load @tunebond/snow/base/native-string
  take form native-string

boot put-item, name <PutItem>
  deed post
  note <Creates a new item, or replaces an old item with a new item. If an item that has the same primary key as the new item already exists in the specified table, the new item completely replaces the existing item. You can perform a conditional put operation (add a new item if one with the specified primary key doesn't exist), or replace an existing item if it has certain attribute values. You can return the item's attribute values in the same operation, using the `ReturnValues` parameter.

This topic provides general information about the `PutItem` API.

For information on how to call the `PutItem` API using the AWS SDK in specific languages, see the following:

- [PutItem in the AWS Command Line Interface](http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem)

- [PutItem in the AWS SDK for .NET](http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem)

- [PutItem in the AWS SDK for C++](http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem)

- [PutItem in the AWS SDK for Go](http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem)

- [PutItem in the AWS SDK for Java](http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem)

- [PutItem in the AWS SDK for JavaScript](http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem)

- [PutItem in the AWS SDK for PHP V3](http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem)

- [PutItem in the AWS SDK for Python](http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem)

- [PutItem in the AWS SDK for Ruby V2](http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem)

When you add an item, the primary key attributes are the only required attributes. Attribute values cannot be null.

Empty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index. Set type attributes cannot be empty.

Invalid Requests with empty values will be rejected with a `ValidationException` exception.

To prevent a new item from replacing an existing item, use a conditional expression that contains the `attribute_not_exists` function with the name of the attribute being used as the partition key for the table. Since every record must contain that attribute, the `attribute_not_exists` function will only succeed if no matching item exists.

For more information about `PutItem`, see [Working with Items](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html) in the _Amazon DynamoDB Developer Guide_.>

  take x-amz-target
    like native-string
  take put-item-input, like put-item-input

  line </#X-Amz-Target=DynamoDB_20120810.PutItem>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan put-item-input

  loot 200
    seed json, like put-item-output
    note <Success>
  loot 480
    seed json, like conditional-check-failed-exception
    note <ConditionalCheckFailedException>
  loot 481
    seed json, like provisioned-throughput-exceeded-exception
    note <ProvisionedThroughputExceededException>
  loot 482
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 483
    seed json, like item-collection-size-limit-exceeded-exception
    note <ItemCollectionSizeLimitExceededException>
  loot 484
    seed json, like transaction-conflict-exception
    note <TransactionConflictException>
  loot 485
    seed json, like request-limit-exceeded
    note <RequestLimitExceeded>
  loot 486
    seed json, like internal-server-error
    note <InternalServerError>