
load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/binary-attribute-value
  take form binary-attribute-value

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/binary-set-attribute-value
  take form binary-set-attribute-value

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/boolean-attribute-value
  take form boolean-attribute-value

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/list-attribute-value
  take form list-attribute-value

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/map-attribute-value
  take form map-attribute-value

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/null-attribute-value
  take form null-attribute-value

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/number-attribute-value
  take form number-attribute-value

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/number-set-attribute-value
  take form number-set-attribute-value

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/string-attribute-value
  take form string-attribute-value

load @tunebond/snow/amazonaws.com/dynamodb/2012-08-10/base/string-set-attribute-value
  take form string-set-attribute-value

form attribute-value, name <AttributeValue>
  note <Represents the data for an attribute.

Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.

For more information, see [Data Types](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes) in the _Amazon DynamoDB Developer Guide_.>
  take s, name <S>
    like string-attribute-value
    void take
    note <An attribute of type String. For example:

`"S": "Hello"`>
  take n, name <N>
    like number-attribute-value
    void take
    note <An attribute of type Number. For example:

`"N": "123.45"`

Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.>
  take b, name <B>
    like binary-attribute-value
    void take
    note <An attribute of type Binary. For example:

`"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"`>
  take ss, name <SS>
    like string-set-attribute-value
    void take
    note <An attribute of type String Set. For example:

`"SS": ["Giraffe", "Hippo" ,"Zebra"]`>
  take ns, name <NS>
    like number-set-attribute-value
    void take
    note <An attribute of type Number Set. For example:

`"NS": ["42.2", "-19", "7.5", "3.14"]`

Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.>
  take bs, name <BS>
    like binary-set-attribute-value
    void take
    note <An attribute of type Binary Set. For example:

`"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]`>
  take m, name <M>
    like map-attribute-value
    void take
    note <An attribute of type Map. For example:

`"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}`>
  take l, name <L>
    like list-attribute-value
    void take
    note <An attribute of type List. For example:

`"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]`>
  take null, name <NULL>
    like null-attribute-value
    void take
    note <An attribute of type Null. For example:

`"NULL": true`>
  take bool, name <BOOL>
    like boolean-attribute-value
    void take
    note <An attribute of type Boolean. For example:

`"BOOL": true`>