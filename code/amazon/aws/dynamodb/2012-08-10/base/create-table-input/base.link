
load @treesurf/snow/amazonaws.com/dynamodb/2012-08-10/base/attribute-definitions
  take form attribute-definitions

load @treesurf/snow/amazonaws.com/dynamodb/2012-08-10/base/billing-mode
  take form billing-mode

load @treesurf/snow/amazonaws.com/dynamodb/2012-08-10/base/global-secondary-index-list
  take form global-secondary-index-list

load @treesurf/snow/amazonaws.com/dynamodb/2012-08-10/base/key-schema
  take form key-schema

load @treesurf/snow/amazonaws.com/dynamodb/2012-08-10/base/local-secondary-index-list
  take form local-secondary-index-list

load @treesurf/snow/amazonaws.com/dynamodb/2012-08-10/base/provisioned-throughput
  take form provisioned-throughput

load @treesurf/snow/amazonaws.com/dynamodb/2012-08-10/base/sse-specification
  take form sse-specification

load @treesurf/snow/amazonaws.com/dynamodb/2012-08-10/base/stream-specification
  take form stream-specification

load @treesurf/snow/amazonaws.com/dynamodb/2012-08-10/base/table-name
  take form table-name

load @treesurf/snow/amazonaws.com/dynamodb/2012-08-10/base/tag-list
  take form tag-list

form create-table-input, name <CreateTableInput>
  note <Represents the input of a `CreateTable` operation.>
  take attribute-definitions, name <AttributeDefinitions>
    like attribute-definitions
    note <An array of attributes that describe the key schema for the table and indexes.>
  take table-name, name <TableName>
    like table-name
    note <The name of the table to create.>
  take key-schema, name <KeySchema>
    like key-schema
    note <Specifies the attributes that make up the primary key for a table or an index. The attributes in `KeySchema` must also be defined in the `AttributeDefinitions` array. For more information, see [Data Model](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html) in the _Amazon DynamoDB Developer Guide_.

Each `KeySchemaElement` in the array is composed of:

- `AttributeName` - The name of this key attribute.

- `KeyType` - The role that the key attribute will assume:

  - `HASH` - partition key

  - `RANGE` - sort key

The partition key of an item is also known as its _hash attribute_. The term "hash attribute" derives from the DynamoDB usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.

The sort key of an item is also known as its _range attribute_. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.

For a simple primary key (partition key), you must provide exactly one element with a `KeyType` of `HASH`.

For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a `KeyType` of `HASH`, and the second element must have a `KeyType` of `RANGE`.

For more information, see [Working with Tables](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key) in the _Amazon DynamoDB Developer Guide_.>
  take local-secondary-indexes, name <LocalSecondaryIndexes>
    like local-secondary-index-list
    void take
    note <One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.

Each local secondary index in the array includes the following:

- `IndexName` - The name of the local secondary index. Must be unique only for this table.

- `KeySchema` - Specifies the key schema for the local secondary index. The key schema must begin with the same partition key as the table.

- `Projection` - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:

  - `ProjectionType` - One of the following:

    - `KEYS_ONLY` - Only the index and primary keys are projected into the index.

    - `INCLUDE` - Only the specified table attributes are projected into the index. The list of projected attributes is in `NonKeyAttributes`.

    - `ALL` - All of the table attributes are projected into the index.

  - `NonKeyAttributes` - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in `NonKeyAttributes`, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.>
  take global-secondary-indexes, name <GlobalSecondaryIndexes>
    like global-secondary-index-list
    void take
    note <One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:

- `IndexName` - The name of the global secondary index. Must be unique only for this table.

- `KeySchema` - Specifies the key schema for the global secondary index.

- `Projection` - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:

  - `ProjectionType` - One of the following:

    - `KEYS_ONLY` - Only the index and primary keys are projected into the index.

    - `INCLUDE` - Only the specified table attributes are projected into the index. The list of projected attributes is in `NonKeyAttributes`.

    - `ALL` - All of the table attributes are projected into the index.

  - `NonKeyAttributes` - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in `NonKeyAttributes`, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.

- `ProvisionedThroughput` - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units.>
  take billing-mode, name <BillingMode>
    like billing-mode
    void take
    note <Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.

- `PROVISIONED` - We recommend using `PROVISIONED` for predictable workloads. `PROVISIONED` sets the billing mode to [Provisioned Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).

- `PAY_PER_REQUEST` - We recommend using `PAY_PER_REQUEST` for unpredictable workloads. `PAY_PER_REQUEST` sets the billing mode to [On-Demand Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).>
  take provisioned-throughput, name <ProvisionedThroughput>
    like provisioned-throughput
    void take
    note <Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the `UpdateTable` operation.

If you set BillingMode as `PROVISIONED`, you must specify this property. If you set BillingMode as `PAY_PER_REQUEST`, you cannot specify this property.

For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the _Amazon DynamoDB Developer Guide_.>
  take stream-specification, name <StreamSpecification>
    like stream-specification
    void take
    note <The settings for DynamoDB Streams on the table. These settings consist of:

- `StreamEnabled` - Indicates whether DynamoDB Streams is to be enabled (true) or disabled (false).

- `StreamViewType` - When an item in the table is modified, `StreamViewType` determines what information is written to the table's stream. Valid values for `StreamViewType` are:

  - `KEYS_ONLY` - Only the key attributes of the modified item are written to the stream.

  - `NEW_IMAGE` - The entire item, as it appears after it was modified, is written to the stream.

  - `OLD_IMAGE` - The entire item, as it appeared before it was modified, is written to the stream.

  - `NEW_AND_OLD_IMAGES` - Both the new and the old item images of the item are written to the stream.>
  take sse-specification, name <SSESpecification>
    like sse-specification
    void take
    note <Represents the settings used to enable server-side encryption.>
  take tags, name <Tags>
    like tag-list
    void take
    note <A list of key-value pairs to label the table. For more information, see [Tagging for DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html).>