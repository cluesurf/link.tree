
load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/condition-expression
  take form condition-expression

load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/conditional-operator
  take form conditional-operator

load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/expected-attribute-map
  take form expected-attribute-map

load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/expression-attribute-name-map
  take form expression-attribute-name-map

load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/expression-attribute-value-map
  take form expression-attribute-value-map

load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/put-item-input-attribute-map
  take form put-item-input-attribute-map

load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/return-consumed-capacity
  take form return-consumed-capacity

load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/return-item-collection-metrics
  take form return-item-collection-metrics

load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/return-value
  take form return-value

load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/table-name
  take form table-name

form put-item-input, name <PutItemInput>
  note <Represents the input of a `PutItem` operation.>
  take table-name, name <TableName>
    like table-name
    note <The name of the table to contain the item.>
  take item, name <Item>
    like put-item-input-attribute-map
    note <A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.

You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key.

If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.

Empty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index.

For more information about primary keys, see [Primary Key](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey) in the _Amazon DynamoDB Developer Guide_.

Each element in the `Item` map is an `AttributeValue` object.>
  take expected, name <Expected>
    like expected-attribute-map
    void take
    note <This is a legacy parameter. Use `ConditionExpression` instead. For more information, see [Expected](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html) in the _Amazon DynamoDB Developer Guide_.>
  take return-values, name <ReturnValues>
    like return-value
    void take
    note <Use `ReturnValues` if you want to get the item attributes as they appeared before they were updated with the `PutItem` request. For `PutItem`, the valid values are:

- `NONE` - If `ReturnValues` is not specified, or if its value is `NONE`, then nothing is returned. (This setting is the default for `ReturnValues`.)

- `ALL_OLD` - If `PutItem` overwrote an attribute name-value pair, then the content of the old item is returned.

The `ReturnValues` parameter is used by several DynamoDB operations; however, `PutItem` does not recognize any values other than `NONE` or `ALL_OLD`.>
  take return-consumed-capacity, name <ReturnConsumedCapacity>
    like return-consumed-capacity
    void take
  take return-item-collection-metrics, name <ReturnItemCollectionMetrics>
    like return-item-collection-metrics
    void take
    note <Determines whether item collection metrics are returned. If set to `SIZE`, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to `NONE` (the default), no statistics are returned.>
  take conditional-operator, name <ConditionalOperator>
    like conditional-operator
    void take
    note <This is a legacy parameter. Use `ConditionExpression` instead. For more information, see [ConditionalOperator](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html) in the _Amazon DynamoDB Developer Guide_.>
  take condition-expression, name <ConditionExpression>
    like condition-expression
    void take
    note <A condition that must be satisfied in order for a conditional `PutItem` operation to succeed.

An expression can contain any of the following:

- Functions: `attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size`

  These function names are case-sensitive.

- Comparison operators: `= | &lt;&gt; | &lt; | &gt; | &lt;= | &gt;= | BETWEEN | IN`

- Logical operators: `AND | OR | NOT`

For more information on condition expressions, see [Condition Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the _Amazon DynamoDB Developer Guide_.>
  take expression-attribute-names, name <ExpressionAttributeNames>
    like expression-attribute-name-map
    void take
    note <One or more substitution tokens for attribute names in an expression. The following are some use cases for using `ExpressionAttributeNames`:

- To access an attribute whose name conflicts with a DynamoDB reserved word.

- To create a placeholder for repeating occurrences of an attribute name in an expression.

- To prevent special characters in an attribute name from being misinterpreted in an expression.

Use the **#** character in an expression to dereference an attribute name. For example, consider the following attribute name:

- `Percentile`

The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the _Amazon DynamoDB Developer Guide_). To work around this, you could specify the following for `ExpressionAttributeNames`:

- `{"#P":"Percentile"}`

You could then use this substitution in an expression, as in this example:

- `#P = :val`

Tokens that begin with the **:** character are _expression attribute values_, which are placeholders for the actual value at runtime.

For more information on expression attribute names, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the _Amazon DynamoDB Developer Guide_.>
  take expression-attribute-values, name <ExpressionAttributeValues>
    like expression-attribute-value-map
    void take
    note <One or more values that can be substituted in an expression.

Use the **:** (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the _ProductStatus_ attribute was one of the following:

`Available | Backordered | Discontinued`

You would first need to specify `ExpressionAttributeValues` as follows:

`{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }`

You could then use these values in an expression, such as this:

`ProductStatus IN (:avail, :back, :disc)`

For more information on expression attribute values, see [Condition Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the _Amazon DynamoDB Developer Guide_.>