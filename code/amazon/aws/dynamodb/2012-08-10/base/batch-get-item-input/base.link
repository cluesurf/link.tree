
load @nerdbond/snow/amazonaws.com/dynamodb/2012-08-10/base/batch-get-request-map
  take form batch-get-request-map

load @nerdbond/snow/amazonaws.com/dynamodb/2012-08-10/base/return-consumed-capacity
  take form return-consumed-capacity

form batch-get-item-input, name <BatchGetItemInput>
  note <Represents the input of a `BatchGetItem` operation.>
  take request-items, name <RequestItems>
    like batch-get-request-map
    note <A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per `BatchGetItem` request.

Each element in the map of items to retrieve consists of the following:

- `ConsistentRead` - If `true`, a strongly consistent read is used; if `false` (the default), an eventually consistent read is used.

- `ExpressionAttributeNames` - One or more substitution tokens for attribute names in the `ProjectionExpression` parameter. The following are some use cases for using `ExpressionAttributeNames`:

  - To access an attribute whose name conflicts with a DynamoDB reserved word.

  - To create a placeholder for repeating occurrences of an attribute name in an expression.

  - To prevent special characters in an attribute name from being misinterpreted in an expression.

  Use the **#** character in an expression to dereference an attribute name. For example, consider the following attribute name:

  - `Percentile`

  The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the _Amazon DynamoDB Developer Guide_). To work around this, you could specify the following for `ExpressionAttributeNames`:

  - `{"#P":"Percentile"}`

  You could then use this substitution in an expression, as in this example:

  - `#P = :val`

  Tokens that begin with the **:** character are _expression attribute values_, which are placeholders for the actual value at runtime.

  For more information about expression attribute names, see [Accessing Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the _Amazon DynamoDB Developer Guide_.

- `Keys` - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide _all_ of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide _both_ the partition key value and the sort key value.

- `ProjectionExpression` - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.

  If no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result.

  For more information, see [Accessing Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the _Amazon DynamoDB Developer Guide_.

- `AttributesToGet` - This is a legacy parameter. Use `ProjectionExpression` instead. For more information, see [AttributesToGet](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html) in the _Amazon DynamoDB Developer Guide_.>
  take return-consumed-capacity, name <ReturnConsumedCapacity>
    like return-consumed-capacity
    void take