
load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/attribute-name-list
  take form attribute-name-list

load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/consistent-read
  take form consistent-read

load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/expression-attribute-name-map
  take form expression-attribute-name-map

load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/key-list
  take form key-list

load @wavebond/snow/amazonaws.com/dynamodb/2012-08-10/base/projection-expression
  take form projection-expression

form keys-and-attributes, name <KeysAndAttributes>
  note <Represents a set of primary keys and, for each key, the attributes to retrieve from the table.

For each primary key, you must provide _all_ of the key attributes. For example, with a simple primary key, you only need to provide the partition key. For a composite primary key, you must provide _both_ the partition key and the sort key.>
  take keys, name <Keys>
    like key-list
    note <The primary key attribute values that define the items and the attributes associated with the items.>
  take attributes-to-get, name <AttributesToGet>
    like attribute-name-list
    void take
    note <This is a legacy parameter. Use `ProjectionExpression` instead. For more information, see [Legacy Conditional Parameters](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html) in the _Amazon DynamoDB Developer Guide_.>
  take consistent-read, name <ConsistentRead>
    like consistent-read
    void take
    note <The consistency of a read operation. If set to `true`, then a strongly consistent read is used; otherwise, an eventually consistent read is used.>
  take projection-expression, name <ProjectionExpression>
    like projection-expression
    void take
    note <A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the `ProjectionExpression` must be separated by commas.

If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.

For more information, see [Accessing Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the _Amazon DynamoDB Developer Guide_.>
  take expression-attribute-names, name <ExpressionAttributeNames>
    like expression-attribute-name-map
    void take
    note <One or more substitution tokens for attribute names in an expression. The following are some use cases for using `ExpressionAttributeNames`:

- To access an attribute whose name conflicts with a DynamoDB reserved word.

- To create a placeholder for repeating occurrences of an attribute name in an expression.

- To prevent special characters in an attribute name from being misinterpreted in an expression.

Use the **#** character in an expression to dereference an attribute name. For example, consider the following attribute name:

- `Percentile`

The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the _Amazon DynamoDB Developer Guide_). To work around this, you could specify the following for `ExpressionAttributeNames`:

- `{"#P":"Percentile"}`

You could then use this substitution in an expression, as in this example:

- `#P = :val`

Tokens that begin with the **:** character are _expression attribute values_, which are placeholders for the actual value at runtime.

For more information on expression attribute names, see [Accessing Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the _Amazon DynamoDB Developer Guide_.>