
load @wavebond/snow/amazonaws.com/wafv2/2019-07-29/base/body-parsing-fallback-behavior
  take form body-parsing-fallback-behavior

load @wavebond/snow/amazonaws.com/wafv2/2019-07-29/base/json-match-pattern
  take form json-match-pattern

load @wavebond/snow/amazonaws.com/wafv2/2019-07-29/base/json-match-scope
  take form json-match-scope

form json-body, name <JsonBody>
  note <The body of a web request, inspected as JSON. The body immediately follows the request headers. This is used in the FieldToMatch specification.

Use the specifications in this object to indicate which parts of the JSON body to inspect using the rule's inspection criteria. WAF inspects only the parts of the JSON that result from the matches that you indicate.

Example JSON: `"JsonBody": { "MatchPattern": { "All": {} }, "MatchScope": "ALL" }`>
  take match-pattern, name <MatchPattern>
    like json-match-pattern
    note <The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria.>
  take match-scope, name <MatchScope>
    like json-match-scope
    note <The parts of the JSON to match against using the `MatchPattern`. If you specify `All`, WAF matches against keys and values.>
  take invalid-fallback-behavior, name <InvalidFallbackBehavior>
    like body-parsing-fallback-behavior
    void take
    note <What WAF should do if it fails to completely parse the JSON body. The options are the following:

- `EVALUATE_AS_STRING` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string.

- `MATCH` - Treat the web request as matching the rule statement. WAF applies the rule action to the request.

- `NO_MATCH` - Treat the web request as not matching the rule statement.

If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters.

WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as invalid characters, duplicate keys, truncation, and any content whose root node isn't an object or an array.

WAF parses the JSON in the following examples as two valid key, value pairs:

- Missing comma: `{"key1":"value1""key2":"value2"}`

- Missing colon: `{"key1":"value1","key2""value2"}`

- Extra colons: `{"key1"::"value1","key2""value2"}`>