
load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/encryption-failure
  take form encryption-failure

load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/internal-service-error
  take form internal-service-error

load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/invalid-parameter-exception
  take form invalid-parameter-exception

load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/invalid-request-exception
  take form invalid-request-exception

load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/limit-exceeded-exception
  take form limit-exceeded-exception

load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/put-secret-value-response
  take form put-secret-value-response

load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/resource-exists-exception
  take form resource-exists-exception

load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/resource-not-found-exception
  take form resource-not-found-exception

load @termsurf/snow/base/native-string
  take form native-string

boot put-secret-value, name <PutSecretValue>
  deed post
  note <Stores a new encrypted secret value in the specified secret. To do this, the operation creates a new version and attaches it to the secret. The version can contain a new `SecretString` value or a new `SecretBinary` value. You can also specify the staging labels that are initially attached to the new version.

The Secrets Manager console uses only the `SecretString` field. To add binary data to a secret with the `SecretBinary` field you must use the Amazon Web Services CLI or one of the Amazon Web Services SDKs.

- If this operation creates the first version for the secret then Secrets Manager automatically attaches the staging label `AWSCURRENT` to the new version.

- If you do not specify a value for VersionStages then Secrets Manager automatically moves the staging label `AWSCURRENT` to this new version.

- If this operation moves the staging label `AWSCURRENT` from another version to this version, then Secrets Manager also automatically moves the staging label `AWSPREVIOUS` to the version that `AWSCURRENT` was removed from.

- This operation is idempotent. If a version with a `VersionId` with the same value as the `ClientRequestToken` parameter already exists and you specify the same secret data, the operation succeeds but does nothing. However, if the secret data is different, then the operation fails because you cannot modify an existing version; you can only create new ones.

- If you call an operation to encrypt or decrypt the `SecretString` or `SecretBinary` for a secret in the same account as the calling user and that secret doesn't specify a Amazon Web Services KMS encryption key, Secrets Manager uses the account's default Amazon Web Services managed customer master key (CMK) with the alias `aws/secretsmanager`. If this key doesn't already exist in your account then Secrets Manager creates it for you automatically. All users and roles in the same Amazon Web Services account automatically have access to use the default CMK. Note that if an Secrets Manager API call results in Amazon Web Services creating the account's Amazon Web Services-managed CMK, it can result in a one-time significant delay in returning the result.

- If the secret resides in a different Amazon Web Services account from the credentials calling an API that requires encryption or decryption of the secret value then you must create and use a custom Amazon Web Services KMS CMK because you can't access the default CMK for the account using credentials from a different Amazon Web Services account. Store the ARN of the CMK in the secret when you create the secret or when you update it by including it in the `KMSKeyId`. If you call an API that must encrypt or decrypt `SecretString` or `SecretBinary` using credentials from a different account then the Amazon Web Services KMS key policy must grant cross-account access to that other account's user or role for both the kms:GenerateDataKey and kms:Decrypt operations.

**Minimum permissions** To run this command, you must have the following permissions:

- secretsmanager:PutSecretValue

- kms:GenerateDataKey - needed only if you use a customer-managed Amazon Web Services KMS key to encrypt the secret. You do not need this permission to use the account's default Amazon Web Services managed CMK for Secrets Manager.

**Related operations** - To retrieve the encrypted value you store in the version of a secret, use GetSecretValue.

- To create a secret, use CreateSecret.

- To get the details for a secret, use DescribeSecret.

- To list the versions attached to a secret, use ListSecretVersionIds.>

  take x-amz-target
    like native-string
  take put-secret-value-request, like put-secret-value-request

  line </#X-Amz-Target=secretsmanager.PutSecretValue>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan put-secret-value-request

  loot 200
    seed json, like put-secret-value-response
    note <Success>
  loot 480
    seed json, like invalid-parameter-exception
    note <InvalidParameterException>
  loot 481
    seed json, like invalid-request-exception
    note <InvalidRequestException>
  loot 482
    seed json, like limit-exceeded-exception
    note <LimitExceededException>
  loot 483
    seed json, like encryption-failure
    note <EncryptionFailure>
  loot 484
    seed json, like resource-exists-exception
    note <ResourceExistsException>
  loot 485
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 486
    seed json, like internal-service-error
    note <InternalServiceError>