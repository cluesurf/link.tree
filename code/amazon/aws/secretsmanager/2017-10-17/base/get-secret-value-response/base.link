
load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/created-date-type
  take form created-date-type

load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/secret-arn-type
  take form secret-arn-type

load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/secret-binary-type
  take form secret-binary-type

load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/secret-name-type
  take form secret-name-type

load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/secret-string-type
  take form secret-string-type

load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/secret-version-id-type
  take form secret-version-id-type

load @termsurf/snow/amazonaws.com/secretsmanager/2017-10-17/base/secret-version-stages-type
  take form secret-version-stages-type

form get-secret-value-response, name <GetSecretValueResponse>
  take arn, name <ARN>
    like secret-arn-type
    void take
    note <The ARN of the secret.>
  take name, name <Name>
    like secret-name-type
    void take
    note <The friendly name of the secret.>
  take version-id, name <VersionId>
    like secret-version-id-type
    void take
    note <The unique identifier of this version of the secret.>
  take secret-binary, name <SecretBinary>
    like secret-binary-type
    void take
    note <The decrypted part of the protected secret information that was originally provided as binary data in the form of a byte array. The response parameter represents the binary data as a [base64-encoded](https://tools.ietf.org/html/rfc4648#section-4) string.

This parameter is not used if the secret is created by the Secrets Manager console.

If you store custom information in this field of the secret, then you must code your Lambda rotation function to parse and interpret whatever you store in the `SecretString` or `SecretBinary` fields.>
  take secret-string, name <SecretString>
    like secret-string-type
    void take
    note <The decrypted part of the protected secret information that was originally provided as a string.

If you create this secret by using the Secrets Manager console then only the `SecretString` parameter contains data. Secrets Manager stores the information as a JSON structure of key/value pairs that the Lambda rotation function knows how to parse.

If you store custom information in the secret by using the CreateSecret, UpdateSecret, or PutSecretValue API operations instead of the Secrets Manager console, or by using the **Other secret type** in the console, then you must code your Lambda rotation function to parse and interpret those values.>
  take version-stages, name <VersionStages>
    like secret-version-stages-type
    void take
    note <A list of all of the staging labels currently attached to this version of the secret.>
  take created-date, name <CreatedDate>
    like created-date-type
    void take
    note <The date and time that this version of the secret was created.>