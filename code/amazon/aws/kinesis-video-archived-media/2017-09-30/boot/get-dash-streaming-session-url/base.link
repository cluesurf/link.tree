
load @tunebond/snow/amazonaws.com/kinesis-video-archived-media/2017-09-30/base/client-limit-exceeded-exception
  take form client-limit-exceeded-exception

load @tunebond/snow/amazonaws.com/kinesis-video-archived-media/2017-09-30/base/get-dash-streaming-session-url-body
  take form get-dash-streaming-session-url-body

load @tunebond/snow/amazonaws.com/kinesis-video-archived-media/2017-09-30/base/get-dash-streaming-session-url-output
  take form get-dash-streaming-session-url-output

load @tunebond/snow/amazonaws.com/kinesis-video-archived-media/2017-09-30/base/invalid-argument-exception
  take form invalid-argument-exception

load @tunebond/snow/amazonaws.com/kinesis-video-archived-media/2017-09-30/base/invalid-codec-private-data-exception
  take form invalid-codec-private-data-exception

load @tunebond/snow/amazonaws.com/kinesis-video-archived-media/2017-09-30/base/missing-codec-private-data-exception
  take form missing-codec-private-data-exception

load @tunebond/snow/amazonaws.com/kinesis-video-archived-media/2017-09-30/base/no-data-retention-exception
  take form no-data-retention-exception

load @tunebond/snow/amazonaws.com/kinesis-video-archived-media/2017-09-30/base/not-authorized-exception
  take form not-authorized-exception

load @tunebond/snow/amazonaws.com/kinesis-video-archived-media/2017-09-30/base/resource-not-found-exception
  take form resource-not-found-exception

load @tunebond/snow/amazonaws.com/kinesis-video-archived-media/2017-09-30/base/unsupported-stream-media-type-exception
  take form unsupported-stream-media-type-exception

boot get-dash-streaming-session-url, name <GetDASHStreamingSessionURL>
  deed post
  note <Retrieves an MPEG Dynamic Adaptive Streaming over HTTP (DASH) URL for the stream. You can then open the URL in a media player to view the stream contents.

Both the `StreamName` and the `StreamARN` parameters are optional, but you must specify either the `StreamName` or the `StreamARN` when invoking this API operation.

An Amazon Kinesis video stream has the following requirements for providing data through MPEG-DASH:

- The media must contain h.264 or h.265 encoded video and, optionally, AAC or G.711 encoded audio. Specifically, the codec ID of track 1 should be `V_MPEG/ISO/AVC` (for h.264) or V_MPEGH/ISO/HEVC (for H.265). Optionally, the codec ID of track 2 should be `A_AAC` (for AAC) or A_MS/ACM (for G.711).

- Data retention must be greater than 0.

- The video track of each fragment must contain codec private data in the Advanced Video Coding (AVC) for H.264 format and HEVC for H.265 format. For more information, see [MPEG-4 specification ISO/IEC 14496-15](https://www.iso.org/standard/55980.html). For information about adapting stream data to a given format, see [NAL Adaptation Flags](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/producer-reference-nal.html).

- The audio track (if present) of each fragment must contain codec private data in the AAC format ([AAC specification ISO/IEC 13818-7](https://www.iso.org/standard/43345.html)) or the [MS Wave format](http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html).

The following procedure shows how to use MPEG-DASH with Kinesis Video Streams:

1. Get an endpoint using [GetDataEndpoint](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_GetDataEndpoint.html), specifying `GET_DASH_STREAMING_SESSION_URL` for the `APIName` parameter.

2. Retrieve the MPEG-DASH URL using `GetDASHStreamingSessionURL`. Kinesis Video Streams creates an MPEG-DASH streaming session to be used for accessing content in a stream using the MPEG-DASH protocol. `GetDASHStreamingSessionURL` returns an authenticated URL (that includes an encrypted session token) for the session's MPEG-DASH _manifest_ (the root resource needed for streaming with MPEG-DASH).

  Don't share or store this token where an unauthorized entity can access it. The token provides access to the content of the stream. Safeguard the token with the same measures that you use with your AWS credentials.

  The media that is made available through the manifest consists only of the requested stream, time range, and format. No other media data (such as frames outside the requested window or alternate bitrates) is made available.

3. Provide the URL (containing the encrypted session token) for the MPEG-DASH manifest to a media player that supports the MPEG-DASH protocol. Kinesis Video Streams makes the initialization fragment and media fragments available through the manifest URL. The initialization fragment contains the codec private data for the stream, and other data needed to set up the video or audio decoder and renderer. The media fragments contain encoded video frames or encoded audio samples.

4. The media player receives the authenticated URL and requests stream metadata and media data normally. When the media player requests data, it calls the following actions:

  - **GetDASHManifest:** Retrieves an MPEG DASH manifest, which contains the metadata for the media that you want to playback.

  - **GetMP4InitFragment:** Retrieves the MP4 initialization fragment. The media player typically loads the initialization fragment before loading any media fragments. This fragment contains the "`fytp`" and "`moov`" MP4 atoms, and the child atoms that are needed to initialize the media player decoder.

    The initialization fragment does not correspond to a fragment in a Kinesis video stream. It contains only the codec private data for the stream and respective track, which the media player needs to decode the media frames.

  - **GetMP4MediaFragment:** Retrieves MP4 media fragments. These fragments contain the "`moof`" and "`mdat`" MP4 atoms and their child atoms, containing the encoded fragment's media frames and their timestamps.

    After the first media fragment is made available in a streaming session, any fragments that don't contain the same codec private data cause an error to be returned when those different media fragments are loaded. Therefore, the codec private data should not change between fragments in a session. This also means that the session fails if the fragments in a stream change from having only video to having both audio and video.

    Data retrieved with this action is billable. See [Pricing](https://aws.amazon.com/kinesis/video-streams/pricing/) for details.

For restrictions that apply to MPEG-DASH sessions, see [Kinesis Video Streams Limits](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html).

You can monitor the amount of data that the media player consumes by monitoring the `GetMP4MediaFragment.OutgoingBytes` Amazon CloudWatch metric. For information about using CloudWatch to monitor Kinesis Video Streams, see [Monitoring Kinesis Video Streams](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitoring.html). For pricing information, see [Amazon Kinesis Video Streams Pricing](https://aws.amazon.com/kinesis/video-streams/pricing/) and [AWS Pricing](https://aws.amazon.com/pricing/). Charges for both HLS sessions and outgoing AWS data apply.

For more information about HLS, see [HTTP Live Streaming](https://developer.apple.com/streaming/) on the [Apple Developer site](https://developer.apple.com).

If an error is thrown after invoking a Kinesis Video Streams archived media API, in addition to the HTTP status code and the response body, it includes the following pieces of information:

- `x-amz-ErrorType` HTTP header - contains a more specific error type in addition to what the HTTP status code provides.

- `x-amz-RequestId` HTTP header - if you want to report an issue to AWS, the support team can better diagnose the problem if given the Request Id.

Both the HTTP status code and the ErrorType header can be utilized to make programmatic decisions about whether errors are retry-able and under what conditions, as well as provide information on what actions the client programmer might need to take in order to successfully try again.

For more information, see the **Errors** section at the bottom of this topic, as well as [Common Errors](https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html).>

  take get-dash-streaming-session-url-body, like get-dash-streaming-session-url-body

  line </getDASHStreamingSessionURL>

  seed json, loan get-dash-streaming-session-url-body

  loot 200
    seed json, like get-dash-streaming-session-url-output
    note <Success>
  loot 480
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 481
    seed json, like invalid-argument-exception
    note <InvalidArgumentException>
  loot 482
    seed json, like client-limit-exceeded-exception
    note <ClientLimitExceededException>
  loot 483
    seed json, like not-authorized-exception
    note <NotAuthorizedException>
  loot 484
    seed json, like unsupported-stream-media-type-exception
    note <UnsupportedStreamMediaTypeException>
  loot 485
    seed json, like no-data-retention-exception
    note <NoDataRetentionException>
  loot 486
    seed json, like missing-codec-private-data-exception
    note <MissingCodecPrivateDataException>
  loot 487
    seed json, like invalid-codec-private-data-exception
    note <InvalidCodecPrivateDataException>
