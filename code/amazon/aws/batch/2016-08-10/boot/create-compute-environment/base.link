
load @treesurf/snow/amazonaws.com/batch/2016-08-10/base/client-exception
  take form client-exception

load @treesurf/snow/amazonaws.com/batch/2016-08-10/base/create-compute-environment-body
  take form create-compute-environment-body

load @treesurf/snow/amazonaws.com/batch/2016-08-10/base/create-compute-environment-response
  take form create-compute-environment-response

load @treesurf/snow/amazonaws.com/batch/2016-08-10/base/server-exception
  take form server-exception

boot create-compute-environment, name <CreateComputeEnvironment>
  deed post
  note <Creates an Batch compute environment. You can create `MANAGED` or `UNMANAGED` compute environments. `MANAGED` compute environments can use Amazon EC2 or Fargate resources. `UNMANAGED` compute environments can only use EC2 resources.

In a managed compute environment, Batch manages the capacity and instance types of the compute resources within the environment. This is based on the compute resource specification that you define or the [launch template](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html) that you specify when you create the compute environment. Either, you can choose to use EC2 On-Demand Instances and EC2 Spot Instances. Or, you can use Fargate and Fargate Spot capacity in your managed compute environment. You can optionally set a maximum price so that Spot Instances only launch when the Spot Instance price is less than a specified percentage of the On-Demand price.

Multi-node parallel jobs aren't supported on Spot Instances.

In an unmanaged compute environment, you can manage your own EC2 compute resources and have a lot of flexibility with how you configure your compute resources. For example, you can use custom AMIs. However, you must verify that each of your AMIs meet the Amazon ECS container instance AMI specification. For more information, see [container instance AMIs](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container_instance_AMIs.html) in the _Amazon Elastic Container Service Developer Guide_. After you created your unmanaged compute environment, you can use the DescribeComputeEnvironments operation to find the Amazon ECS cluster that's associated with it. Then, launch your container instances into that Amazon ECS cluster. For more information, see [Launching an Amazon ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_container_instance.html) in the _Amazon Elastic Container Service Developer Guide_.

Batch doesn't upgrade the AMIs in a compute environment after the environment is created. For example, it doesn't update the AMIs when a newer version of the Amazon ECS optimized AMI is available. Therefore, you're responsible for managing the guest operating system (including its updates and security patches) and any additional application software or utilities that you install on the compute resources. To use a new AMI for your Batch jobs, complete these steps:

1. Create a new compute environment with the new AMI.

2. Add the compute environment to an existing job queue.

3. Remove the earlier compute environment from your job queue.

4. Delete the earlier compute environment.>

  take create-compute-environment-body, like create-compute-environment-body

  line </v1/createcomputeenvironment>

  seed json, loan create-compute-environment-body

  loot 200
    seed json, like create-compute-environment-response
    note <Success>
  loot 480
    seed json, like client-exception
    note <ClientException>
  loot 481
    seed json, like server-exception
    note <ServerException>