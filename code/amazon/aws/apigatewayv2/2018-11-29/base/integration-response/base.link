
load @treesurf/snow/amazonaws.com/apigatewayv2/2018-11-29/base/content-handling-strategy
  take form content-handling-strategy

load @treesurf/snow/amazonaws.com/apigatewayv2/2018-11-29/base/id
  take form id

load @treesurf/snow/amazonaws.com/apigatewayv2/2018-11-29/base/integration-parameters
  take form integration-parameters

load @treesurf/snow/amazonaws.com/apigatewayv2/2018-11-29/base/selection-expression
  take form selection-expression

load @treesurf/snow/amazonaws.com/apigatewayv2/2018-11-29/base/selection-key
  take form selection-key

load @treesurf/snow/amazonaws.com/apigatewayv2/2018-11-29/base/template-map
  take form template-map

form integration-response, name <IntegrationResponse>
  note <Represents an integration response.>
  take content-handling-strategy, name <ContentHandlingStrategy>
    like content-handling-strategy
    void take
    note <Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:

CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.

CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.

If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.>
    host xml
      host name, text <contentHandlingStrategy>
  take integration-response-id, name <IntegrationResponseId>
    like id
    void take
    note <The integration response ID.>
    host xml
      host name, text <integrationResponseId>
  take integration-response-key, name <IntegrationResponseKey>
    like selection-key
    note <The integration response key.>
    host xml
      host name, text <integrationResponseKey>
  take response-parameters, name <ResponseParameters>
    like integration-parameters
    void take
    note <A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.>
    host xml
      host name, text <responseParameters>
  take response-templates, name <ResponseTemplates>
    like template-map
    void take
    note <The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.>
    host xml
      host name, text <responseTemplates>
  take template-selection-expression, name <TemplateSelectionExpression>
    like selection-expression
    void take
    note <The template selection expressions for the integration response.>
    host xml
      host name, text <templateSelectionExpression>