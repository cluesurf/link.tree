
load @termsurf/snow/amazonaws.com/lambda/2015-03-31/base/add-permission-body
  take form add-permission-body

load @termsurf/snow/amazonaws.com/lambda/2015-03-31/base/add-permission-response
  take form add-permission-response

load @termsurf/snow/amazonaws.com/lambda/2015-03-31/base/invalid-parameter-value-exception
  take form invalid-parameter-value-exception

load @termsurf/snow/amazonaws.com/lambda/2015-03-31/base/policy-length-exceeded-exception
  take form policy-length-exceeded-exception

load @termsurf/snow/amazonaws.com/lambda/2015-03-31/base/precondition-failed-exception
  take form precondition-failed-exception

load @termsurf/snow/amazonaws.com/lambda/2015-03-31/base/resource-conflict-exception
  take form resource-conflict-exception

load @termsurf/snow/amazonaws.com/lambda/2015-03-31/base/resource-not-found-exception
  take form resource-not-found-exception

load @termsurf/snow/amazonaws.com/lambda/2015-03-31/base/service-exception
  take form service-exception

load @termsurf/snow/amazonaws.com/lambda/2015-03-31/base/too-many-requests-exception
  take form too-many-requests-exception

load @termsurf/snow/base/native-string
  take form native-string

boot add-permission, name <AddPermission>
  deed post
  note <Grants an Amazon Web Services service or another account permission to use a function. You can apply the policy at the function level, or specify a qualifier to restrict access to a single version or alias. If you use a qualifier, the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function.

To grant permission to another account, specify the account ID as the `Principal`. For Amazon Web Services services, the principal is a domain-style identifier defined by the service, like `s3.amazonaws.com` or `sns.amazonaws.com`. For Amazon Web Services services, you can also specify the ARN of the associated resource as the `SourceArn`. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function.

This action adds a statement to a resource-based permissions policy for the function. For more information about function policies, see [Lambda Function Policies](https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html).>

  take function-name
    like native-string
    note <The name of the Lambda function, version, or alias.

**Name formats** - **Function name** - `my-function` (name-only), `my-function:v1` (with alias).

- **Function ARN** - `arn:aws:lambda:us-west-2:123456789012:function:my-function`.

- **Partial ARN** - `123456789012:function:my-function`.

You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.>
  take qualifier
    like native-string
    note <Specify a version or alias to add permissions to a published version of the function.>
    void take
  take add-permission-body, like add-permission-body

  line </2015-03-31/functions/{function-name}/policy>

  find <Qualifier>, loan qualifier

  seed json, loan add-permission-body

  loot 201
    seed json, like add-permission-response
    note <Success>
  loot 480
    seed json, like service-exception
    note <ServiceException>
  loot 481
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 482
    seed json, like resource-conflict-exception
    note <ResourceConflictException>
  loot 483
    seed json, like invalid-parameter-value-exception
    note <InvalidParameterValueException>
  loot 484
    seed json, like policy-length-exceeded-exception
    note <PolicyLengthExceededException>
  loot 485
    seed json, like too-many-requests-exception
    note <TooManyRequestsException>
  loot 486
    seed json, like precondition-failed-exception
    note <PreconditionFailedException>