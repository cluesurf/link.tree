
load @wavebond/snow/amazonaws.com/lambda/2015-03-31/base/code-signing-config-not-found-exception
  take form code-signing-config-not-found-exception

load @wavebond/snow/amazonaws.com/lambda/2015-03-31/base/code-storage-exceeded-exception
  take form code-storage-exceeded-exception

load @wavebond/snow/amazonaws.com/lambda/2015-03-31/base/code-verification-failed-exception
  take form code-verification-failed-exception

load @wavebond/snow/amazonaws.com/lambda/2015-03-31/base/create-function-body
  take form create-function-body

load @wavebond/snow/amazonaws.com/lambda/2015-03-31/base/function-configuration
  take form function-configuration

load @wavebond/snow/amazonaws.com/lambda/2015-03-31/base/invalid-code-signature-exception
  take form invalid-code-signature-exception

load @wavebond/snow/amazonaws.com/lambda/2015-03-31/base/invalid-parameter-value-exception
  take form invalid-parameter-value-exception

load @wavebond/snow/amazonaws.com/lambda/2015-03-31/base/resource-conflict-exception
  take form resource-conflict-exception

load @wavebond/snow/amazonaws.com/lambda/2015-03-31/base/resource-not-found-exception
  take form resource-not-found-exception

load @wavebond/snow/amazonaws.com/lambda/2015-03-31/base/service-exception
  take form service-exception

load @wavebond/snow/amazonaws.com/lambda/2015-03-31/base/too-many-requests-exception
  take form too-many-requests-exception

boot create-function, name <CreateFunction>
  deed post
  note <Creates a Lambda function. To create a function, you need a [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html) and an [execution role](https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role). The deployment package is a .zip file archive or container image that contains your function code. The execution role grants the function permission to use Amazon Web Services services, such as Amazon CloudWatch Logs for log streaming and X-Ray for request tracing.

You set the package type to `Image` if the deployment package is a [container image](https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html). For a container image, the code property must include the URI of a container image in the Amazon ECR registry. You do not need to specify the handler and runtime properties.

You set the package type to `Zip` if the deployment package is a [.zip file archive](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html#gettingstarted-package-zip). For a .zip file archive, the code property specifies the location of the .zip file. You must also specify the handler and runtime properties.

When you create a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute or so. During this time, you can't invoke or modify the function. The `State`, `StateReason`, and `StateReasonCode` fields in the response from GetFunctionConfiguration indicate when the function is ready to invoke. For more information, see [Function States](https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html).

A function has an unpublished version, and can have published versions and aliases. The unpublished version changes when you update your function's code and configuration. A published version is a snapshot of your function code and configuration that can't be changed. An alias is a named resource that maps to a version, and can be changed to map to a different version. Use the `Publish` parameter to create version `1` of your function from its initial configuration.

The other parameters let you configure version-specific and function-level settings. You can modify version-specific settings later with UpdateFunctionConfiguration. Function-level settings apply to both the unpublished and published versions of the function, and include tags (TagResource) and per-function concurrency limits (PutFunctionConcurrency).

You can use code signing if your deployment package is a .zip file archive. To enable code signing for this function, specify the ARN of a code-signing configuration. When a user attempts to deploy a code package with UpdateFunctionCode, Lambda checks that the code package has a valid signature from a trusted publisher. The code-signing configuration includes set set of signing profiles, which define the trusted publishers for this function.

If another account or an Amazon Web Services service invokes your function, use AddPermission to grant permission by creating a resource-based IAM policy. You can grant permissions at the function level, on a version, or on an alias.

To invoke your function directly, use Invoke. To invoke your function in response to events in other Amazon Web Services services, create an event source mapping (CreateEventSourceMapping), or configure a function trigger in the other service. For more information, see [Invoking Functions](https://docs.aws.amazon.com/lambda/latest/dg/lambda-invocation.html).>

  take create-function-body, like create-function-body

  line </2015-03-31/functions>

  seed json, loan create-function-body

  loot 201
    seed json, like function-configuration
    note <Success>
  loot 480
    seed json, like service-exception
    note <ServiceException>
  loot 481
    seed json, like invalid-parameter-value-exception
    note <InvalidParameterValueException>
  loot 482
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 483
    seed json, like resource-conflict-exception
    note <ResourceConflictException>
  loot 484
    seed json, like too-many-requests-exception
    note <TooManyRequestsException>
  loot 485
    seed json, like code-storage-exceeded-exception
    note <CodeStorageExceededException>
  loot 486
    seed json, like code-verification-failed-exception
    note <CodeVerificationFailedException>
  loot 487
    seed json, like invalid-code-signature-exception
    note <InvalidCodeSignatureException>
  loot 488
    seed json, like code-signing-config-not-found-exception
    note <CodeSigningConfigNotFoundException>