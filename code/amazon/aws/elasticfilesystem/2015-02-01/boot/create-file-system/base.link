
load @treesurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/bad-request
  take form bad-request

load @treesurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/create-file-system-body
  take form create-file-system-body

load @treesurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/file-system-already-exists
  take form file-system-already-exists

load @treesurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/file-system-description
  take form file-system-description

load @treesurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/file-system-limit-exceeded
  take form file-system-limit-exceeded

load @treesurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/insufficient-throughput-capacity
  take form insufficient-throughput-capacity

load @treesurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/internal-server-error
  take form internal-server-error

load @treesurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/throughput-limit-exceeded
  take form throughput-limit-exceeded

load @treesurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/unsupported-availability-zone
  take form unsupported-availability-zone

boot create-file-system, name <CreateFileSystem>
  deed post
  note <Creates a new, empty file system. The operation requires a creation token in the request that Amazon EFS uses to ensure idempotent creation (calling the operation with same creation token has no effect). If a file system does not currently exist that is owned by the caller's Amazon Web Services account with the specified creation token, this operation does the following:

- Creates a new, empty file system. The file system will have an Amazon EFS assigned ID, and an initial lifecycle state `creating`.

- Returns with the description of the created file system.

Otherwise, this operation returns a `FileSystemAlreadyExists` error with the ID of the existing file system.

For basic use cases, you can use a randomly generated UUID for the creation token.

The idempotent operation allows you to retry a `CreateFileSystem` call without risk of creating an extra file system. This can happen when an initial call fails in a way that leaves it uncertain whether or not a file system was actually created. An example might be that a transport level timeout occurred or your connection was reset. As long as you use the same creation token, if the initial call had succeeded in creating a file system, the client can learn of its existence from the `FileSystemAlreadyExists` error.

For more information, see [Creating a file system](https://docs.aws.amazon.com/efs/latest/ug/creating-using-create-fs.html#creating-using-create-fs-part1) in the _Amazon EFS User Guide_.

The `CreateFileSystem` call returns while the file system's lifecycle state is still `creating`. You can check the file system creation status by calling the DescribeFileSystems operation, which among other things returns the file system state.

This operation accepts an optional `PerformanceMode` parameter that you choose for your file system. We recommend `generalPurpose` performance mode for most file systems. File systems using the `maxIO` performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. The performance mode can't be changed after the file system has been created. For more information, see [Amazon EFS performance modes](https://docs.aws.amazon.com/efs/latest/ug/performance.html#performancemodes.html).

You can set the throughput mode for the file system using the `ThroughputMode` parameter.

After the file system is fully created, Amazon EFS sets its lifecycle state to `available`, at which point you can create one or more mount targets for the file system in your VPC. For more information, see CreateMountTarget. You mount your Amazon EFS file system on an EC2 instances in your VPC by using the mount target. For more information, see [Amazon EFS: How it Works](https://docs.aws.amazon.com/efs/latest/ug/how-it-works.html).

This operation requires permissions for the `elasticfilesystem:CreateFileSystem` action.>

  take create-file-system-body, like create-file-system-body

  line </2015-02-01/file-systems>

  seed json, loan create-file-system-body

  loot 201
    seed json, like file-system-description
    note <Success>
  loot 480
    seed json, like bad-request
    note <BadRequest>
  loot 481
    seed json, like internal-server-error
    note <InternalServerError>
  loot 482
    seed json, like file-system-already-exists
    note <FileSystemAlreadyExists>
  loot 483
    seed json, like file-system-limit-exceeded
    note <FileSystemLimitExceeded>
  loot 484
    seed json, like insufficient-throughput-capacity
    note <InsufficientThroughputCapacity>
  loot 485
    seed json, like throughput-limit-exceeded
    note <ThroughputLimitExceeded>
  loot 486
    seed json, like unsupported-availability-zone
    note <UnsupportedAvailabilityZone>