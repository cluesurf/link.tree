
load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/availability-zones-mismatch
  take form availability-zones-mismatch

load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/bad-request
  take form bad-request

load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/create-mount-target-body
  take form create-mount-target-body

load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/file-system-not-found
  take form file-system-not-found

load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/incorrect-file-system-life-cycle-state
  take form incorrect-file-system-life-cycle-state

load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/internal-server-error
  take form internal-server-error

load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/ip-address-in-use
  take form ip-address-in-use

load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/mount-target-conflict
  take form mount-target-conflict

load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/mount-target-description
  take form mount-target-description

load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/network-interface-limit-exceeded
  take form network-interface-limit-exceeded

load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/no-free-addresses-in-subnet
  take form no-free-addresses-in-subnet

load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/security-group-limit-exceeded
  take form security-group-limit-exceeded

load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/security-group-not-found
  take form security-group-not-found

load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/subnet-not-found
  take form subnet-not-found

load @termsurf/snow/amazonaws.com/elasticfilesystem/2015-02-01/base/unsupported-availability-zone
  take form unsupported-availability-zone

boot create-mount-target, name <CreateMountTarget>
  deed post
  note <Creates a mount target for a file system. You can then mount the file system on EC2 instances by using the mount target.

You can create one mount target in each Availability Zone in your VPC. All EC2 instances in a VPC within a given Availability Zone share a single mount target for a given file system. If you have multiple subnets in an Availability Zone, you create a mount target in one of the subnets. EC2 instances do not need to be in the same subnet as the mount target in order to access their file system.

You can create only one mount target for an EFS file system using One Zone storage classes. You must create that mount target in the same Availability Zone in which the file system is located. Use the `AvailabilityZoneName` and `AvailabiltyZoneId` properties in the DescribeFileSystems response object to get this information. Use the `subnetId` associated with the file system's Availability Zone when creating the mount target.

For more information, see [Amazon EFS: How it Works](https://docs.aws.amazon.com/efs/latest/ug/how-it-works.html).

To create a mount target for a file system, the file system's lifecycle state must be `available`. For more information, see DescribeFileSystems.

In the request, provide the following:

- The file system ID for which you are creating the mount target.

- A subnet ID, which determines the following:

  - The VPC in which Amazon EFS creates the mount target

  - The Availability Zone in which Amazon EFS creates the mount target

  - The IP address range from which Amazon EFS selects the IP address of the mount target (if you don't specify an IP address in the request)

After creating the mount target, Amazon EFS returns a response that includes, a `MountTargetId` and an `IpAddress`. You use this IP address when mounting the file system in an EC2 instance. You can also use the mount target's DNS name when mounting the file system. The EC2 instance on which you mount the file system by using the mount target can resolve the mount target's DNS name to its IP address. For more information, see [How it Works: Implementation Overview](https://docs.aws.amazon.com/efs/latest/ug/how-it-works.html#how-it-works-implementation).

Note that you can create mount targets for a file system in only one VPC, and there can be only one mount target per Availability Zone. That is, if the file system already has one or more mount targets created for it, the subnet specified in the request to add another mount target must meet the following requirements:

- Must belong to the same VPC as the subnets of the existing mount targets

- Must not be in the same Availability Zone as any of the subnets of the existing mount targets

If the request satisfies the requirements, Amazon EFS does the following:

- Creates a new mount target in the specified subnet.

- Also creates a new network interface in the subnet as follows:

  - If the request provides an `IpAddress`, Amazon EFS assigns that IP address to the network interface. Otherwise, Amazon EFS assigns a free address in the subnet (in the same way that the Amazon EC2 `CreateNetworkInterface` call does when a request does not specify a primary private IP address).

  - If the request provides `SecurityGroups`, this network interface is associated with those security groups. Otherwise, it belongs to the default security group for the subnet's VPC.

  - Assigns the description `Mount target _fsmt-id_ for file system _fs-id_` where `_fsmt-id_` is the mount target ID, and `_fs-id_` is the `FileSystemId`.

  - Sets the `requesterManaged` property of the network interface to `true`, and the `requesterId` value to `EFS`.

  Each Amazon EFS mount target has one corresponding requester-managed EC2 network interface. After the network interface is created, Amazon EFS sets the `NetworkInterfaceId` field in the mount target's description to the network interface ID, and the `IpAddress` field to its address. If network interface creation fails, the entire `CreateMountTarget` operation fails.

The `CreateMountTarget` call returns only after creating the network interface, but while the mount target state is still `creating`, you can check the mount target creation status by calling the DescribeMountTargets operation, which among other things returns the mount target state.

We recommend that you create a mount target in each of the Availability Zones. There are cost considerations for using a file system in an Availability Zone through a mount target created in another Availability Zone. For more information, see [Amazon EFS](http://aws.amazon.com/efs/). In addition, by always using a mount target local to the instance's Availability Zone, you eliminate a partial failure scenario. If the Availability Zone in which your mount target is created goes down, then you can't access your file system through that mount target.

This operation requires permissions for the following action on the file system:

- `elasticfilesystem:CreateMountTarget`

This operation also requires permissions for the following Amazon EC2 actions:

- `ec2:DescribeSubnets`

- `ec2:DescribeNetworkInterfaces`

- `ec2:CreateNetworkInterface`>

  take create-mount-target-body, like create-mount-target-body

  line </2015-02-01/mount-targets>

  seed json, loan create-mount-target-body

  loot 200
    seed json, like mount-target-description
    note <Success>
  loot 480
    seed json, like bad-request
    note <BadRequest>
  loot 481
    seed json, like internal-server-error
    note <InternalServerError>
  loot 482
    seed json, like file-system-not-found
    note <FileSystemNotFound>
  loot 483
    seed json, like incorrect-file-system-life-cycle-state
    note <IncorrectFileSystemLifeCycleState>
  loot 484
    seed json, like mount-target-conflict
    note <MountTargetConflict>
  loot 485
    seed json, like subnet-not-found
    note <SubnetNotFound>
  loot 486
    seed json, like no-free-addresses-in-subnet
    note <NoFreeAddressesInSubnet>
  loot 487
    seed json, like ip-address-in-use
    note <IpAddressInUse>
  loot 488
    seed json, like network-interface-limit-exceeded
    note <NetworkInterfaceLimitExceeded>
  loot 489
    seed json, like security-group-limit-exceeded
    note <SecurityGroupLimitExceeded>
  loot 490
    seed json, like security-group-not-found
    note <SecurityGroupNotFound>
  loot 491
    seed json, like unsupported-availability-zone
    note <UnsupportedAvailabilityZone>
  loot 492
    seed json, like availability-zones-mismatch
    note <AvailabilityZonesMismatch>