
load @termsurf/snow/amazonaws.com/redshift-data/2019-12-20/base/list-statements-limit
  take form list-statements-limit

load @termsurf/snow/amazonaws.com/redshift-data/2019-12-20/base/statement-name-string
  take form statement-name-string

load @termsurf/snow/amazonaws.com/redshift-data/2019-12-20/base/status-string
  take form status-string

load @termsurf/snow/base/boolean
  take form boolean

load @termsurf/snow/base/string
  take form string

form list-statements-request, name <ListStatementsRequest>
  take max-results, name <MaxResults>
    like list-statements-limit
    void take
    note <The maximum number of SQL statements to return in the response. If more SQL statements exist than fit in one response, then `NextToken` is returned to page through the results.>
  take next-token, name <NextToken>
    like string
    void take
    note <A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request.>
  take role-level, name <RoleLevel>
    like boolean
    void take
    note <A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned. If false, only statements run by the caller's IAM role in the current IAM session are returned. The default is true.>
  take statement-name, name <StatementName>
    like statement-name-string
    void take
    note <The name of the SQL statement specified as input to `BatchExecuteStatement` or `ExecuteStatement` to identify the query. You can list multiple statements by providing a prefix that matches the beginning of the statement name. For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of `myStatement`. Data API does a case-sensitive match of SQL statement names to the prefix value you provide.>
  take status, name <Status>
    like status-string
    void take
    note <The status of the SQL statement to list. Status values are defined as follows:

- ABORTED - The query run was stopped by the user.

- ALL - A status value that includes all query statuses. This value can be used to filter results.

- FAILED - The query run failed.

- FINISHED - The query has finished running.

- PICKED - The query has been chosen to be run.

- STARTED - The query run has started.

- SUBMITTED - The query was submitted, but not yet processed.>