
load @tunebond/snow/amazonaws.com/greengrassv2/2020-11-30/base/lambda-environment-variables
  take form lambda-environment-variables

load @tunebond/snow/amazonaws.com/greengrassv2/2020-11-30/base/lambda-event-source-list
  take form lambda-event-source-list

load @tunebond/snow/amazonaws.com/greengrassv2/2020-11-30/base/lambda-exec-args-list
  take form lambda-exec-args-list

load @tunebond/snow/amazonaws.com/greengrassv2/2020-11-30/base/lambda-input-payload-encoding-type
  take form lambda-input-payload-encoding-type

load @tunebond/snow/amazonaws.com/greengrassv2/2020-11-30/base/lambda-linux-process-params
  take form lambda-linux-process-params

load @tunebond/snow/amazonaws.com/greengrassv2/2020-11-30/base/optional-boolean
  take form optional-boolean

load @tunebond/snow/amazonaws.com/greengrassv2/2020-11-30/base/optional-integer
  take form optional-integer

form lambda-execution-parameters, name <LambdaExecutionParameters>
  note <Contains parameters for a Lambda function that runs on IoT Greengrass.>
  take event-sources, name <eventSources>
    like lambda-event-source-list
    void take
    note <The list of event sources to which to subscribe to receive work messages. The Lambda function runs when it receives a message from an event source. You can subscribe this function to local publish/subscribe messages and Amazon Web Services IoT Core MQTT messages.>
  take max-queue-size, name <maxQueueSize>
    like optional-integer
    void take
    note <The maximum size of the message queue for the Lambda function component. The IoT Greengrass core stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to consume each message.>
  take max-instances-count, name <maxInstancesCount>
    like optional-integer
    void take
    note <The maximum number of instances that a non-pinned Lambda function can run at the same time.>
  take max-idle-time-in-seconds, name <maxIdleTimeInSeconds>
    like optional-integer
    void take
    note <The maximum amount of time in seconds that a non-pinned Lambda function can idle before the IoT Greengrass Core software stops its process.>
  take timeout-in-seconds, name <timeoutInSeconds>
    like optional-integer
    void take
    note <The maximum amount of time in seconds that the Lambda function can process a work item.>
  take status-timeout-in-seconds, name <statusTimeoutInSeconds>
    like optional-integer
    void take
    note <The interval in seconds at which a pinned (also known as long-lived) Lambda function component sends status updates to the Lambda manager component.>
  take pinned, name <pinned>
    like optional-boolean
    void take
    note <Whether or not the Lambda function is pinned, or long-lived.

- A pinned Lambda function starts when IoT Greengrass starts and keeps running in its own container.

- A non-pinned Lambda function starts only when it receives a work item and exists after it idles for `maxIdleTimeInSeconds`. If the function has multiple work items, the IoT Greengrass Core software creates multiple instances of the function.

Default: `true`>
  take input-payload-encoding-type, name <inputPayloadEncodingType>
    like lambda-input-payload-encoding-type
    void take
    note <The encoding type that the Lambda function supports.

Default: `json`>
  take exec-args, name <execArgs>
    like lambda-exec-args-list
    void take
    note <The list of arguments to pass to the Lambda function when it runs.>
  take environment-variables, name <environmentVariables>
    like lambda-environment-variables
    void take
    note <The map of environment variables that are available to the Lambda function when it runs.>
  take linux-process-params, name <linuxProcessParams>
    like lambda-linux-process-params
    void take
    note <The parameters for the Linux process that contains the Lambda function.>