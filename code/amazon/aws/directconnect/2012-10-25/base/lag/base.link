
load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/aws-device
  take form aws-device

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/aws-device-v2
  take form aws-device-v2

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/aws-logical-device-id
  take form aws-logical-device-id

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/bandwidth
  take form bandwidth

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/boolean-flag
  take form boolean-flag

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/connection-list
  take form connection-list

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/count
  take form count

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/encryption-mode
  take form encryption-mode

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/has-logical-redundancy
  take form has-logical-redundancy

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/jumbo-frame-capable
  take form jumbo-frame-capable

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/lag-id
  take form lag-id

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/lag-name
  take form lag-name

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/lag-state
  take form lag-state

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/location-code
  take form location-code

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/mac-sec-capable
  take form mac-sec-capable

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/mac-sec-key-list
  take form mac-sec-key-list

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/owner-account
  take form owner-account

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/provider-name
  take form provider-name

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/region
  take form region

load @tunebond/snow/amazonaws.com/directconnect/2012-10-25/base/tag-list
  take form tag-list

form lag, name <Lag>
  note <Information about a link aggregation group (LAG).>
  take connections-bandwidth, name <connectionsBandwidth>
    like bandwidth
    void take
    note <The individual bandwidth of the physical connections bundled by the LAG. The possible values are 1Gbps and 10Gbps.>
  take number-of-connections, name <numberOfConnections>
    like count
    void take
    note <The number of physical dedicated connections bundled by the LAG, up to a maximum of 10.>
  take lag-id, name <lagId>
    like lag-id
    void take
    note <The ID of the LAG.>
  take owner-account, name <ownerAccount>
    like owner-account
    void take
    note <The ID of the account that owns the LAG.>
  take lag-name, name <lagName>
    like lag-name
    void take
    note <The name of the LAG.>
  take lag-state, name <lagState>
    like lag-state
    void take
    note <The state of the LAG. The following are the possible values:

- `requested`: The initial state of a LAG. The LAG stays in the requested state until the Letter of Authorization (LOA) is available.

- `pending`: The LAG has been approved and is being initialized.

- `available`: The network link is established and the LAG is ready for use.

- `down`: The network link is down.

- `deleting`: The LAG is being deleted.

- `deleted`: The LAG is deleted.

- `unknown`: The state of the LAG is not available.>
  take location, name <location>
    like location-code
    void take
    note <The location of the LAG.>
  take region, name <region>
    like region
    void take
    note <The Region where the connection is located.>
  take minimum-links, name <minimumLinks>
    like count
    void take
    note <The minimum number of physical dedicated connections that must be operational for the LAG itself to be operational.>
  take aws-device, name <awsDevice>
    like aws-device
    void take
    note <The Direct Connect endpoint that hosts the LAG.>
  take aws-device-v2, name <awsDeviceV2>
    like aws-device-v2
    void take
    note <The Direct Connect endpoint that hosts the LAG.>
  take aws-logical-device-id, name <awsLogicalDeviceId>
    like aws-logical-device-id
    void take
    note <The Direct Connect endpoint that terminates the logical connection. This device might be different than the device that terminates the physical connection.>
  take connections, name <connections>
    like connection-list
    void take
    note <The connections bundled by the LAG.>
  take allows-hosted-connections, name <allowsHostedConnections>
    like boolean-flag
    void take
    note <Indicates whether the LAG can host other connections.>
  take jumbo-frame-capable, name <jumboFrameCapable>
    like jumbo-frame-capable
    void take
    note <Indicates whether jumbo frames (9001 MTU) are supported.>
  take has-logical-redundancy, name <hasLogicalRedundancy>
    like has-logical-redundancy
    void take
    note <Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).>
  take tags, name <tags>
    like tag-list
    void take
    note <The tags associated with the LAG.>
  take provider-name, name <providerName>
    like provider-name
    void take
    note <The name of the service provider associated with the LAG.>
  take mac-sec-capable, name <macSecCapable>
    like mac-sec-capable
    void take
    note <Indicates whether the LAG supports MAC Security (MACsec).>
  take encryption-mode, name <encryptionMode>
    like encryption-mode
    void take
    note <The LAG MAC Security (MACsec) encryption mode.

The valid values are `no_encrypt`, `should_encrypt`, and `must_encrypt`.>
  take mac-sec-keys, name <macSecKeys>
    like mac-sec-key-list
    void take
    note <The MAC Security (MACsec) security keys associated with the LAG.>