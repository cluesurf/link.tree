
load @textsurf/snow/amazonaws.com/iotsitewise/2019-12-02/base/get-interpolated-asset-property-values-response
  take form get-interpolated-asset-property-values-response

load @textsurf/snow/amazonaws.com/iotsitewise/2019-12-02/base/internal-failure-exception
  take form internal-failure-exception

load @textsurf/snow/amazonaws.com/iotsitewise/2019-12-02/base/invalid-request-exception
  take form invalid-request-exception

load @textsurf/snow/amazonaws.com/iotsitewise/2019-12-02/base/resource-not-found-exception
  take form resource-not-found-exception

load @textsurf/snow/amazonaws.com/iotsitewise/2019-12-02/base/service-unavailable-exception
  take form service-unavailable-exception

load @textsurf/snow/amazonaws.com/iotsitewise/2019-12-02/base/throttling-exception
  take form throttling-exception

load @textsurf/snow/base/native-integer
  take form native-integer

load @textsurf/snow/base/native-string
  take form native-string

boot get-interpolated-asset-property-values, name <GetInterpolatedAssetPropertyValues>
  deed get
  note <Get interpolated values for an asset property for a specified time interval, during a period of time. If your time series is missing data points during the specified time interval, you can use interpolation to estimate the missing data.

For example, you can use this operation to return the interpolated temperature values for a wind turbine every 24 hours over a duration of 7 days.

To identify an asset property, you must specify one of the following:

- The `assetId` and `propertyId` of an asset property.

- A `propertyAlias`, which is a data stream alias (for example, `/company/windfarm/3/turbine/7/temperature`). To define an asset property's alias, see [UpdateAssetProperty](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html).>

  take asset-id
    like native-string
    note <The ID of the asset.>
    void take
  take property-id
    like native-string
    note <The ID of the asset property.>
    void take
  take property-alias
    like native-string
    note <The alias that identifies the property, such as an OPC-UA server data stream path (for example, `/company/windfarm/3/turbine/7/temperature`). For more information, see [Mapping industrial data streams to asset properties](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html) in the _IoT SiteWise User Guide_.>
    void take
  take start-time-in-seconds
    like native-integer
    note <The exclusive start of the range from which to interpolate data, expressed in seconds in Unix epoch time.>
  take start-time-offset-in-nanos
    like native-integer
    note <The nanosecond offset converted from `startTimeInSeconds`.>
    void take
  take end-time-in-seconds
    like native-integer
    note <The inclusive end of the range from which to interpolate data, expressed in seconds in Unix epoch time.>
  take end-time-offset-in-nanos
    like native-integer
    note <The nanosecond offset converted from `endTimeInSeconds`.>
    void take
  take quality
    like native-string
    note <The quality of the asset property value. You can use this parameter as a filter to choose only the asset property values that have a specific quality.>
  take interval-in-seconds
    like native-integer
    note <The time interval in seconds over which to interpolate data. Each interval starts when the previous one ends.>
  take next-token
    like native-string
    note <The token to be used for the next set of paginated results.>
    void take
  take max-results
    like native-integer
    note <The maximum number of results to return for each paginated request. If not specified, the default value is 10.>
    void take
  take type
    like native-string
    note <The interpolation type.

Valid values: `LINEAR_INTERPOLATION | LOCF_INTERPOLATION`

- `LINEAR_INTERPOLATION` - Estimates missing data using [linear interpolation](https://en.wikipedia.org/wiki/Linear_interpolation).

  For example, you can use this operation to return the interpolated temperature values for a wind turbine every 24 hours over a duration of 7 days. If the interpolation starts on July 1, 2021, at 9 AM, IoT SiteWise returns the first interpolated value on July 2, 2021, at 9 AM, the second interpolated value on July 3, 2021, at 9 AM, and so on.

- `LOCF_INTERPOLATION` - Estimates missing data using last observation carried forward interpolation

  If no data point is found for an interval, IoT SiteWise returns the last observed data point for the previous interval and carries forward this interpolated value until a new data point is found.

  For example, you can get the state of an on-off valve every 24 hours over a duration of 7 days. If the interpolation starts on July 1, 2021, at 9 AM, IoT SiteWise returns the last observed data point between July 1, 2021, at 9 AM and July 2, 2021, at 9 AM as the first interpolated value. If no data point is found after 9 AM on July 2, 2021, IoT SiteWise uses the same interpolated value for the rest of the days.>
  take interval-window-in-seconds
    like native-integer
    note <The query interval for the window in seconds. IoT SiteWise computes each interpolated value by using data points from the timestamp of each interval minus the window to the timestamp of each interval plus the window. If not specified, the window is between the start time minus the interval and the end time plus the interval.

- If you specify a value for the `intervalWindowInSeconds` parameter, the `type` parameter must be `LINEAR_INTERPOLATION`.

- If no data point is found during the specified query window, IoT SiteWise won't return an interpolated value for the interval. This indicates that there's a gap in the ingested data points.

For example, you can get the interpolated temperature values for a wind turbine every 24 hours over a duration of 7 days. If the interpolation starts on July 1, 2021, at 9 AM with a window of 2 hours, IoT SiteWise uses the data points from 7 AM (9 AM - 2 hours) to 11 AM (9 AM + 2 hours) on July 2, 2021 to compute the first interpolated value, uses the data points from 7 AM (9 AM - 2 hours) to 11 AM (9 AM + 2 hours) on July 3, 2021 to compute the second interpolated value, and so on.>
    void take

  line </properties/interpolated#startTimeInSeconds&endTimeInSeconds&quality&intervalInSeconds&type>

  find <assetId>, loan asset-id
  find <propertyId>, loan property-id
  find <propertyAlias>, loan property-alias
  find <startTimeInSeconds>, loan start-time-in-seconds
  find <startTimeOffsetInNanos>, loan start-time-offset-in-nanos
  find <endTimeInSeconds>, loan end-time-in-seconds
  find <endTimeOffsetInNanos>, loan end-time-offset-in-nanos
  find <quality>, loan quality
  find <intervalInSeconds>, loan interval-in-seconds
  find <nextToken>, loan next-token
  find <maxResults>, loan max-results
  find <type>, loan type
  find <intervalWindowInSeconds>, loan interval-window-in-seconds

  loot 200
    seed json, like get-interpolated-asset-property-values-response
    note <Success>
  loot 480
    seed json, like invalid-request-exception
    note <InvalidRequestException>
  loot 481
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 482
    seed json, like internal-failure-exception
    note <InternalFailureException>
  loot 483
    seed json, like throttling-exception
    note <ThrottlingException>
  loot 484
    seed json, like service-unavailable-exception
    note <ServiceUnavailableException>