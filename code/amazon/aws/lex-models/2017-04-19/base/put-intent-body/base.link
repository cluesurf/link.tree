
load @textsurf/snow/amazonaws.com/lex-models/2017-04-19/base/code-hook
  take form code-hook

load @textsurf/snow/amazonaws.com/lex-models/2017-04-19/base/fulfillment-activity-type
  take form fulfillment-activity-type

load @textsurf/snow/amazonaws.com/lex-models/2017-04-19/base/kendra-index-arn
  take form kendra-index-arn

load @textsurf/snow/amazonaws.com/lex-models/2017-04-19/base/lambda-arn
  take form lambda-arn

load @textsurf/snow/amazonaws.com/lex-models/2017-04-19/base/message-list
  take form message-list

load @textsurf/snow/amazonaws.com/lex-models/2017-04-19/base/message-version
  take form message-version

load @textsurf/snow/amazonaws.com/lex-models/2017-04-19/base/prompt
  take form prompt

load @textsurf/snow/amazonaws.com/lex-models/2017-04-19/base/prompt-max-attempts
  take form prompt-max-attempts

load @textsurf/snow/amazonaws.com/lex-models/2017-04-19/base/query-filter-string
  take form query-filter-string

load @textsurf/snow/amazonaws.com/lex-models/2017-04-19/base/response-card
  take form response-card

load @textsurf/snow/amazonaws.com/lex-models/2017-04-19/base/role-arn
  take form role-arn

load @textsurf/snow/amazonaws.com/lex-models/2017-04-19/base/statement
  take form statement

form put-intent-body
  take description, name <description>
    void take
  take slots, name <slots>
    void take
  take sample-utterances, name <sampleUtterances>
    void take
  take confirmation-prompt, name <confirmationPrompt>
    like form
      take messages, name <messages>
        like message-list
        void take
        note <An array of objects, each of which provides a message string and its type. You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).>
      take max-attempts, name <maxAttempts>
        like prompt-max-attempts
        void take
        note <The number of times to prompt the user for information.>
      take response-card, name <responseCard>
        like response-card
        void take
        note <A response card. Amazon Lex uses this prompt at runtime, in the `PostText` API response. It substitutes session attributes and slot values for placeholders in the response card. For more information, see ex-resp-card.>
    void take
  take rejection-statement, name <rejectionStatement>
    like form
      take messages, name <messages>
        like message-list
        void take
        note <A collection of message objects.>
      take response-card, name <responseCard>
        like response-card
        void take
        note <At runtime, if the client is using the [PostText](http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html) API, Amazon Lex includes the response card in the response. It substitutes all of the session attributes and slot values for placeholders in the response card.>
    void take
  take follow-up-prompt, name <followUpPrompt>
    like form
      take prompt, name <prompt>
        like prompt
        void take
        note <Prompts for information from the user.>
      take rejection-statement, name <rejectionStatement>
        like statement
        void take
        note <If the user answers "no" to the question defined in the `prompt` field, Amazon Lex responds with this statement to acknowledge that the intent was canceled.>
    void take
  take conclusion-statement, name <conclusionStatement>
    like form
      take messages, name <messages>
        like message-list
        void take
        note <A collection of message objects.>
      take response-card, name <responseCard>
        like response-card
        void take
        note <At runtime, if the client is using the [PostText](http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html) API, Amazon Lex includes the response card in the response. It substitutes all of the session attributes and slot values for placeholders in the response card.>
    void take
  take dialog-code-hook, name <dialogCodeHook>
    like form
      take uri, name <uri>
        like lambda-arn
        void take
        note <The Amazon Resource Name (ARN) of the Lambda function.>
      take message-version, name <messageVersion>
        like message-version
        void take
        note <The version of the request-response that you want Amazon Lex to use to invoke your Lambda function. For more information, see using-lambda.>
    void take
  take fulfillment-activity, name <fulfillmentActivity>
    like form
      take type, name <type>
        like fulfillment-activity-type
        void take
        note <How the intent should be fulfilled, either by running a Lambda function or by returning the slot data to the client application.>
      take code-hook, name <codeHook>
        like code-hook
        void take
        note <A description of the Lambda function that is run to fulfill the intent.>
    void take
  take parent-intent-signature, name <parentIntentSignature>
    void take
  take checksum, name <checksum>
    void take
  take create-version, name <createVersion>
    void take
  take kendra-configuration, name <kendraConfiguration>
    like form
      take kendra-index, name <kendraIndex>
        like kendra-index-arn
        void take
        note <The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot. If the Amazon Kendra index does not exist, you get an exception when you call the `PutIntent` operation.>
      take query-filter-string, name <queryFilterString>
        like query-filter-string
        void take
        note <A query filter that Amazon Lex sends to Amazon Kendra to filter the response from the query. The filter is in the format defined by Amazon Kendra. For more information, see [Filtering queries](http://docs.aws.amazon.com/kendra/latest/dg/filtering.html).

You can override this filter string with a new filter string at runtime.>
      take role, name <role>
        like role-arn
        void take
        note <The Amazon Resource Name (ARN) of an IAM role that has permission to search the Amazon Kendra index. The role must be in the same account and Region as the Amazon Lex bot. If the role does not exist, you get an exception when you call the `PutIntent` operation.>
    void take
  take input-contexts, name <inputContexts>
    void take
  take output-contexts, name <outputContexts>
    void take