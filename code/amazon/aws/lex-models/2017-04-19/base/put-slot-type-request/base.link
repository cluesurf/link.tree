
load @wavebond/snow/amazonaws.com/lex-models/2017-04-19/base/custom-or-builtin-slot-type-name
  take form custom-or-builtin-slot-type-name

load @wavebond/snow/amazonaws.com/lex-models/2017-04-19/base/description
  take form description

load @wavebond/snow/amazonaws.com/lex-models/2017-04-19/base/enumeration-values
  take form enumeration-values

load @wavebond/snow/amazonaws.com/lex-models/2017-04-19/base/slot-type-configurations
  take form slot-type-configurations

load @wavebond/snow/amazonaws.com/lex-models/2017-04-19/base/slot-value-selection-strategy
  take form slot-value-selection-strategy

load @wavebond/snow/base/boolean
  take form boolean

load @wavebond/snow/base/string
  take form string

form put-slot-type-request, name <PutSlotTypeRequest>
  take description, name <description>
    like description
    void take
    note <A description of the slot type.>
  take enumeration-values, name <enumerationValues>
    like enumeration-values
    void take
    note <A list of `EnumerationValue` objects that defines the values that the slot type can take. Each value can have a list of `synonyms`, which are additional values that help train the machine learning model about the values that it resolves for a slot.

A regular expression slot type doesn't require enumeration values. All other slot types require a list of enumeration values.

When Amazon Lex resolves a slot value, it generates a resolution list that contains up to five possible values for the slot. If you are using a Lambda function, this resolution list is passed to the function. If you are not using a Lambda function you can choose to return the value that the user entered or the first value in the resolution list as the slot value. The `valueSelectionStrategy` field indicates the option to use.>
  take checksum, name <checksum>
    like string
    void take
    note <Identifies a specific revision of the `$LATEST` version.

When you create a new slot type, leave the `checksum` field blank. If you specify a checksum you get a `BadRequestException` exception.

When you want to update a slot type, set the `checksum` field to the checksum of the most recent revision of the `$LATEST` version. If you don't specify the `checksum` field, or if the checksum does not match the `$LATEST` version, you get a `PreconditionFailedException` exception.>
  take value-selection-strategy, name <valueSelectionStrategy>
    like slot-value-selection-strategy
    void take
    note <Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:

- `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value.

- `TOP_RESOLUTION` - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.

If you don't specify the `valueSelectionStrategy`, the default is `ORIGINAL_VALUE`.>
  take create-version, name <createVersion>
    like boolean
    void take
    note <When set to `true` a new numbered version of the slot type is created. This is the same as calling the `CreateSlotTypeVersion` operation. If you do not specify `createVersion`, the default is `false`.>
  take parent-slot-type-signature, name <parentSlotTypeSignature>
    like custom-or-builtin-slot-type-name
    void take
    note <The built-in slot type used as the parent of the slot type. When you define a parent slot type, the new slot type has all of the same configuration as the parent.

Only `AMAZON.AlphaNumeric` is supported.>
  take slot-type-configurations, name <slotTypeConfigurations>
    like slot-type-configurations
    void take
    note <Configuration information that extends the parent built-in slot type. The configuration is added to the settings for the parent slot type.>