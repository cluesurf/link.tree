
load @treesurf/snow/amazonaws.com/lex-models/2017-04-19/base/builtin-intent-signature
  take form builtin-intent-signature

load @treesurf/snow/amazonaws.com/lex-models/2017-04-19/base/code-hook
  take form code-hook

load @treesurf/snow/amazonaws.com/lex-models/2017-04-19/base/description
  take form description

load @treesurf/snow/amazonaws.com/lex-models/2017-04-19/base/follow-up-prompt
  take form follow-up-prompt

load @treesurf/snow/amazonaws.com/lex-models/2017-04-19/base/fulfillment-activity
  take form fulfillment-activity

load @treesurf/snow/amazonaws.com/lex-models/2017-04-19/base/input-context-list
  take form input-context-list

load @treesurf/snow/amazonaws.com/lex-models/2017-04-19/base/intent-utterance-list
  take form intent-utterance-list

load @treesurf/snow/amazonaws.com/lex-models/2017-04-19/base/kendra-configuration
  take form kendra-configuration

load @treesurf/snow/amazonaws.com/lex-models/2017-04-19/base/output-context-list
  take form output-context-list

load @treesurf/snow/amazonaws.com/lex-models/2017-04-19/base/prompt
  take form prompt

load @treesurf/snow/amazonaws.com/lex-models/2017-04-19/base/slot-list
  take form slot-list

load @treesurf/snow/amazonaws.com/lex-models/2017-04-19/base/statement
  take form statement

load @treesurf/snow/base/boolean
  take form boolean

load @treesurf/snow/base/string
  take form string

form put-intent-request, name <PutIntentRequest>
  take description, name <description>
    like description
    void take
    note <A description of the intent.>
  take slots, name <slots>
    like slot-list
    void take
    note <An array of intent slots. At runtime, Amazon Lex elicits required slot values from the user using prompts defined in the slots. For more information, see how-it-works.>
  take sample-utterances, name <sampleUtterances>
    like intent-utterance-list
    void take
    note <An array of utterances (strings) that a user might say to signal the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas".

In each utterance, a slot name is enclosed in curly braces.>
  take confirmation-prompt, name <confirmationPrompt>
    like prompt
    void take
    note <Prompts the user to confirm the intent. This question should have a yes or no answer.

Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the `OrderPizza` intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information.

You you must provide both the `rejectionStatement` and the `confirmationPrompt`, or neither.>
  take rejection-statement, name <rejectionStatement>
    like statement
    void take
    note <When the user answers "no" to the question defined in `confirmationPrompt`, Amazon Lex responds with this statement to acknowledge that the intent was canceled.

You must provide both the `rejectionStatement` and the `confirmationPrompt`, or neither.>
  take follow-up-prompt, name <followUpPrompt>
    like follow-up-prompt
    void take
    note <Amazon Lex uses this prompt to solicit additional activity after fulfilling an intent. For example, after the `OrderPizza` intent is fulfilled, you might prompt the user to order a drink.

The action that Amazon Lex takes depends on the user's response, as follows:

- If the user says "Yes" it responds with the clarification prompt that is configured for the bot.

- if the user says "Yes" and continues with an utterance that triggers an intent it starts a conversation for the intent.

- If the user says "No" it responds with the rejection statement configured for the the follow-up prompt.

- If it doesn't recognize the utterance it repeats the follow-up prompt again.

The `followUpPrompt` field and the `conclusionStatement` field are mutually exclusive. You can specify only one.>
  take conclusion-statement, name <conclusionStatement>
    like statement
    void take
    note <The statement that you want Amazon Lex to convey to the user after the intent is successfully fulfilled by the Lambda function.

This element is relevant only if you provide a Lambda function in the `fulfillmentActivity`. If you return the intent to the client application, you can't specify this element.

The `followUpPrompt` and `conclusionStatement` are mutually exclusive. You can specify only one.>
  take dialog-code-hook, name <dialogCodeHook>
    like code-hook
    void take
    note <Specifies a Lambda function to invoke for each user input. You can invoke this Lambda function to personalize user interaction.

For example, suppose your bot determines that the user is John. Your Lambda function might retrieve John's information from a backend database and prepopulate some of the values. For example, if you find that John is gluten intolerant, you might set the corresponding intent slot, `GlutenIntolerant`, to true. You might find John's phone number and set the corresponding session attribute.>
  take fulfillment-activity, name <fulfillmentActivity>
    like fulfillment-activity
    void take
    note <Required. Describes how the intent is fulfilled. For example, after a user provides all of the information for a pizza order, `fulfillmentActivity` defines how the bot places an order with a local pizza store.

You might configure Amazon Lex to return all of the intent information to the client application, or direct it to invoke a Lambda function that can process the intent (for example, place an order with a pizzeria).>
  take parent-intent-signature, name <parentIntentSignature>
    like builtin-intent-signature
    void take
    note <A unique identifier for the built-in intent to base this intent on. To find the signature for an intent, see [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents) in the _Alexa Skills Kit_.>
  take checksum, name <checksum>
    like string
    void take
    note <Identifies a specific revision of the `$LATEST` version.

When you create a new intent, leave the `checksum` field blank. If you specify a checksum you get a `BadRequestException` exception.

When you want to update a intent, set the `checksum` field to the checksum of the most recent revision of the `$LATEST` version. If you don't specify the `checksum` field, or if the checksum does not match the `$LATEST` version, you get a `PreconditionFailedException` exception.>
  take create-version, name <createVersion>
    like boolean
    void take
    note <When set to `true` a new numbered version of the intent is created. This is the same as calling the `CreateIntentVersion` operation. If you do not specify `createVersion`, the default is `false`.>
  take kendra-configuration, name <kendraConfiguration>
    like kendra-configuration
    void take
    note <Configuration information required to use the `AMAZON.KendraSearchIntent` intent to connect to an Amazon Kendra index. For more information, see [AMAZON.KendraSearchIntent](http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html).>
  take input-contexts, name <inputContexts>
    like input-context-list
    void take
    note <An array of `InputContext` objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.>
  take output-contexts, name <outputContexts>
    like output-context-list
    void take
    note <An array of `OutputContext` objects that lists the contexts that the intent activates when the intent is fulfilled.>