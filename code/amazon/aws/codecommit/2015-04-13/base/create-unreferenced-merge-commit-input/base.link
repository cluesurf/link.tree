
load @textsurf/snow/amazonaws.com/codecommit/2015-04-13/base/commit-name
  take form commit-name

load @textsurf/snow/amazonaws.com/codecommit/2015-04-13/base/conflict-detail-level-type-enum
  take form conflict-detail-level-type-enum

load @textsurf/snow/amazonaws.com/codecommit/2015-04-13/base/conflict-resolution
  take form conflict-resolution

load @textsurf/snow/amazonaws.com/codecommit/2015-04-13/base/conflict-resolution-strategy-type-enum
  take form conflict-resolution-strategy-type-enum

load @textsurf/snow/amazonaws.com/codecommit/2015-04-13/base/email
  take form email

load @textsurf/snow/amazonaws.com/codecommit/2015-04-13/base/keep-empty-folders
  take form keep-empty-folders

load @textsurf/snow/amazonaws.com/codecommit/2015-04-13/base/merge-option-type-enum
  take form merge-option-type-enum

load @textsurf/snow/amazonaws.com/codecommit/2015-04-13/base/message
  take form message

load @textsurf/snow/amazonaws.com/codecommit/2015-04-13/base/name
  take form name

load @textsurf/snow/amazonaws.com/codecommit/2015-04-13/base/repository-name
  take form repository-name

form create-unreferenced-merge-commit-input, name <CreateUnreferencedMergeCommitInput>
  take repository-name, name <repositoryName>
    like repository-name
    note <The name of the repository where you want to create the unreferenced merge commit.>
  take source-commit-specifier, name <sourceCommitSpecifier>
    like commit-name
    note <The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).>
  take destination-commit-specifier, name <destinationCommitSpecifier>
    like commit-name
    note <The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).>
  take merge-option, name <mergeOption>
    like merge-option-type-enum
    note <The merge option or strategy you want to use to merge the code.>
  take conflict-detail-level, name <conflictDetailLevel>
    like conflict-detail-level-type-enum
    void take
    note <The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.>
  take conflict-resolution-strategy, name <conflictResolutionStrategy>
    like conflict-resolution-strategy-type-enum
    void take
    note <Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.>
  take author-name, name <authorName>
    like name
    void take
    note <The name of the author who created the unreferenced commit. This information is used as both the author and committer for the commit.>
  take email, name <email>
    like email
    void take
    note <The email address for the person who created the unreferenced commit.>
  take commit-message, name <commitMessage>
    like message
    void take
    note <The commit message for the unreferenced commit.>
  take keep-empty-folders, name <keepEmptyFolders>
    like keep-empty-folders
    void take
    note <If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file is created for empty folders. The default is false.>
  take conflict-resolution, name <conflictResolution>
    like conflict-resolution
    void take
    note <If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.>
