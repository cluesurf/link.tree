
load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/active-contexts-list
  take form active-contexts-list

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/bot-version
  take form bot-version

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/dialog-state
  take form dialog-state

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/intent-confidence
  take form intent-confidence

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/intent-list
  take form intent-list

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/intent-name
  take form intent-name

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/message-format-type
  take form message-format-type

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/response-card
  take form response-card

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/sentiment-response
  take form sentiment-response

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/string-map
  take form string-map

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/text
  take form text

load @treesurf/snow/base/string
  take form string

form post-text-response, name <PostTextResponse>
  take intent-name, name <intentName>
    like intent-name
    void take
    note <The current user intent that Amazon Lex is aware of.>
  take nlu-intent-confidence, name <nluIntentConfidence>
    like intent-confidence
    void take
    note <Provides a score that indicates how confident Amazon Lex is that the returned intent is the one that matches the user's intent. The score is between 0.0 and 1.0. For more information, see [Confidence Scores](https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html).

The score is a relative score, not an absolute score. The score may change based on improvements to Amazon Lex.>
  take alternative-intents, name <alternativeIntents>
    like intent-list
    void take
    note <One to four alternative intents that may be applicable to the user's intent.

Each alternative includes a score that indicates how confident Amazon Lex is that the intent matches the user's intent. The intents are sorted by the confidence score.>
  take slots, name <slots>
    like string-map
    void take
    note <The intent slots that Amazon Lex detected from the user input in the conversation.

Amazon Lex creates a resolution list containing likely values for a slot. The value that it returns is determined by the `valueSelectionStrategy` selected when the slot type was created or updated. If `valueSelectionStrategy` is set to `ORIGINAL_VALUE`, the value provided by the user is returned, if the user value is similar to the slot values. If `valueSelectionStrategy` is set to `TOP_RESOLUTION` Amazon Lex returns the first value in the resolution list or, if there is no resolution list, null. If you don't specify a `valueSelectionStrategy`, the default is `ORIGINAL_VALUE`.>
  take session-attributes, name <sessionAttributes>
    like string-map
    void take
    note <A map of key-value pairs representing the session-specific context information.>
  take message, name <message>
    like text
    void take
    note <The message to convey to the user. The message can come from the bot's configuration or from a Lambda function.

If the intent is not configured with a Lambda function, or if the Lambda function returned `Delegate` as the `dialogAction.type` its response, Amazon Lex decides on the next course of action and selects an appropriate message from the bot's configuration based on the current interaction context. For example, if Amazon Lex isn't able to understand user input, it uses a clarification prompt message.

When you create an intent you can assign messages to groups. When messages are assigned to groups Amazon Lex returns one message from each group in the response. The message field is an escaped JSON string containing the messages. For more information about the structure of the JSON string returned, see msg-prompts-formats.

If the Lambda function returns a message, Amazon Lex passes it to the client in its response.>
  take sentiment-response, name <sentimentResponse>
    like sentiment-response
    void take
    note <The sentiment expressed in and utterance.

When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.>
  take message-format, name <messageFormat>
    like message-format-type
    void take
    note <The format of the response message. One of the following values:

- `PlainText` - The message contains plain UTF-8 text.

- `CustomPayload` - The message is a custom format defined by the Lambda function.

- `SSML` - The message contains text formatted for voice output.

- `Composite` - The message contains an escaped JSON object containing one or more messages from the groups that messages were assigned to when the intent was created.>
  take dialog-state, name <dialogState>
    like dialog-state
    void take
    note <Identifies the current state of the user interaction. Amazon Lex returns one of the following values as `dialogState`. The client can optionally use this information to customize the user interface.

- `ElicitIntent` - Amazon Lex wants to elicit user intent.

  For example, a user might utter an intent ("I want to order a pizza"). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialogState.

- `ConfirmIntent` - Amazon Lex is expecting a "yes" or "no" response.

  For example, Amazon Lex wants user confirmation before fulfilling an intent.

  Instead of a simple "yes" or "no," a user might respond with additional information. For example, "yes, but make it thick crust pizza" or "no, I want to order a drink". Amazon Lex can process such additional information (in these examples, update the crust type slot value, or change intent from OrderPizza to OrderDrink).

- `ElicitSlot` - Amazon Lex is expecting a slot value for the current intent.

  For example, suppose that in the response Amazon Lex sends this message: "What size pizza would you like?". A user might reply with the slot value (e.g., "medium"). The user might also provide additional information in the response (e.g., "medium thick crust pizza"). Amazon Lex can process such additional information appropriately.

- `Fulfilled` - Conveys that the Lambda function configured for the intent has successfully fulfilled the intent.

- `ReadyForFulfillment` - Conveys that the client has to fulfill the intent.

- `Failed` - Conveys that the conversation with the user failed.

  This can happen for various reasons including that the user did not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or the Lambda function failed to fulfill the intent.>
  take slot-to-elicit, name <slotToElicit>
    like string
    void take
    note <If the `dialogState` value is `ElicitSlot`, returns the name of the slot for which Amazon Lex is eliciting a value.>
  take response-card, name <responseCard>
    like response-card
    void take
    note <Represents the options that the user has to respond to the current prompt. Response Card can come from the bot configuration (in the Amazon Lex console, choose the settings button next to a slot) or from a code hook (Lambda function).>
  take session-id, name <sessionId>
    like string
    void take
    note <A unique identifier for the session.>
  take bot-version, name <botVersion>
    like bot-version
    void take
    note <The version of the bot that responded to the conversation. You can use this information to help determine if one version of a bot is performing better than another version.>
  take active-contexts, name <activeContexts>
    like active-contexts-list
    void take
    note <A list of active contexts for the session. A context can be set when an intent is fulfilled or by calling the `PostContent`, `PostText`, or `PutSession` operation.

You can use a context to control the intents that can follow up an intent, or to modify the operation of your application.>