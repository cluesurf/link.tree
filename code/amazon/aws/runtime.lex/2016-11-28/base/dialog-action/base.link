
load @wavebond/snow/amazonaws.com/runtime.lex/2016-11-28/base/dialog-action-type
  take form dialog-action-type

load @wavebond/snow/amazonaws.com/runtime.lex/2016-11-28/base/fulfillment-state
  take form fulfillment-state

load @wavebond/snow/amazonaws.com/runtime.lex/2016-11-28/base/intent-name
  take form intent-name

load @wavebond/snow/amazonaws.com/runtime.lex/2016-11-28/base/message-format-type
  take form message-format-type

load @wavebond/snow/amazonaws.com/runtime.lex/2016-11-28/base/string-map
  take form string-map

load @wavebond/snow/amazonaws.com/runtime.lex/2016-11-28/base/text
  take form text

load @wavebond/snow/base/string
  take form string

form dialog-action, name <DialogAction>
  note <Describes the next action that the bot should take in its interaction with the user and provides information about the context in which the action takes place. Use the `DialogAction` data type to set the interaction to a specific state, or to return the interaction to a previous state.>
  take type, name <type>
    like dialog-action-type
    note <The next action that the bot should take in its interaction with the user. The possible values are:

- `ConfirmIntent` - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as "Place the order?"

- `Close` - Indicates that the there will not be a response from the user. For example, the statement "Your order has been placed" does not require a response.

- `Delegate` - The next action is determined by Amazon Lex.

- `ElicitIntent` - The next action is to determine the intent that the user wants to fulfill.

- `ElicitSlot` - The next action is to elicit a slot value from the user.>
  take intent-name, name <intentName>
    like intent-name
    void take
    note <The name of the intent.>
  take slots, name <slots>
    like string-map
    void take
    note <Map of the slots that have been gathered and their values.>
  take slot-to-elicit, name <slotToElicit>
    like string
    void take
    note <The name of the slot that should be elicited from the user.>
  take fulfillment-state, name <fulfillmentState>
    like fulfillment-state
    void take
    note <The fulfillment state of the intent. The possible values are:

- `Failed` - The Lambda function associated with the intent failed to fulfill the intent.

- `Fulfilled` - The intent has fulfilled by the Lambda function associated with the intent.

- `ReadyForFulfillment` - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.>
  take message, name <message>
    like text
    void take
    note <The message that should be shown to the user. If you don't specify a message, Amazon Lex will use the message configured for the intent.>
  take message-format, name <messageFormat>
    like message-format-type
    void take
    note <- `PlainText` - The message contains plain UTF-8 text.

- `CustomPayload` - The message is a custom format for the client.

- `SSML` - The message contains text formatted for voice output.

- `Composite` - The message contains an escaped JSON object containing one or more messages. For more information, see [Message Groups](https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html).>