
load @textsurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/confirmation-status
  take form confirmation-status

load @textsurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/dialog-action-type
  take form dialog-action-type

load @textsurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/fulfillment-state
  take form fulfillment-state

load @textsurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/intent-name
  take form intent-name

load @textsurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/intent-summary-checkpoint-label
  take form intent-summary-checkpoint-label

load @textsurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/string-map
  take form string-map

load @textsurf/snow/base/string
  take form string

form intent-summary, name <IntentSummary>
  note <Provides information about the state of an intent. You can use this information to get the current state of an intent so that you can process the intent, or so that you can return the intent to its previous state.>
  take intent-name, name <intentName>
    like intent-name
    void take
    note <The name of the intent.>
  take checkpoint-label, name <checkpointLabel>
    like intent-summary-checkpoint-label
    void take
    note <A user-defined label that identifies a particular intent. You can use this label to return to a previous intent.

Use the `checkpointLabelFilter` parameter of the `GetSessionRequest` operation to filter the intents returned by the operation to those with only the specified label.>
  take slots, name <slots>
    like string-map
    void take
    note <Map of the slots that have been gathered and their values.>
  take confirmation-status, name <confirmationStatus>
    like confirmation-status
    void take
    note <The status of the intent after the user responds to the confirmation prompt. If the user confirms the intent, Amazon Lex sets this field to `Confirmed`. If the user denies the intent, Amazon Lex sets this value to `Denied`. The possible values are:

- `Confirmed` - The user has responded "Yes" to the confirmation prompt, confirming that the intent is complete and that it is ready to be fulfilled.

- `Denied` - The user has responded "No" to the confirmation prompt.

- `None` - The user has never been prompted for confirmation; or, the user was prompted but did not confirm or deny the prompt.>
  take dialog-action-type, name <dialogActionType>
    like dialog-action-type
    note <The next action that the bot should take in its interaction with the user. The possible values are:

- `ConfirmIntent` - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as "Place the order?"

- `Close` - Indicates that the there will not be a response from the user. For example, the statement "Your order has been placed" does not require a response.

- `ElicitIntent` - The next action is to determine the intent that the user wants to fulfill.

- `ElicitSlot` - The next action is to elicit a slot value from the user.>
  take fulfillment-state, name <fulfillmentState>
    like fulfillment-state
    void take
    note <The fulfillment state of the intent. The possible values are:

- `Failed` - The Lambda function associated with the intent failed to fulfill the intent.

- `Fulfilled` - The intent has fulfilled by the Lambda function associated with the intent.

- `ReadyForFulfillment` - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.>
  take slot-to-elicit, name <slotToElicit>
    like string
    void take
    note <The next slot to elicit from the user. If there is not slot to elicit, the field is blank.>