
load @nerdbond/snow/amazonaws.com/runtime.lex/2016-11-28/base/bad-gateway-exception
  take form bad-gateway-exception

load @nerdbond/snow/amazonaws.com/runtime.lex/2016-11-28/base/bad-request-exception
  take form bad-request-exception

load @nerdbond/snow/amazonaws.com/runtime.lex/2016-11-28/base/conflict-exception
  take form conflict-exception

load @nerdbond/snow/amazonaws.com/runtime.lex/2016-11-28/base/dependency-failed-exception
  take form dependency-failed-exception

load @nerdbond/snow/amazonaws.com/runtime.lex/2016-11-28/base/internal-failure-exception
  take form internal-failure-exception

load @nerdbond/snow/amazonaws.com/runtime.lex/2016-11-28/base/limit-exceeded-exception
  take form limit-exceeded-exception

load @nerdbond/snow/amazonaws.com/runtime.lex/2016-11-28/base/loop-detected-exception
  take form loop-detected-exception

load @nerdbond/snow/amazonaws.com/runtime.lex/2016-11-28/base/not-acceptable-exception
  take form not-acceptable-exception

load @nerdbond/snow/amazonaws.com/runtime.lex/2016-11-28/base/not-found-exception
  take form not-found-exception

load @nerdbond/snow/amazonaws.com/runtime.lex/2016-11-28/base/post-content-body
  take form post-content-body

load @nerdbond/snow/amazonaws.com/runtime.lex/2016-11-28/base/post-content-response
  take form post-content-response

load @nerdbond/snow/amazonaws.com/runtime.lex/2016-11-28/base/request-timeout-exception
  take form request-timeout-exception

load @nerdbond/snow/amazonaws.com/runtime.lex/2016-11-28/base/unsupported-media-type-exception
  take form unsupported-media-type-exception

load @nerdbond/snow/base/native-string
  take form native-string

boot post-content, name <PostContent>
  deed post
  note <Sends user input (text or speech) to Amazon Lex. Clients use this API to send text and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model that it built for the bot.

The `PostContent` operation supports audio input at 8kHz and 16kHz. You can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio applications.

In response, Amazon Lex returns the next message to convey to the user. Consider the following example messages:

- For a user input "I would like a pizza," Amazon Lex might return a response with a message eliciting slot data (for example, `PizzaSize`): "What size pizza would you like?".

- After the user provides all of the pizza order information, Amazon Lex might return a response with a message to get user confirmation: "Order the pizza?".

- After the user replies "Yes" to the confirmation prompt, Amazon Lex might return a conclusion statement: "Thank you, your cheese pizza has been ordered.".

Not all Amazon Lex messages require a response from the user. For example, conclusion statements do not require a response. Some messages require only a yes or no response. In addition to the `message`, Amazon Lex provides additional context about the message in the response that you can use to enhance client behavior, such as displaying the appropriate client user interface. Consider the following examples:

- If the message is to elicit slot data, Amazon Lex returns the following context information:

  - `x-amz-lex-dialog-state` header set to `ElicitSlot`

  - `x-amz-lex-intent-name` header set to the intent name in the current context

  - `x-amz-lex-slot-to-elicit` header set to the slot name for which the `message` is eliciting information

  - `x-amz-lex-slots` header set to a map of slots configured for the intent with their current values

- If the message is a confirmation prompt, the `x-amz-lex-dialog-state` header is set to `Confirmation` and the `x-amz-lex-slot-to-elicit` header is omitted.

- If the message is a clarification prompt configured for the intent, indicating that the user intent is not understood, the `x-amz-dialog-state` header is set to `ElicitIntent` and the `x-amz-slot-to-elicit` header is omitted.

In addition, Amazon Lex also returns your application-specific `sessionAttributes`. For more information, see [Managing Conversation Context](https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html).>

  take bot-name
    like native-string
    note <Name of the Amazon Lex bot.>
  take bot-alias
    like native-string
    note <Alias of the Amazon Lex bot.>
  take user-id
    like native-string
    note <The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. At runtime, each request must contain the `userID` field.

To decide the user ID to use for your application, consider the following factors.

- The `userID` field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.

- If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.

- If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.

- A user can't have two independent conversations with two different versions of the same bot. For example, a user can't have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.>
  take x-amz-lex-session-attributes
    like native-string
    note <You pass this value as the `x-amz-lex-session-attributes` HTTP header.

Application-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the `sessionAttributes` and `requestAttributes` headers is limited to 12 KB.

For more information, see [Setting Session Attributes](https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs).>
    void take
  take x-amz-lex-request-attributes
    like native-string
    note <You pass this value as the `x-amz-lex-request-attributes` HTTP header.

Request-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the `requestAttributes` and `sessionAttributes` headers is limited to 12 KB.

The namespace `x-amz-lex:` is reserved for special attributes. Don't create any request attributes with the prefix `x-amz-lex:`.

For more information, see [Setting Request Attributes](https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs).>
    void take
  take content-type
    like native-string
    note <You pass this value as the `Content-Type` HTTP header.

Indicates the audio format or text. The header value must start with one of the following prefixes:

- PCM format, audio data must be in little-endian byte order.

  - audio/l16; rate=16000; channels=1

  - audio/x-l16; sample-rate=16000; channel-count=1

  - audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false

- Opus format

  - audio/x-cbr-opus-with-preamble; preamble-size=0; bit-rate=256000; frame-size-milliseconds=4

- Text format

  - text/plain; charset=utf-8>
  take accept
    like native-string
    note <You pass this value as the `Accept` HTTP header.

The message Amazon Lex returns in the response can be either text or speech based on the `Accept` HTTP header value in the request.

- If the value is `text/plain; charset=utf-8`, Amazon Lex returns text in the response.

- If the value begins with `audio/`, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech (using the configuration you specified in the `Accept` header). For example, if you specify `audio/mpeg` as the value, Amazon Lex returns speech in the MPEG format.

- If the value is `audio/pcm`, the speech returned is `audio/pcm` in 16-bit, little endian format.

- The following are the accepted values:

  - audio/mpeg

  - audio/ogg

  - audio/pcm

  - text/plain; charset=utf-8

  - audio/* (defaults to mpeg)>
    void take
  take x-amz-lex-active-contexts
    like native-string
    note <A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,

If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.>
    void take
  take post-content-body, like post-content-body

  line </bot/{bot-name}/alias/{bot-alias}/user/{user-id}/content#Content-Type>

  hint <x-amz-lex-session-attributes>, loan x-amz-lex-session-attributes
  hint <x-amz-lex-request-attributes>, loan x-amz-lex-request-attributes
  hint <Content-Type>, loan content-type
  hint <Accept>, loan accept
  hint <x-amz-lex-active-contexts>, loan x-amz-lex-active-contexts

  seed json, loan post-content-body

  loot 200
    seed json, like post-content-response
    note <Success>
  loot 480
    seed json, like not-found-exception
    note <NotFoundException>
  loot 481
    seed json, like bad-request-exception
    note <BadRequestException>
  loot 482
    seed json, like limit-exceeded-exception
    note <LimitExceededException>
  loot 483
    seed json, like internal-failure-exception
    note <InternalFailureException>
  loot 484
    seed json, like conflict-exception
    note <ConflictException>
  loot 485
    seed json, like unsupported-media-type-exception
    note <UnsupportedMediaTypeException>
  loot 486
    seed json, like not-acceptable-exception
    note <NotAcceptableException>
  loot 487
    seed json, like request-timeout-exception
    note <RequestTimeoutException>
  loot 488
    seed json, like dependency-failed-exception
    note <DependencyFailedException>
  loot 489
    seed json, like bad-gateway-exception
    note <BadGatewayException>
  loot 490
    seed json, like loop-detected-exception
    note <LoopDetectedException>