
load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/bad-gateway-exception
  take form bad-gateway-exception

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/bad-request-exception
  take form bad-request-exception

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/conflict-exception
  take form conflict-exception

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/dependency-failed-exception
  take form dependency-failed-exception

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/internal-failure-exception
  take form internal-failure-exception

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/limit-exceeded-exception
  take form limit-exceeded-exception

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/loop-detected-exception
  take form loop-detected-exception

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/not-found-exception
  take form not-found-exception

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/post-text-body
  take form post-text-body

load @treesurf/snow/amazonaws.com/runtime.lex/2016-11-28/base/post-text-response
  take form post-text-response

load @treesurf/snow/base/native-string
  take form native-string

boot post-text, name <PostText>
  deed post
  note <Sends user input to Amazon Lex. Client applications can use this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it built for the bot.

In response, Amazon Lex returns the next `message` to convey to the user an optional `responseCard` to display. Consider the following example messages:

- For a user input "I would like a pizza", Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize): "What size pizza would you like?"

- After the user provides all of the pizza order information, Amazon Lex might return a response with a message to obtain user confirmation "Proceed with the pizza order?".

- After the user replies to a confirmation prompt with a "yes", Amazon Lex might return a conclusion statement: "Thank you, your cheese pizza has been ordered.".

Not all Amazon Lex messages require a user response. For example, a conclusion statement does not require a response. Some messages require only a "yes" or "no" user response. In addition to the `message`, Amazon Lex provides additional context about the message in the response that you might use to enhance client behavior, for example, to display the appropriate client user interface. These are the `slotToElicit`, `dialogState`, `intentName`, and `slots` fields in the response. Consider the following examples:

- If the message is to elicit slot data, Amazon Lex returns the following context information:

  - `dialogState` set to ElicitSlot

  - `intentName` set to the intent name in the current context

  - `slotToElicit` set to the slot name for which the `message` is eliciting information

  - `slots` set to a map of slots, configured for the intent, with currently known values

- If the message is a confirmation prompt, the `dialogState` is set to ConfirmIntent and `SlotToElicit` is set to null.

- If the message is a clarification prompt (configured for the intent) that indicates that user intent is not understood, the `dialogState` is set to ElicitIntent and `slotToElicit` is set to null.

In addition, Amazon Lex also returns your application-specific `sessionAttributes`. For more information, see [Managing Conversation Context](https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html).>

  take bot-name
    like native-string
    note <The name of the Amazon Lex bot.>
  take bot-alias
    like native-string
    note <The alias of the Amazon Lex bot.>
  take user-id
    like native-string
    note <The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. At runtime, each request must contain the `userID` field.

To decide the user ID to use for your application, consider the following factors.

- The `userID` field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.

- If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.

- If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.

- A user can't have two independent conversations with two different versions of the same bot. For example, a user can't have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.>
  take post-text-body, like post-text-body

  line </bot/{bot-name}/alias/{bot-alias}/user/{user-id}/text>

  seed json, loan post-text-body

  loot 200
    seed json, like post-text-response
    note <Success>
  loot 480
    seed json, like not-found-exception
    note <NotFoundException>
  loot 481
    seed json, like bad-request-exception
    note <BadRequestException>
  loot 482
    seed json, like limit-exceeded-exception
    note <LimitExceededException>
  loot 483
    seed json, like internal-failure-exception
    note <InternalFailureException>
  loot 484
    seed json, like conflict-exception
    note <ConflictException>
  loot 485
    seed json, like dependency-failed-exception
    note <DependencyFailedException>
  loot 486
    seed json, like bad-gateway-exception
    note <BadGatewayException>
  loot 487
    seed json, like loop-detected-exception
    note <LoopDetectedException>