
load @wavebond/snow/amazonaws.com/cloudsearch/2011-02-01/base/base-exception
  take form base-exception

load @wavebond/snow/amazonaws.com/cloudsearch/2011-02-01/base/define-rank-expression-response
  take form define-rank-expression-response

load @wavebond/snow/amazonaws.com/cloudsearch/2011-02-01/base/field-name
  take form field-name

load @wavebond/snow/amazonaws.com/cloudsearch/2011-02-01/base/internal-exception
  take form internal-exception

load @wavebond/snow/amazonaws.com/cloudsearch/2011-02-01/base/rank-expression
  take form rank-expression

load @wavebond/snow/amazonaws.com/cloudsearch/2011-02-01/base/resource-not-found-exception
  take form resource-not-found-exception

load @wavebond/snow/base/form
  take form form

load @wavebond/snow/base/native-string
  take form native-string

boot get-define-rank-expression, name <GET_DefineRankExpression>
  deed get
  note <Configures a `RankExpression` for the search domain. Used to create new rank expressions and modify existing ones. If the expression exists, the new configuration replaces the old one. You can configure a maximum of 50 rank expressions.>

  take domain-name
    like native-string
  take rank-expression
    like form
      take rank-name, name <RankName>
        like field-name
        note <The name of a rank expression. Rank expression names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Uppercase letters and hyphens are not allowed. The names "body", "docid", and "text_relevance" are reserved and cannot be specified as field or rank expression names.>
      take rank-expression, name <RankExpression>
        like rank-expression
        note <The expression to evaluate for ranking or thresholding while processing a search request. The `RankExpression` syntax is based on JavaScript expressions and supports:

- Integer, floating point, hex and octal literals
- Shortcut evaluation of logical operators such that an expression `a || b` evaluates to the value `a`, if `a` is true, without evaluating `b` at all
- JavaScript order of precedence for operators
- Arithmetic operators: `+ - * / %`
- Boolean operators (including the ternary operator)
- Bitwise operators
- Comparison operators
- Common mathematic functions: `abs ceil erf exp floor lgamma ln log2 log10 max min sqrt pow`
- Trigonometric library functions: `acosh acos asinh asin atanh atan cosh cos sinh sin tanh tan`
- Random generation of a number between 0 and 1: `rand`
- Current time in epoch: `time`
- The `min max` functions that operate on a variable argument list

Intermediate results are calculated as double precision floating point values. The final return value of a `RankExpression` is automatically converted from floating point to a 32-bit unsigned integer by rounding to the nearest integer, with a natural floor of 0 and a ceiling of max(uint32_t), 4294967295. Mathematical errors such as dividing by 0 will fail during evaluation and return a value of 0.

The source data for a `RankExpression` can be the name of an `IndexField` of type uint, another `RankExpression` or the reserved name _text_relevance_. The text_relevance source is defined to return an integer from 0 to 1000 (inclusive) to indicate how relevant a document is to the search request, taking into account repetition of search terms in the document and proximity of search terms to each other in each matching `IndexField` in the document.

For more information about using rank expressions to customize ranking, see the Amazon CloudSearch Developer Guide.>
  take action
    like native-string
  take version
    like native-string

  line </#Action=DefineRankExpression>

  find <DomainName>, loan domain-name
  find <RankExpression>, loan rank-expression
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like define-rank-expression-response
    note <Success>
  loot 409
    seed xml, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 480
    seed xml, like base-exception
    note <BaseException>
  loot 500
    seed xml, like internal-exception
    note <InternalException>