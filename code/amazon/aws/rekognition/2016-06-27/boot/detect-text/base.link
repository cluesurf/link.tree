
load @drumwork/snow/amazonaws.com/rekognition/2016-06-27/base/access-denied-exception
  take form access-denied-exception

load @drumwork/snow/amazonaws.com/rekognition/2016-06-27/base/detect-text-response
  take form detect-text-response

load @drumwork/snow/amazonaws.com/rekognition/2016-06-27/base/image-too-large-exception
  take form image-too-large-exception

load @drumwork/snow/amazonaws.com/rekognition/2016-06-27/base/internal-server-error
  take form internal-server-error

load @drumwork/snow/amazonaws.com/rekognition/2016-06-27/base/invalid-image-format-exception
  take form invalid-image-format-exception

load @drumwork/snow/amazonaws.com/rekognition/2016-06-27/base/invalid-parameter-exception
  take form invalid-parameter-exception

load @drumwork/snow/amazonaws.com/rekognition/2016-06-27/base/invalid-s3-object-exception
  take form invalid-s3-object-exception

load @drumwork/snow/amazonaws.com/rekognition/2016-06-27/base/provisioned-throughput-exceeded-exception
  take form provisioned-throughput-exceeded-exception

load @drumwork/snow/amazonaws.com/rekognition/2016-06-27/base/throttling-exception
  take form throttling-exception

load @drumwork/snow/base/native-string
  take form native-string

boot detect-text, name <DetectText>
  deed post
  note <Detects text in the input image and converts it into machine-readable text.

Pass the input image as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations, you must pass it as a reference to an image in an Amazon S3 bucket. For the AWS CLI, passing image bytes is not supported. The image must be either a .png or .jpeg formatted file.

The `DetectText` operation returns text in an array of TextDetection elements, `TextDetections`. Each `TextDetection` element provides information about a single word or line of text that was detected in the image.

A word is one or more ISO basic latin script characters that are not separated by spaces. `DetectText` can detect up to 100 words in an image.

A line is a string of equally spaced words. A line isn't necessarily a complete sentence. For example, a driver's license number is detected as a line. A line ends when there is no aligned text after it. Also, a line ends when there is a large gap between words, relative to the length of the words. This means, depending on the gap between words, Amazon Rekognition may detect multiple lines in text aligned in the same direction. Periods don't represent the end of a line. If a sentence spans multiple lines, the `DetectText` operation returns multiple lines.

To determine whether a `TextDetection` element is a line of text or a word, use the `TextDetection` object `Type` field.

To be detected, text must be within +/- 90 degrees orientation of the horizontal axis.

For more information, see DetectText in the Amazon Rekognition Developer Guide.>

  take x-amz-target
    like native-string
  take detect-text-request, like detect-text-request

  line </#X-Amz-Target=RekognitionService.DetectText>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan detect-text-request

  loot 200
    seed json, like detect-text-response
    note <Success>
  loot 480
    seed json, like invalid-s3-object-exception
    note <InvalidS3ObjectException>
  loot 481
    seed json, like invalid-parameter-exception
    note <InvalidParameterException>
  loot 482
    seed json, like image-too-large-exception
    note <ImageTooLargeException>
  loot 483
    seed json, like access-denied-exception
    note <AccessDeniedException>
  loot 484
    seed json, like internal-server-error
    note <InternalServerError>
  loot 485
    seed json, like throttling-exception
    note <ThrottlingException>
  loot 486
    seed json, like provisioned-throughput-exceeded-exception
    note <ProvisionedThroughputExceededException>
  loot 487
    seed json, like invalid-image-format-exception
    note <InvalidImageFormatException>