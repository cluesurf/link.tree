
load @treesurf/snow/amazonaws.com/kinesis/2013-12-02/base/invalid-argument-exception
  take form invalid-argument-exception

load @treesurf/snow/amazonaws.com/kinesis/2013-12-02/base/limit-exceeded-exception
  take form limit-exceeded-exception

load @treesurf/snow/amazonaws.com/kinesis/2013-12-02/base/resource-in-use-exception
  take form resource-in-use-exception

load @treesurf/snow/amazonaws.com/kinesis/2013-12-02/base/resource-not-found-exception
  take form resource-not-found-exception

load @treesurf/snow/base/native-string
  take form native-string

boot split-shard, name <SplitShard>
  deed post
  note <Splits a shard into two new shards in the Kinesis data stream, to increase the stream's capacity to ingest and transport data. `SplitShard` is called when there is a need to increase the overall capacity of a stream because of an expected increase in the volume of data records being ingested.

You can also use `SplitShard` when a shard appears to be approaching its maximum utilization; for example, the producers sending data into the specific shard are suddenly sending more than previously anticipated. You can also call `SplitShard` to increase stream capacity, so that more Kinesis Data Streams applications can simultaneously read data from the stream for real-time processing.

You must specify the shard to be split and the new hash key, which is the position in the shard where the shard gets split in two. In many cases, the new hash key might be the average of the beginning and ending hash key, but it can be any hash key value in the range being mapped into the shard. For more information, see [Split a Shard](https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-split.html) in the _Amazon Kinesis Data Streams Developer Guide_.

You can use DescribeStream to determine the shard ID and hash key values for the `ShardToSplit` and `NewStartingHashKey` parameters that are specified in the `SplitShard` request.

`SplitShard` is an asynchronous operation. Upon receiving a `SplitShard` request, Kinesis Data Streams immediately returns a response and sets the stream status to `UPDATING`. After the operation is completed, Kinesis Data Streams sets the stream status to `ACTIVE`. Read and write operations continue to work while the stream is in the `UPDATING` state.

You can use `DescribeStream` to check the status of the stream, which is returned in `StreamStatus`. If the stream is in the `ACTIVE` state, you can call `SplitShard`. If a stream is in `CREATING` or `UPDATING` or `DELETING` states, `DescribeStream` returns a `ResourceInUseException`.

If the specified stream does not exist, `DescribeStream` returns a `ResourceNotFoundException`. If you try to create more shards than are authorized for your account, you receive a `LimitExceededException`.

For the default shard limit for an AWS account, see [Kinesis Data Streams Limits](https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html) in the _Amazon Kinesis Data Streams Developer Guide_. To increase this limit, [contact AWS Support](https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html).

If you try to operate on too many streams simultaneously using CreateStream, DeleteStream, MergeShards, and/or SplitShard, you receive a `LimitExceededException`.

`SplitShard` has a limit of five transactions per second per account.>

  take x-amz-target
    like native-string
  take split-shard-input, like split-shard-input

  line </#X-Amz-Target=Kinesis_20131202.SplitShard>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan split-shard-input

  loot 200
    note <Success>
  loot 480
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 481
    seed json, like resource-in-use-exception
    note <ResourceInUseException>
  loot 482
    seed json, like invalid-argument-exception
    note <InvalidArgumentException>
  loot 483
    seed json, like limit-exceeded-exception
    note <LimitExceededException>