
load @drumwork/snow/amazonaws.com/kinesis/2013-12-02/base/get-shard-iterator-output
  take form get-shard-iterator-output

load @drumwork/snow/amazonaws.com/kinesis/2013-12-02/base/invalid-argument-exception
  take form invalid-argument-exception

load @drumwork/snow/amazonaws.com/kinesis/2013-12-02/base/provisioned-throughput-exceeded-exception
  take form provisioned-throughput-exceeded-exception

load @drumwork/snow/amazonaws.com/kinesis/2013-12-02/base/resource-not-found-exception
  take form resource-not-found-exception

load @drumwork/snow/base/native-string
  take form native-string

boot get-shard-iterator, name <GetShardIterator>
  note <Gets an Amazon Kinesis shard iterator. A shard iterator expires 5 minutes after it is returned to the requester.

A shard iterator specifies the shard position from which to start reading data records sequentially. The position is specified using the sequence number of a data record in a shard. A sequence number is the identifier associated with every record ingested in the stream, and is assigned when a record is put into the stream. Each stream has one or more shards.

You must specify the shard iterator type. For example, you can set the `ShardIteratorType` parameter to read exactly from the position denoted by a specific sequence number by using the `AT_SEQUENCE_NUMBER` shard iterator type. Alternatively, the parameter can read right after the sequence number by using the `AFTER_SEQUENCE_NUMBER` shard iterator type, using sequence numbers returned by earlier calls to PutRecord, PutRecords, GetRecords, or DescribeStream. In the request, you can specify the shard iterator type `AT_TIMESTAMP` to read records from an arbitrary point in time, `TRIM_HORIZON` to cause `ShardIterator` to point to the last untrimmed record in the shard in the system (the oldest data record in the shard), or `LATEST` so that you always read the most recent data in the shard.

When you read repeatedly from a stream, use a GetShardIterator request to get the first shard iterator for use in your first GetRecords request and for subsequent reads use the shard iterator returned by the GetRecords request in `NextShardIterator`. A new shard iterator is returned by every GetRecords request in `NextShardIterator`, which you use in the `ShardIterator` parameter of the next GetRecords request.

If a GetShardIterator request is made too often, you receive a `ProvisionedThroughputExceededException`. For more information about throughput limits, see GetRecords, and [Streams Limits](https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html) in the _Amazon Kinesis Data Streams Developer Guide_.

If the shard is closed, GetShardIterator returns a valid iterator for the last sequence number of the shard. A shard can be closed as a result of using SplitShard or MergeShards.

GetShardIterator has a limit of five transactions per second per account per open shard.>

  take x-amz-target
    like native-string
  take get-shard-iterator-input, like get-shard-iterator-input

  line </#X-Amz-Target=Kinesis_20131202.GetShardIterator>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan get-shard-iterator-input

  loot 200
    seed json, like get-shard-iterator-output
    note <Success>
  loot 480
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 481
    seed json, like invalid-argument-exception
    note <InvalidArgumentException>
  loot 482
    seed json, like provisioned-throughput-exceeded-exception
    note <ProvisionedThroughputExceededException>