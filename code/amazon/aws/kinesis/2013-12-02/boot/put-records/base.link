
load @treesurf/snow/amazonaws.com/kinesis/2013-12-02/base/invalid-argument-exception
  take form invalid-argument-exception

load @treesurf/snow/amazonaws.com/kinesis/2013-12-02/base/kms-access-denied-exception
  take form kms-access-denied-exception

load @treesurf/snow/amazonaws.com/kinesis/2013-12-02/base/kms-disabled-exception
  take form kms-disabled-exception

load @treesurf/snow/amazonaws.com/kinesis/2013-12-02/base/kms-invalid-state-exception
  take form kms-invalid-state-exception

load @treesurf/snow/amazonaws.com/kinesis/2013-12-02/base/kms-not-found-exception
  take form kms-not-found-exception

load @treesurf/snow/amazonaws.com/kinesis/2013-12-02/base/kms-opt-in-required
  take form kms-opt-in-required

load @treesurf/snow/amazonaws.com/kinesis/2013-12-02/base/kms-throttling-exception
  take form kms-throttling-exception

load @treesurf/snow/amazonaws.com/kinesis/2013-12-02/base/provisioned-throughput-exceeded-exception
  take form provisioned-throughput-exceeded-exception

load @treesurf/snow/amazonaws.com/kinesis/2013-12-02/base/put-records-output
  take form put-records-output

load @treesurf/snow/amazonaws.com/kinesis/2013-12-02/base/resource-not-found-exception
  take form resource-not-found-exception

load @treesurf/snow/base/native-string
  take form native-string

boot put-records, name <PutRecords>
  deed post
  note <Writes multiple data records into a Kinesis data stream in a single call (also referred to as a `PutRecords` request). Use this operation to send data into the stream for data ingestion and processing.

Each `PutRecords` request can support up to 500 records. Each record in the request can be as large as 1 MiB, up to a limit of 5 MiB for the entire request, including partition keys. Each shard can support writes up to 1,000 records per second, up to a maximum data write total of 1 MiB per second.

You must specify the name of the stream that captures, stores, and transports the data; and an array of request `Records`, with each record in the array requiring a partition key and data blob. The record size limit applies to the total size of the partition key and data blob.

The data blob can be any type of data; for example, a segment from a log file, geographic/location data, website clickstream data, and so on.

The partition key is used by Kinesis Data Streams as input to a hash function that maps the partition key and associated data to a specific shard. An MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream. For more information, see [Adding Data to a Stream](https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream) in the _Amazon Kinesis Data Streams Developer Guide_.

Each record in the `Records` array may include an optional parameter, `ExplicitHashKey`, which overrides the partition key to shard mapping. This parameter allows a data producer to determine explicitly the shard where the record is stored. For more information, see [Adding Multiple Records with PutRecords](https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-putrecords) in the _Amazon Kinesis Data Streams Developer Guide_.

The `PutRecords` response includes an array of response `Records`. Each record in the response array directly correlates with a record in the request array using natural ordering, from the top to the bottom of the request and response. The response `Records` array always includes the same number of records as the request array.

The response `Records` array includes both successfully and unsuccessfully processed records. Kinesis Data Streams attempts to process all records in each `PutRecords` request. A single record failure does not stop the processing of subsequent records. As a result, PutRecords doesn't guarantee the ordering of records. If you need to read records in the same order they are written to the stream, use PutRecord instead of `PutRecords`, and write to the same shard.

A successfully processed record includes `ShardId` and `SequenceNumber` values. The `ShardId` parameter identifies the shard in the stream where the record is stored. The `SequenceNumber` parameter is an identifier assigned to the put record, unique to all records in the stream.

An unsuccessfully processed record includes `ErrorCode` and `ErrorMessage` values. `ErrorCode` reflects the type of error and can be one of the following values: `ProvisionedThroughputExceededException` or `InternalFailure`. `ErrorMessage` provides more detailed information about the `ProvisionedThroughputExceededException` exception including the account ID, stream name, and shard ID of the record that was throttled. For more information about partially successful responses, see [Adding Multiple Records with PutRecords](https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-add-data-to-stream.html#kinesis-using-sdk-java-putrecords) in the _Amazon Kinesis Data Streams Developer Guide_.

After you write a record to a stream, you cannot modify that record or its order within the stream.

By default, data records are accessible for 24 hours from the time that they are added to a stream. You can use IncreaseStreamRetentionPeriod or DecreaseStreamRetentionPeriod to modify this retention period.>

  take x-amz-target
    like native-string
  take put-records-input, like put-records-input

  line </#X-Amz-Target=Kinesis_20131202.PutRecords>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan put-records-input

  loot 200
    seed json, like put-records-output
    note <Success>
  loot 480
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 481
    seed json, like invalid-argument-exception
    note <InvalidArgumentException>
  loot 482
    seed json, like provisioned-throughput-exceeded-exception
    note <ProvisionedThroughputExceededException>
  loot 483
    seed json, like kms-disabled-exception
    note <KMSDisabledException>
  loot 484
    seed json, like kms-invalid-state-exception
    note <KMSInvalidStateException>
  loot 485
    seed json, like kms-access-denied-exception
    note <KMSAccessDeniedException>
  loot 486
    seed json, like kms-not-found-exception
    note <KMSNotFoundException>
  loot 487
    seed json, like kms-opt-in-required
    note <KMSOptInRequired>
  loot 488
    seed json, like kms-throttling-exception
    note <KMSThrottlingException>