
load @tunebond/snow/amazonaws.com/codeartifact/2018-09-22/base/license-info-list
  take form license-info-list

load @tunebond/snow/amazonaws.com/codeartifact/2018-09-22/base/package-format
  take form package-format

load @tunebond/snow/amazonaws.com/codeartifact/2018-09-22/base/package-name
  take form package-name

load @tunebond/snow/amazonaws.com/codeartifact/2018-09-22/base/package-namespace
  take form package-namespace

load @tunebond/snow/amazonaws.com/codeartifact/2018-09-22/base/package-version
  take form package-version

load @tunebond/snow/amazonaws.com/codeartifact/2018-09-22/base/package-version-revision
  take form package-version-revision

load @tunebond/snow/amazonaws.com/codeartifact/2018-09-22/base/package-version-status
  take form package-version-status

load @tunebond/snow/amazonaws.com/codeartifact/2018-09-22/base/string255
  take form string255

load @tunebond/snow/amazonaws.com/codeartifact/2018-09-22/base/timestamp
  take form timestamp

load @tunebond/snow/base/string
  take form string

form package-version-description, name <PackageVersionDescription>
  note <Details about a package version.>
  take format, name <format>
    like package-format
    void take
    note <The format of the package version. The valid package formats are:

- `npm`: A Node Package Manager (npm) package.

- `pypi`: A Python Package Index (PyPI) package.

- `maven`: A Maven package that contains compiled code in a distributable format, such as a JAR file.>
  take namespace, name <namespace>
    like package-namespace
    void take
    note <The namespace of the package. The package component that specifies its namespace depends on its type. For example:

- The namespace of a Maven package is its `groupId`.

- The namespace of an npm package is its `scope`.

- A Python package does not contain a corresponding component, so Python packages do not have a namespace.>
  take package-name, name <packageName>
    like package-name
    void take
    note <The name of the requested package.>
  take display-name, name <displayName>
    like string255
    void take
    note <The name of the package that is displayed. The `displayName` varies depending on the package version's format. For example, if an npm package is named `ui`, is in the namespace `vue`, and has the format `npm`, then the `displayName` is `@vue/ui`.>
  take version, name <version>
    like package-version
    void take
    note <The version of the package.>
  take summary, name <summary>
    like string
    void take
    note <A summary of the package version. The summary is extracted from the package. The information in and detail level of the summary depends on the package version's format.>
  take home-page, name <homePage>
    like string
    void take
    note <The homepage associated with the package.>
  take source-code-repository, name <sourceCodeRepository>
    like string
    void take
    note <The repository for the source code in the package version, or the source code used to build it.>
  take published-time, name <publishedTime>
    like timestamp
    void take
    note <A timestamp that contains the date and time the package version was published.>
  take licenses, name <licenses>
    like license-info-list
    void take
    note <Information about licenses associated with the package version.>
  take revision, name <revision>
    like package-version-revision
    void take
    note <The revision of the package version.>
  take status, name <status>
    like package-version-status
    void take
    note <A string that contains the status of the package version. It can be one of the following:

- `Published`

- `Unfinished`

- `Unlisted`

- `Archived`

- `Disposed`>