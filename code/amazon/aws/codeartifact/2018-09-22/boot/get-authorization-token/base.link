
load @treesurf/snow/amazonaws.com/codeartifact/2018-09-22/base/access-denied-exception
  take form access-denied-exception

load @treesurf/snow/amazonaws.com/codeartifact/2018-09-22/base/get-authorization-token-result
  take form get-authorization-token-result

load @treesurf/snow/amazonaws.com/codeartifact/2018-09-22/base/internal-server-exception
  take form internal-server-exception

load @treesurf/snow/amazonaws.com/codeartifact/2018-09-22/base/resource-not-found-exception
  take form resource-not-found-exception

load @treesurf/snow/amazonaws.com/codeartifact/2018-09-22/base/throttling-exception
  take form throttling-exception

load @treesurf/snow/amazonaws.com/codeartifact/2018-09-22/base/validation-exception
  take form validation-exception

load @treesurf/snow/base/native-integer
  take form native-integer

load @treesurf/snow/base/native-string
  take form native-string

boot get-authorization-token, name <GetAuthorizationToken>
  deed post
  note <Generates a temporary authorization token for accessing repositories in the domain. This API requires the `codeartifact:GetAuthorizationToken` and `sts:GetServiceBearerToken` permissions. For more information about authorization tokens, see [AWS CodeArtifact authentication and tokens](https://docs.aws.amazon.com/codeartifact/latest/ug/tokens-authentication.html).

CodeArtifact authorization tokens are valid for a period of 12 hours when created with the `login` command. You can call `login` periodically to refresh the token. When you create an authorization token with the `GetAuthorizationToken` API, you can set a custom authorization period, up to a maximum of 12 hours, with the `durationSeconds` parameter.

The authorization period begins after `login` or `GetAuthorizationToken` is called. If `login` or `GetAuthorizationToken` is called while assuming a role, the token lifetime is independent of the maximum session duration of the role. For example, if you call `sts assume-role` and specify a session duration of 15 minutes, then generate a CodeArtifact authorization token, the token will be valid for the full authorization period even though this is longer than the 15-minute session duration.

See [Using IAM Roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html) for more information on controlling session duration.>

  take domain
    like native-string
    note <The name of the domain that is in scope for the generated authorization token.>
  take domain-owner
    like native-string
    note <The 12-digit account number of the AWS account that owns the domain. It does not include dashes or spaces.>
    void take
  take duration
    like native-integer
    note <The time, in seconds, that the generated authorization token is valid. Valid values are `0` and any number between `900` (15 minutes) and `43200` (12 hours). A value of `0` will set the expiration of the authorization token to the same expiration of the user's role's temporary credentials.>
    void take

  line </v1/authorization-token#domain>

  find <domain>, loan domain
  find <domain-owner>, loan domain-owner
  find <duration>, loan duration

  loot 200
    seed json, like get-authorization-token-result
    note <Success>
  loot 480
    seed json, like access-denied-exception
    note <AccessDeniedException>
  loot 481
    seed json, like internal-server-exception
    note <InternalServerException>
  loot 482
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 483
    seed json, like throttling-exception
    note <ThrottlingException>
  loot 484
    seed json, like validation-exception
    note <ValidationException>