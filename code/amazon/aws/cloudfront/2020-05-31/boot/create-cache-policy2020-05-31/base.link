
load @drumwork/snow/amazonaws.com/cloudfront/2020-05-31/base/access-denied
  take form access-denied

load @drumwork/snow/amazonaws.com/cloudfront/2020-05-31/base/cache-policy-already-exists
  take form cache-policy-already-exists

load @drumwork/snow/amazonaws.com/cloudfront/2020-05-31/base/create-cache-policy-result
  take form create-cache-policy-result

load @drumwork/snow/amazonaws.com/cloudfront/2020-05-31/base/create-cache-policy2020-05-31-body
  take form create-cache-policy2020-05-31-body

load @drumwork/snow/amazonaws.com/cloudfront/2020-05-31/base/inconsistent-quantities
  take form inconsistent-quantities

load @drumwork/snow/amazonaws.com/cloudfront/2020-05-31/base/invalid-argument
  take form invalid-argument

load @drumwork/snow/amazonaws.com/cloudfront/2020-05-31/base/too-many-cache-policies
  take form too-many-cache-policies

load @drumwork/snow/amazonaws.com/cloudfront/2020-05-31/base/too-many-cookies-in-cache-policy
  take form too-many-cookies-in-cache-policy

load @drumwork/snow/amazonaws.com/cloudfront/2020-05-31/base/too-many-headers-in-cache-policy
  take form too-many-headers-in-cache-policy

load @drumwork/snow/amazonaws.com/cloudfront/2020-05-31/base/too-many-query-strings-in-cache-policy
  take form too-many-query-strings-in-cache-policy

boot create-cache-policy2020-05-31, name <CreateCachePolicy2020_05_31>
  note <Creates a cache policy.

After you create a cache policy, you can attach it to one or more cache behaviors. When it’s attached to a cache behavior, the cache policy determines the following:

- The values that CloudFront includes in the _cache key_. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.

- The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.

The headers, cookies, and query strings that are included in the cache key are automatically included in requests that CloudFront sends to the origin. CloudFront sends a request when it can’t find an object in its cache that matches the request’s cache key. If you want to send values to the origin but _not_ include them in the cache key, use `OriginRequestPolicy`.

For more information about cache policies, see [Controlling the cache key](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html) in the _Amazon CloudFront Developer Guide_.>

  take create-cache-policy2020-05-31-body, like create-cache-policy2020-05-31-body

  line </2020-05-31/cache-policy>

  seed xml, loan create-cache-policy2020-05-31-body

  loot 201
    seed xml, like create-cache-policy-result
    note <Success>
  loot 480
    seed xml, like access-denied
    note <AccessDenied>
  loot 481
    seed xml, like inconsistent-quantities
    note <InconsistentQuantities>
  loot 482
    seed xml, like invalid-argument
    note <InvalidArgument>
  loot 483
    seed xml, like cache-policy-already-exists
    note <CachePolicyAlreadyExists>
  loot 484
    seed xml, like too-many-cache-policies
    note <TooManyCachePolicies>
  loot 485
    seed xml, like too-many-headers-in-cache-policy
    note <TooManyHeadersInCachePolicy>
  loot 486
    seed xml, like too-many-cookies-in-cache-policy
    note <TooManyCookiesInCachePolicy>
  loot 487
    seed xml, like too-many-query-strings-in-cache-policy
    note <TooManyQueryStringsInCachePolicy>