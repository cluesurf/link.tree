
load @nerdbond/snow/amazonaws.com/ec2/2016-11-15/base/allocation-strategy
  take form allocation-strategy

load @nerdbond/snow/amazonaws.com/ec2/2016-11-15/base/date-time
  take form date-time

load @nerdbond/snow/amazonaws.com/ec2/2016-11-15/base/double
  take form double

load @nerdbond/snow/amazonaws.com/ec2/2016-11-15/base/excess-capacity-termination-policy
  take form excess-capacity-termination-policy

load @nerdbond/snow/amazonaws.com/ec2/2016-11-15/base/fleet-type
  take form fleet-type

load @nerdbond/snow/amazonaws.com/ec2/2016-11-15/base/instance-interruption-behavior
  take form instance-interruption-behavior

load @nerdbond/snow/amazonaws.com/ec2/2016-11-15/base/launch-specs-list
  take form launch-specs-list

load @nerdbond/snow/amazonaws.com/ec2/2016-11-15/base/launch-template-config-list
  take form launch-template-config-list

load @nerdbond/snow/amazonaws.com/ec2/2016-11-15/base/load-balancers-config
  take form load-balancers-config

load @nerdbond/snow/amazonaws.com/ec2/2016-11-15/base/on-demand-allocation-strategy
  take form on-demand-allocation-strategy

load @nerdbond/snow/amazonaws.com/ec2/2016-11-15/base/spot-maintenance-strategies
  take form spot-maintenance-strategies

load @nerdbond/snow/amazonaws.com/ec2/2016-11-15/base/tag-specification-list
  take form tag-specification-list

load @nerdbond/snow/base/boolean
  take form boolean

load @nerdbond/snow/base/integer
  take form integer

load @nerdbond/snow/base/string
  take form string

form spot-fleet-request-config-data, name <SpotFleetRequestConfigData>
  note <Describes the configuration of a Spot Fleet request.>
  take allocation-strategy, name <AllocationStrategy>
    like allocation-strategy
    void take
    note <Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the Spot Fleet request.

If the allocation strategy is `lowestPrice`, Spot Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy.

If the allocation strategy is `diversified`, Spot Fleet launches instances from all the Spot Instance pools that you specify.

If the allocation strategy is `capacityOptimized` (recommended), Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching. To give certain instance types a higher chance of launching first, use `capacityOptimizedPrioritized`. Set a priority for each instance type by using the `Priority` parameter for `LaunchTemplateOverrides`. You can assign the same priority to different `LaunchTemplateOverrides`. EC2 implements the priorities on a best-effort basis, but optimizes for capacity first. `capacityOptimizedPrioritized` is supported only if your Spot Fleet uses a launch template. Note that if the `OnDemandAllocationStrategy` is set to `prioritized`, the same priority is applied when fulfilling On-Demand capacity.>
    host xml
      host name, text <allocationStrategy>
  take on-demand-allocation-strategy, name <OnDemandAllocationStrategy>
    like on-demand-allocation-strategy
    void take
    note <The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify `lowestPrice`, Spot Fleet uses price to determine the order, launching the lowest price first. If you specify `prioritized`, Spot Fleet uses the priority that you assign to each Spot Fleet launch template override, launching the highest priority first. If you do not specify a value, Spot Fleet defaults to `lowestPrice`.>
    host xml
      host name, text <onDemandAllocationStrategy>
  take spot-maintenance-strategies, name <SpotMaintenanceStrategies>
    like spot-maintenance-strategies
    void take
    note <The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.>
    host xml
      host name, text <spotMaintenanceStrategies>
  take client-token, name <ClientToken>
    like string
    void take
    note <A unique, case-sensitive identifier that you provide to ensure the idempotency of your listings. This helps to avoid duplicate listings. For more information, see [Ensuring Idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).>
    host xml
      host name, text <clientToken>
  take excess-capacity-termination-policy, name <ExcessCapacityTerminationPolicy>
    like excess-capacity-termination-policy
    void take
    note <Indicates whether running Spot Instances should be terminated if you decrease the target capacity of the Spot Fleet request below the current size of the Spot Fleet.>
    host xml
      host name, text <excessCapacityTerminationPolicy>
  take fulfilled-capacity, name <FulfilledCapacity>
    like double
    void take
    note <The number of units fulfilled by this request compared to the set target capacity. You cannot set this value.>
    host xml
      host name, text <fulfilledCapacity>
  take on-demand-fulfilled-capacity, name <OnDemandFulfilledCapacity>
    like double
    void take
    note <The number of On-Demand units fulfilled by this request compared to the set target On-Demand capacity.>
    host xml
      host name, text <onDemandFulfilledCapacity>
  take iam-fleet-role, name <IamFleetRole>
    like string
    note <The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that grants the Spot Fleet the permission to request, launch, terminate, and tag instances on your behalf. For more information, see [Spot Fleet prerequisites](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html#spot-fleet-prerequisites) in the _Amazon EC2 User Guide for Linux Instances_. Spot Fleet can terminate Spot Instances on your behalf when you cancel its Spot Fleet request using [CancelSpotFleetRequests](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CancelSpotFleetRequests) or when the Spot Fleet request expires, if you set `TerminateInstancesWithExpiration`.>
    host xml
      host name, text <iamFleetRole>
  take launch-specifications, name <LaunchSpecifications>
    like launch-specs-list
    void take
    note <The launch specifications for the Spot Fleet request. If you specify `LaunchSpecifications`, you can't specify `LaunchTemplateConfigs`. If you include On-Demand capacity in your request, you must use `LaunchTemplateConfigs`.>
    host xml
      host name, text <launchSpecifications>
  take launch-template-configs, name <LaunchTemplateConfigs>
    like launch-template-config-list
    void take
    note <The launch template and overrides. If you specify `LaunchTemplateConfigs`, you can't specify `LaunchSpecifications`. If you include On-Demand capacity in your request, you must use `LaunchTemplateConfigs`.>
    host xml
      host name, text <launchTemplateConfigs>
  take spot-price, name <SpotPrice>
    like string
    void take
    note <The maximum price per unit hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.>
    host xml
      host name, text <spotPrice>
  take target-capacity, name <TargetCapacity>
    like integer
    note <The number of units to request for the Spot Fleet. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.>
    host xml
      host name, text <targetCapacity>
  take on-demand-target-capacity, name <OnDemandTargetCapacity>
    like integer
    void take
    note <The number of On-Demand units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.>
    host xml
      host name, text <onDemandTargetCapacity>
  take on-demand-max-total-price, name <OnDemandMaxTotalPrice>
    like string
    void take
    note <The maximum amount per hour for On-Demand Instances that you're willing to pay. You can use the `onDemandMaxTotalPrice` parameter, the `spotMaxTotalPrice` parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.>
    host xml
      host name, text <onDemandMaxTotalPrice>
  take spot-max-total-price, name <SpotMaxTotalPrice>
    like string
    void take
    note <The maximum amount per hour for Spot Instances that you're willing to pay. You can use the `spotdMaxTotalPrice` parameter, the `onDemandMaxTotalPrice` parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.>
    host xml
      host name, text <spotMaxTotalPrice>
  take terminate-instances-with-expiration, name <TerminateInstancesWithExpiration>
    like boolean
    void take
    note <Indicates whether running Spot Instances are terminated when the Spot Fleet request expires.>
    host xml
      host name, text <terminateInstancesWithExpiration>
  take type, name <Type>
    like fleet-type
    void take
    note <The type of request. Indicates whether the Spot Fleet only requests the target capacity or also attempts to maintain it. When this value is `request`, the Spot Fleet only places the required requests. It does not attempt to replenish Spot Instances if capacity is diminished, nor does it submit requests in alternative Spot pools if capacity is not available. When this value is `maintain`, the Spot Fleet maintains the target capacity. The Spot Fleet places the required requests to meet capacity and automatically replenishes any interrupted instances. Default: `maintain`. `instant` is listed but is not used by Spot Fleet.>
    host xml
      host name, text <type>
  take valid-from, name <ValidFrom>
    like date-time
    void take
    note <The start date and time of the request, in UTC format (_YYYY_-_MM_-_DD_T_HH_:_MM_:_SS_Z). By default, Amazon EC2 starts fulfilling the request immediately.>
    host xml
      host name, text <validFrom>
  take valid-until, name <ValidUntil>
    like date-time
    void take
    note <The end date and time of the request, in UTC format (_YYYY_-_MM_-_DD_T_HH_:_MM_:_SS_Z). After the end date and time, no new Spot Instance requests are placed or able to fulfill the request. If no value is specified, the Spot Fleet request remains until you cancel it.>
    host xml
      host name, text <validUntil>
  take replace-unhealthy-instances, name <ReplaceUnhealthyInstances>
    like boolean
    void take
    note <Indicates whether Spot Fleet should replace unhealthy instances.>
    host xml
      host name, text <replaceUnhealthyInstances>
  take instance-interruption-behavior, name <InstanceInterruptionBehavior>
    like instance-interruption-behavior
    void take
    note <The behavior when a Spot Instance is interrupted. The default is `terminate`.>
    host xml
      host name, text <instanceInterruptionBehavior>
  take load-balancers-config, name <LoadBalancersConfig>
    like load-balancers-config
    void take
    note <One or more Classic Load Balancers and target groups to attach to the Spot Fleet request. Spot Fleet registers the running Spot Instances with the specified Classic Load Balancers and target groups.

With Network Load Balancers, Spot Fleet cannot register instances that have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.>
    host xml
      host name, text <loadBalancersConfig>
  take instance-pools-to-use-count, name <InstancePoolsToUseCount>
    like integer
    void take
    note <The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot **AllocationStrategy** is set to `lowest-price`. Spot Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.

Note that Spot Fleet attempts to draw Spot Instances from the number of pools that you specify on a best effort basis. If a pool runs out of Spot capacity before fulfilling your target capacity, Spot Fleet will continue to fulfill your request by drawing from the next cheapest pool. To ensure that your target capacity is met, you might receive Spot Instances from more than the number of pools that you specified. Similarly, if most of the pools have no Spot capacity, you might receive your full target capacity from fewer than the number of pools that you specified.>
    host xml
      host name, text <instancePoolsToUseCount>
  take context, name <Context>
    like string
    void take
    note <Reserved.>
    host xml
      host name, text <context>
  take tag-specifications, name <TagSpecifications>
    like tag-specification-list
    void take
    note <The key-value pair for tagging the Spot Fleet request on creation. The value for `ResourceType` must be `spot-fleet-request`, otherwise the Spot Fleet request fails. To tag instances at launch, specify the tags in the [launch template](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template) (valid only if you use `LaunchTemplateConfigs`) or in the [`SpotFleetTagSpecification`](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetTagSpecification.html) (valid only if you use `LaunchSpecifications`). For information about tagging after launch, see [Tagging Your Resources](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources).>
    host xml
      host name, text <TagSpecification>
