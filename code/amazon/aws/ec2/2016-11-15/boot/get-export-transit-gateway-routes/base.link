
load @tunebond/snow/amazonaws.com/ec2/2016-11-15/base/export-transit-gateway-routes-result
  take form export-transit-gateway-routes-result

load @tunebond/snow/amazonaws.com/ec2/2016-11-15/base/filter
  take form filter

load @tunebond/snow/base/list
  take form list

load @tunebond/snow/base/native-boolean
  take form native-boolean

load @tunebond/snow/base/native-string
  take form native-string

boot get-export-transit-gateway-routes, name <GET_ExportTransitGatewayRoutes>
  deed get
  note <Exports routes from the specified transit gateway route table to the specified S3 bucket. By default, all routes are exported. Alternatively, you can filter by CIDR range.

The routes are saved to the specified bucket in a JSON file. For more information, see [Export Route Tables to Amazon S3](https://docs.aws.amazon.com/vpc/latest/tgw/tgw-route-tables.html#tgw-export-route-tables) in _Transit Gateways_.>

  take transit-gateway-route-table-id
    like native-string
    note <The ID of the route table.>
  take filter
    like list
      like filter
    note <One or more filters. The possible values are:

- `attachment.transit-gateway-attachment-id` - The id of the transit gateway attachment.

- `attachment.resource-id` - The resource id of the transit gateway attachment.

- `route-search.exact-match` - The exact match of the specified filter.

- `route-search.longest-prefix-match` - The longest prefix that matches the route.

- `route-search.subnet-of-match` - The routes with a subnet that match the specified CIDR filter.

- `route-search.supernet-of-match` - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.

- `state` - The state of the route (`active` | `blackhole`).

- `transit-gateway-route-destination-cidr-block` - The CIDR range.

- `type` - The type of route (`propagated` | `static`).>
    void take
  take s3-bucket
    like native-string
    note <The name of the S3 bucket.>
  take dry-run
    like native-boolean
    note <Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=ExportTransitGatewayRoutes>

  find <TransitGatewayRouteTableId>, loan transit-gateway-route-table-id
  find <Filter>, loan filter
  find <S3Bucket>, loan s3-bucket
  find <DryRun>, loan dry-run
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like export-transit-gateway-routes-result
    note <Success>
