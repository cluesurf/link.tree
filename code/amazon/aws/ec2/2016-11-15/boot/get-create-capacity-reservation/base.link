
load @drumwork/snow/amazonaws.com/ec2/2016-11-15/base/create-capacity-reservation-result
  take form create-capacity-reservation-result

load @drumwork/snow/amazonaws.com/ec2/2016-11-15/base/tag-specification
  take form tag-specification

load @drumwork/snow/base/list
  take form list

load @drumwork/snow/base/native-boolean
  take form native-boolean

load @drumwork/snow/base/native-integer
  take form native-integer

load @drumwork/snow/base/native-string
  take form native-string

boot get-create-capacity-reservation, name <GET_CreateCapacityReservation>
  deed get
  note <Creates a new Capacity Reservation with the specified attributes.

Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration. This gives you the flexibility to selectively add capacity reservations and still get the Regional RI discounts for that usage. By creating Capacity Reservations, you ensure that you always have access to Amazon EC2 capacity when you need it, for as long as you need it. For more information, see [Capacity Reservations](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html) in the _Amazon EC2 User Guide_.

Your request to create a Capacity Reservation could fail if Amazon EC2 does not have sufficient capacity to fulfill the request. If your request fails due to Amazon EC2 capacity constraints, either try again at a later time, try in a different Availability Zone, or request a smaller capacity reservation. If your application is flexible across instance types and sizes, try to create a Capacity Reservation with different instance attributes.

Your request could also fail if the requested quantity exceeds your On-Demand Instance limit for the selected instance type. If your request fails due to limit constraints, increase your On-Demand Instance limit for the required instance type and try again. For more information about increasing your instance limits, see [Amazon EC2 Service Quotas](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html) in the _Amazon EC2 User Guide_.>

  take client-token
    like native-string
    note <Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see [Ensure Idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).>
    void take
  take instance-type
    like native-string
    note <The instance type for which to reserve capacity. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the _Amazon EC2 User Guide_.>
  take instance-platform
    like native-string
    note <The type of operating system for which to reserve capacity.>
  take availability-zone
    like native-string
    note <The Availability Zone in which to create the Capacity Reservation.>
    void take
  take availability-zone-id
    like native-string
    note <The ID of the Availability Zone in which to create the Capacity Reservation.>
    void take
  take tenancy
    like native-string
    note <Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:

- `default` - The Capacity Reservation is created on hardware that is shared with other Amazon Web Services accounts.

- `dedicated` - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single Amazon Web Services account.>
    void take
  take instance-count
    like native-integer
    note <The number of instances for which to reserve capacity.

Valid range: 1 - 1000>
  take ebs-optimized
    like native-boolean
    note <Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.>
    void take
  take ephemeral-storage
    like native-boolean
    note <Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.>
    void take
  take end-date
    like native-string
    note <The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to `expired` when it reaches its end date and time.

You must provide an `EndDate` value if `EndDateType` is `limited`. Omit `EndDate` if `EndDateType` is `unlimited`.

If the `EndDateType` is `limited`, the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.>
    void take
  take end-date-type
    like native-string
    note <Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:

- `unlimited` - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an `EndDate` if the `EndDateType` is `unlimited`.

- `limited` - The Capacity Reservation expires automatically at a specified date and time. You must provide an `EndDate` value if the `EndDateType` value is `limited`.>
    void take
  take instance-match-criteria
    like native-string
    note <Indicates the type of instance launches that the Capacity Reservation accepts. The options include:

- `open` - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.

- `targeted` - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.

Default: `open`>
    void take
  take tag-specifications
    like list
      like tag-specification
    note <The tags to apply to the Capacity Reservation during launch.>
    void take
  take dry-run
    like native-boolean
    note <Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.>
    void take
  take outpost-arn
    like native-string
    note <The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=CreateCapacityReservation>

  find <ClientToken>, loan client-token
  find <InstanceType>, loan instance-type
  find <InstancePlatform>, loan instance-platform
  find <AvailabilityZone>, loan availability-zone
  find <AvailabilityZoneId>, loan availability-zone-id
  find <Tenancy>, loan tenancy
  find <InstanceCount>, loan instance-count
  find <EbsOptimized>, loan ebs-optimized
  find <EphemeralStorage>, loan ephemeral-storage
  find <EndDate>, loan end-date
  find <EndDateType>, loan end-date-type
  find <InstanceMatchCriteria>, loan instance-match-criteria
  find <TagSpecifications>, loan tag-specifications
  find <DryRun>, loan dry-run
  find <OutpostArn>, loan outpost-arn
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like create-capacity-reservation-result
    note <Success>