
load @treesurf/snow/amazonaws.com/ec2/2016-11-15/base/describe-instance-status-result
  take form describe-instance-status-result

load @treesurf/snow/amazonaws.com/ec2/2016-11-15/base/filter
  take form filter

load @treesurf/snow/amazonaws.com/ec2/2016-11-15/base/instance-id
  take form instance-id

load @treesurf/snow/base/list
  take form list

load @treesurf/snow/base/native-boolean
  take form native-boolean

load @treesurf/snow/base/native-integer
  take form native-integer

load @treesurf/snow/base/native-string
  take form native-string

boot get-describe-instance-status, name <GET_DescribeInstanceStatus>
  deed get
  note <Describes the status of the specified instances or all of your instances. By default, only running instances are described, unless you specifically indicate to return the status of all instances.

Instance status includes the following components:

- **Status checks** - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see [Status checks for your instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html) and [Troubleshooting instances with failed status checks](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html) in the _Amazon EC2 User Guide_.

- **Scheduled events** - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see [Scheduled events for your instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html) in the _Amazon EC2 User Guide_.

- **Instance state** - You can manage your instances from the moment you launch them through their termination. For more information, see [Instance lifecycle](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html) in the _Amazon EC2 User Guide_.>

  take filter
    like list
      like filter
    note <The filters.

- `availability-zone` - The Availability Zone of the instance.

- `event.code` - The code for the scheduled event (`instance-reboot` | `system-reboot` | `system-maintenance` | `instance-retirement` | `instance-stop`).

- `event.description` - A description of the event.

- `event.instance-event-id` - The ID of the event whose date and time you are modifying.

- `event.not-after` - The latest end time for the scheduled event (for example, `2014-09-15T17:15:20.000Z`).

- `event.not-before` - The earliest start time for the scheduled event (for example, `2014-09-15T17:15:20.000Z`).

- `event.not-before-deadline` - The deadline for starting the event (for example, `2014-09-15T17:15:20.000Z`).

- `instance-state-code` - The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).

- `instance-state-name` - The state of the instance (`pending` | `running` | `shutting-down` | `terminated` | `stopping` | `stopped`).

- `instance-status.reachability` - Filters on instance status where the name is `reachability` (`passed` | `failed` | `initializing` | `insufficient-data`).

- `instance-status.status` - The status of the instance (`ok` | `impaired` | `initializing` | `insufficient-data` | `not-applicable`).

- `system-status.reachability` - Filters on system status where the name is `reachability` (`passed` | `failed` | `initializing` | `insufficient-data`).

- `system-status.status` - The system status of the instance (`ok` | `impaired` | `initializing` | `insufficient-data` | `not-applicable`).>
    void take
  take instance-id
    like list
      like instance-id
    note <The instance IDs.

Default: Describes all your instances.

Constraints: Maximum 100 explicitly specified instance IDs.>
    void take
  take max-results
    like native-integer
    note <The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned `NextToken` value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.>
    void take
  take next-token
    like native-string
    note <The token to retrieve the next page of results.>
    void take
  take dry-run
    like native-boolean
    note <Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.>
    void take
  take include-all-instances
    like native-boolean
    note <When `true`, includes the health status for all instances. When `false`, includes the health status for running instances only.

Default: `false`>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=DescribeInstanceStatus>

  find <Filter>, loan filter
  find <InstanceId>, loan instance-id
  find <MaxResults>, loan max-results
  find <NextToken>, loan next-token
  find <DryRun>, loan dry-run
  find <IncludeAllInstances>, loan include-all-instances
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like describe-instance-status-result
    note <Success>