
load @wavebond/snow/amazonaws.com/sdb/2009-04-15/base/no-such-domain
  take form no-such-domain

load @wavebond/snow/amazonaws.com/sdb/2009-04-15/base/number-submitted-attributes-exceeded
  take form number-submitted-attributes-exceeded

load @wavebond/snow/base/native-string
  take form native-string

boot post-batch-put-attributes, name <POST_BatchPutAttributes>
  deed post
  note <The `BatchPutAttributes` operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple PutAttribute operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput.

The client may specify the item name with the `Item.X.ItemName` parameter. The client may specify new attributes using a combination of the `Item.X.Attribute.Y.Name` and `Item.X.Attribute.Y.Value` parameters. The client may specify the first attribute for the first item using the parameters `Item.0.Attribute.0.Name` and `Item.0.Attribute.0.Value`, and for the second attribute for the first item by the parameters `Item.0.Attribute.1.Name` and `Item.0.Attribute.1.Value`, and so on.

Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes `{ "first_name", "first_value" }` and `{ "first_name", "second_value" }`. However, it cannot have two attribute instances where both the `Item.X.Attribute.Y.Name` and `Item.X.Attribute.Y.Value` are the same.

Optionally, the requester can supply the `Replace` parameter for each individual value. Setting this value to `true` will cause the new attribute values to replace the existing attribute values. For example, if an item `I` has the attributes `{ 'a', '1' }, { 'b', '2'}` and `{ 'b', '3' }` and the requester does a BatchPutAttributes of `{'I', 'b', '4' }` with the Replace parameter set to true, the final attributes of the item will be `{ 'a', '1' }` and `{ 'b', '4' }`, replacing the previous values of the 'b' attribute with the new value.

You cannot specify an empty string as an item or as an attribute name. The `BatchPutAttributes` operation succeeds or fails in its entirety. There are no partial puts. This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using `Expected.X.Name`, `Expected.X.Value`, or `Expected.X.Exists`.

You can execute multiple `BatchPutAttributes` operations and other operations in parallel. However, large numbers of concurrent `BatchPutAttributes` calls can result in Service Unavailable (503) responses.

The following limitations are enforced for this operation:

- 256 attribute name-value pairs per item
- 1 MB request size
- 1 billion attributes per domain
- 10 GB of total user data storage per domain
- 25 item limit per `BatchPutAttributes` operation>

  take action
    like native-string
  take version
    like native-string
  take batch-put-attributes-request, like batch-put-attributes-request
    void take

  line </#Action=BatchPutAttributes>

  find <Action>, loan action
  find <Version>, loan version

  seed xml, loan batch-put-attributes-request

  loot 200
    note <Success>
  loot 400
    seed xml, like no-such-domain
    note <NoSuchDomain>
  loot 409
    seed xml, like number-submitted-attributes-exceeded
    note <NumberSubmittedAttributesExceeded>