
load @treesurf/snow/amazonaws.com/opsworks/2013-02-18/base/app-attributes
  take form app-attributes

load @treesurf/snow/amazonaws.com/opsworks/2013-02-18/base/app-type
  take form app-type

load @treesurf/snow/amazonaws.com/opsworks/2013-02-18/base/data-sources
  take form data-sources

load @treesurf/snow/amazonaws.com/opsworks/2013-02-18/base/environment-variables
  take form environment-variables

load @treesurf/snow/amazonaws.com/opsworks/2013-02-18/base/source
  take form source

load @treesurf/snow/amazonaws.com/opsworks/2013-02-18/base/ssl-configuration
  take form ssl-configuration

load @treesurf/snow/amazonaws.com/opsworks/2013-02-18/base/strings
  take form strings

load @treesurf/snow/base/boolean
  take form boolean

load @treesurf/snow/base/string
  take form string

form create-app-request, name <CreateAppRequest>
  take stack-id, name <StackId>
    like string
    note <The stack ID.>
  take shortname, name <Shortname>
    like string
    void take
    note <The app's short name.>
  take name, name <Name>
    like string
    note <The app name.>
  take description, name <Description>
    like string
    void take
    note <A description of the app.>
  take data-sources, name <DataSources>
    like data-sources
    void take
    note <The app's data source.>
  take type, name <Type>
    like app-type
    note <The app type. Each supported type is associated with a particular layer. For example, PHP applications are associated with a PHP layer. AWS OpsWorks Stacks deploys an application to those instances that are members of the corresponding layer. If your app isn't one of the standard types, or you prefer to implement your own Deploy recipes, specify `other`.>
  take app-source, name <AppSource>
    like source
    void take
    note <A `Source` object that specifies the app repository.>
  take domains, name <Domains>
    like strings
    void take
    note <The app virtual host settings, with multiple domains separated by commas. For example: `'www.example.com, example.com'`>
  take enable-ssl, name <EnableSsl>
    like boolean
    void take
    note <Whether to enable SSL for the app.>
  take ssl-configuration, name <SslConfiguration>
    like ssl-configuration
    void take
    note <An `SslConfiguration` object with the SSL configuration.>
  take attributes, name <Attributes>
    like app-attributes
    void take
    note <One or more user-defined key/value pairs to be added to the stack attributes.>
  take environment, name <Environment>
    like environment-variables
    void take
    note <An array of `EnvironmentVariable` objects that specify environment variables to be associated with the app. After you deploy the app, these variables are defined on the associated app server instance. For more information, see [Environment Variables](https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-creating.html#workingapps-creating-environment).

There is no specific limit on the number of environment variables. However, the size of the associated data structure - which includes the variables' names, values, and protected flag values - cannot exceed 20 KB. This limit should accommodate most if not all use cases. Exceeding it will cause an exception with the message, "Environment: is too large (maximum is 20KB)."

If you have specified one or more environment variables, you cannot modify the stack's Chef version.>