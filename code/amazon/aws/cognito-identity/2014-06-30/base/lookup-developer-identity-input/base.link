
load @tunebond/snow/amazonaws.com/cognito-identity/2014-06-30/base/developer-user-identifier
  take form developer-user-identifier

load @tunebond/snow/amazonaws.com/cognito-identity/2014-06-30/base/identity-id
  take form identity-id

load @tunebond/snow/amazonaws.com/cognito-identity/2014-06-30/base/identity-pool-id
  take form identity-pool-id

load @tunebond/snow/amazonaws.com/cognito-identity/2014-06-30/base/pagination-key
  take form pagination-key

load @tunebond/snow/amazonaws.com/cognito-identity/2014-06-30/base/query-limit
  take form query-limit

form lookup-developer-identity-input, name <LookupDeveloperIdentityInput>
  note <Input to the `LookupDeveloperIdentityInput` action.>
  take identity-pool-id, name <IdentityPoolId>
    like identity-pool-id
    note <An identity pool ID in the format REGION:GUID.>
  take identity-id, name <IdentityId>
    like identity-id
    void take
    note <A unique identifier in the format REGION:GUID.>
  take developer-user-identifier, name <DeveloperUserIdentifier>
    like developer-user-identifier
    void take
    note <A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users.>
  take max-results, name <MaxResults>
    like query-limit
    void take
    note <The maximum number of identities to return.>
  take next-token, name <NextToken>
    like pagination-key
    void take
    note <A pagination token. The first call you make will have `NextToken` set to null. After that the service will return `NextToken` values as needed. For example, let's say you make a request with `MaxResults` set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.>
