
load @nerdbond/snow/amazonaws.com/iam/2010-05-08/base/certificate-body-type
  take form certificate-body-type

load @nerdbond/snow/amazonaws.com/iam/2010-05-08/base/certificate-chain-type
  take form certificate-chain-type

load @nerdbond/snow/amazonaws.com/iam/2010-05-08/base/path-type
  take form path-type

load @nerdbond/snow/amazonaws.com/iam/2010-05-08/base/private-key-type
  take form private-key-type

load @nerdbond/snow/amazonaws.com/iam/2010-05-08/base/server-certificate-name-type
  take form server-certificate-name-type

load @nerdbond/snow/amazonaws.com/iam/2010-05-08/base/tag-list-type
  take form tag-list-type

form upload-server-certificate-request, name <UploadServerCertificateRequest>
  take path, name <Path>
    like path-type
    void take
    note <The path for the server certificate. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the _IAM User Guide_.

This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (`\u0021`) through the DEL character (`\u007F`), including most punctuation characters, digits, and upper and lowercased letters.

If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the `path` parameter. The path must begin with `/cloudfront` and must include a trailing slash (for example, `/cloudfront/test/`).>
  take server-certificate-name, name <ServerCertificateName>
    like server-certificate-name-type
    note <The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.

This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@->
  take certificate-body, name <CertificateBody>
    like certificate-body-type
    note <The contents of the public key certificate in PEM-encoded format.

The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:

- Any printable ASCII character ranging from the space character (`\u0020`) through the end of the ASCII character range

- The printable characters in the Basic Latin and Latin-1 Supplement character set (through `\u00FF`)

- The special characters tab (`\u0009`), line feed (`\u000A`), and carriage return (`\u000D`)>
  take private-key, name <PrivateKey>
    like private-key-type
    note <The contents of the private key in PEM-encoded format.

The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:

- Any printable ASCII character ranging from the space character (`\u0020`) through the end of the ASCII character range

- The printable characters in the Basic Latin and Latin-1 Supplement character set (through `\u00FF`)

- The special characters tab (`\u0009`), line feed (`\u000A`), and carriage return (`\u000D`)>
  take certificate-chain, name <CertificateChain>
    like certificate-chain-type
    void take
    note <The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.

The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:

- Any printable ASCII character ranging from the space character (`\u0020`) through the end of the ASCII character range

- The printable characters in the Basic Latin and Latin-1 Supplement character set (through `\u00FF`)

- The special characters tab (`\u0009`), line feed (`\u000A`), and carriage return (`\u000D`)>
  take tags, name <Tags>
    like tag-list-type
    void take
    note <A list of tags that you want to attach to the new IAM server certificate resource. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the _IAM User Guide_.

If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.>