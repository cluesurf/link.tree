
load @tunebond/snow/amazonaws.com/iam/2010-05-08/base/list-access-keys-response
  take form list-access-keys-response

load @tunebond/snow/amazonaws.com/iam/2010-05-08/base/no-such-entity-exception
  take form no-such-entity-exception

load @tunebond/snow/amazonaws.com/iam/2010-05-08/base/service-failure-exception
  take form service-failure-exception

load @tunebond/snow/base/native-string
  take form native-string

boot post-list-access-keys, name <POST_ListAccessKeys>
  deed post
  note <Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.

Although each user is limited to a small number of keys, you can still paginate the results using the `MaxItems` and `Marker` parameters.

If the `UserName` field is not specified, the user name is determined implicitly based on the Amazon Web Services access key ID used to sign the request. This operation works for access keys under the account. Consequently, you can use this operation to manage account root user credentials even if the account has no associated users.

To ensure the security of your account, the secret access key is accessible only during key and user creation.>

  take max-items
    like native-string
    note <Pagination limit>
    void take
  take marker
    like native-string
    note <Pagination token>
    void take
  take action
    like native-string
  take version
    like native-string
  take list-access-keys-request, like list-access-keys-request
    void take

  line </#Action=ListAccessKeys>

  find <MaxItems>, loan max-items
  find <Marker>, loan marker
  find <Action>, loan action
  find <Version>, loan version

  seed xml, loan list-access-keys-request

  loot 200
    seed xml, like list-access-keys-response
    note <Success>
  loot 480
    seed xml, like no-such-entity-exception
    note <NoSuchEntityException>
  loot 481
    seed xml, like service-failure-exception
    note <ServiceFailureException>