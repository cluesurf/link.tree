
load @termsurf/snow/amazonaws.com/iam/2010-05-08/base/duplicate-certificate-exception
  take form duplicate-certificate-exception

load @termsurf/snow/amazonaws.com/iam/2010-05-08/base/entity-already-exists-exception
  take form entity-already-exists-exception

load @termsurf/snow/amazonaws.com/iam/2010-05-08/base/invalid-certificate-exception
  take form invalid-certificate-exception

load @termsurf/snow/amazonaws.com/iam/2010-05-08/base/limit-exceeded-exception
  take form limit-exceeded-exception

load @termsurf/snow/amazonaws.com/iam/2010-05-08/base/malformed-certificate-exception
  take form malformed-certificate-exception

load @termsurf/snow/amazonaws.com/iam/2010-05-08/base/no-such-entity-exception
  take form no-such-entity-exception

load @termsurf/snow/amazonaws.com/iam/2010-05-08/base/service-failure-exception
  take form service-failure-exception

load @termsurf/snow/amazonaws.com/iam/2010-05-08/base/upload-signing-certificate-response
  take form upload-signing-certificate-response

load @termsurf/snow/base/native-string
  take form native-string

boot get-upload-signing-certificate, name <GET_UploadSigningCertificate>
  deed get
  note <Uploads an X.509 signing certificate and associates it with the specified IAM user. Some Amazon Web Services services require you to use certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is `Active`.

For information about when you would use an X.509 signing certificate, see [Managing server certificates in IAM](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html) in the _IAM User Guide_.

If the `UserName` is not specified, the IAM user name is determined implicitly based on the Amazon Web Services access key ID used to sign the request. This operation works for access keys under the account. Consequently, you can use this operation to manage account root user credentials even if the account has no associated users.

Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling `UploadSigningCertificate`. For information about setting up signatures and authorization through the API, see [Signing Amazon Web Services API requests](https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html) in the _Amazon Web Services General Reference_. For general information about using the Query API with IAM, see [Making query requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html) in the _IAM User Guide_.>

  take user-name
    like native-string
    note <The name of the user the signing certificate is for.

This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@->
    void take
  take certificate-body
    like native-string
    note <The contents of the signing certificate.

The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:

- Any printable ASCII character ranging from the space character (`\u0020`) through the end of the ASCII character range

- The printable characters in the Basic Latin and Latin-1 Supplement character set (through `\u00FF`)

- The special characters tab (`\u0009`), line feed (`\u000A`), and carriage return (`\u000D`)>
  take action
    like native-string
  take version
    like native-string

  line </#Action=UploadSigningCertificate>

  find <UserName>, loan user-name
  find <CertificateBody>, loan certificate-body
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like upload-signing-certificate-response
    note <Success>
  loot 480
    seed xml, like limit-exceeded-exception
    note <LimitExceededException>
  loot 481
    seed xml, like entity-already-exists-exception
    note <EntityAlreadyExistsException>
  loot 482
    seed xml, like malformed-certificate-exception
    note <MalformedCertificateException>
  loot 483
    seed xml, like invalid-certificate-exception
    note <InvalidCertificateException>
  loot 484
    seed xml, like duplicate-certificate-exception
    note <DuplicateCertificateException>
  loot 485
    seed xml, like no-such-entity-exception
    note <NoSuchEntityException>
  loot 486
    seed xml, like service-failure-exception
    note <ServiceFailureException>