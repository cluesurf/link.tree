
load @drumwork/snow/amazonaws.com/iam/2010-05-08/base/list-policies-response
  take form list-policies-response

load @drumwork/snow/amazonaws.com/iam/2010-05-08/base/service-failure-exception
  take form service-failure-exception

load @drumwork/snow/base/native-boolean
  take form native-boolean

load @drumwork/snow/base/native-integer
  take form native-integer

load @drumwork/snow/base/native-string
  take form native-string

boot get-list-policies, name <GET_ListPolicies>
  note <Lists all the managed policies that are available in your account, including your own customer-defined managed policies and all Amazon Web Services managed policies.

You can filter the list of policies that is returned using the optional `OnlyAttached`, `Scope`, and `PathPrefix` parameters. For example, to list only the customer managed policies in your Amazon Web Services account, set `Scope` to `Local`. To list only Amazon Web Services managed policies, set `Scope` to `AWS`.

You can paginate the results using the `MaxItems` and `Marker` parameters.

For more information about managed policies, see [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the _IAM User Guide_.

IAM resource-listing operations return a subset of the available attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a customer manged policy, see GetPolicy.>

  take scope
    like native-string
    note <The scope to use for filtering the results.

To list only Amazon Web Services managed policies, set `Scope` to `AWS`. To list only the customer managed policies in your account, set `Scope` to `Local`.

This parameter is optional. If it is not included, or if it is set to `All`, all policies are returned.>
    void take
  take only-attached
    like native-boolean
    note <A flag to filter the results to only the attached policies.

When `OnlyAttached` is `true`, the returned list contains only the policies that are attached to an IAM user, group, or role. When `OnlyAttached` is `false`, or when the parameter is not included, all policies are returned.>
    void take
  take path-prefix
    like native-string
    note <The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (`\u0021`) through the DEL character (`\u007F`), including most punctuation characters, digits, and upper and lowercased letters.>
    void take
  take policy-usage-filter
    like native-string
    note <The policy usage method to use for filtering the results.

To list only permissions policies, set `PolicyUsageFilter` to `PermissionsPolicy`. To list only the policies used to set permissions boundaries, set the value to `PermissionsBoundary`.

This parameter is optional. If it is not included, all policies are returned.>
    void take
  take marker
    like native-string
    note <Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the `Marker` element in the response that you received to indicate where the next call should start.>
    void take
  take max-items
    like native-integer
    note <Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the `IsTruncated` response element is `true`.

If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the `IsTruncated` response element returns `true`, and `Marker` contains a value to include in the subsequent call that tells the service where to continue from.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=ListPolicies>

  find <Scope>, loan scope
  find <OnlyAttached>, loan only-attached
  find <PathPrefix>, loan path-prefix
  find <PolicyUsageFilter>, loan policy-usage-filter
  find <Marker>, loan marker
  find <MaxItems>, loan max-items
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like list-policies-response
    note <Success>
  loot 480
    seed xml, like service-failure-exception
    note <ServiceFailureException>