
load @tunebond/snow/amazonaws.com/iam/2010-05-08/base/client-id-type
  take form client-id-type

load @tunebond/snow/amazonaws.com/iam/2010-05-08/base/concurrent-modification-exception
  take form concurrent-modification-exception

load @tunebond/snow/amazonaws.com/iam/2010-05-08/base/create-open-id-connect-provider-response
  take form create-open-id-connect-provider-response

load @tunebond/snow/amazonaws.com/iam/2010-05-08/base/entity-already-exists-exception
  take form entity-already-exists-exception

load @tunebond/snow/amazonaws.com/iam/2010-05-08/base/invalid-input-exception
  take form invalid-input-exception

load @tunebond/snow/amazonaws.com/iam/2010-05-08/base/limit-exceeded-exception
  take form limit-exceeded-exception

load @tunebond/snow/amazonaws.com/iam/2010-05-08/base/service-failure-exception
  take form service-failure-exception

load @tunebond/snow/amazonaws.com/iam/2010-05-08/base/tag
  take form tag

load @tunebond/snow/amazonaws.com/iam/2010-05-08/base/thumbprint-type
  take form thumbprint-type

load @tunebond/snow/base/list
  take form list

load @tunebond/snow/base/native-string
  take form native-string

boot get-create-open-id-connect-provider, name <GET_CreateOpenIDConnectProvider>
  deed get
  note <Creates an IAM entity to describe an identity provider (IdP) that supports [OpenID Connect (OIDC)](http://openid.net/connect/).

The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between Amazon Web Services and the OIDC provider.

If you are using an OIDC identity provider from Google, Facebook, or Amazon Cognito, you don't need to create a separate IAM identity provider. These OIDC identity providers are already built-in to Amazon Web Services and are available for your use. Instead, you can move directly to creating new roles using your identity provider. To learn more, see [Creating a role for web identity or OpenID connect federation](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_oidc.html) in the _IAM User Guide_.

When you create the IAM OIDC provider, you specify the following:

- The URL of the OIDC identity provider (IdP) to trust

- A list of client IDs (also known as audiences) that identify the application or applications allowed to authenticate using the OIDC provider

- A list of thumbprints of one or more server certificates that the IdP uses

You get all of this information from the OIDC IdP that you want to use to access Amazon Web Services.

Amazon Web Services secures communication with some OIDC identity providers (IdPs) through our library of trusted certificate authorities (CAs) instead of using a certificate thumbprint to verify your IdP server certificate. These OIDC IdPs include Google, and those that use an Amazon S3 bucket to host a JSON Web Key Set (JWKS) endpoint. In these cases, your legacy thumbprint remains in your configuration, but is no longer used for validation.

The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the CreateOpenIDConnectProvider operation to highly privileged users.>

  take url
    like native-string
    note <The URL of the identity provider. The URL must begin with `https://` and should correspond to the `iss` claim in the provider's OpenID Connect ID tokens. Per the OIDC standard, path components are allowed but query parameters are not. Typically the URL consists of only a hostname, like `https://server.example.org` or `https://example.com`.

You cannot register the same provider multiple times in a single account. If you try to submit a URL that has already been used for an OpenID Connect provider in the account, you will get an error.>
  take client-id-list
    like list
      like client-id-type
    note <A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the `client_id` parameter on OAuth requests.)

You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.

There is no defined format for a client ID. The `CreateOpenIDConnectProviderRequest` operation accepts client IDs up to 255 characters long.>
    void take
  take thumbprint-list
    like list
      like thumbprint-type
    note <A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificates. Typically this list includes only one entry. However, IAM lets you have up to five thumbprints for an OIDC provider. This lets you maintain multiple thumbprints if the identity provider is rotating certificates.

The server certificate thumbprint is the hex-encoded SHA-1 hash value of the X.509 certificate used by the domain where the OpenID Connect provider makes its keys available. It is always a 40-character string.

You must provide at least one thumbprint when creating an IAM OIDC provider. For example, assume that the OIDC provider is `server.example.com` and the provider stores its keys at https://keys.server.example.com/openid-connect. In that case, the thumbprint string would be the hex-encoded SHA-1 hash value of the certificate used by https://keys.server.example.com.

For more information about obtaining the OIDC provider's thumbprint, see [Obtaining the thumbprint for an OpenID Connect provider](https://docs.aws.amazon.com/IAM/latest/UserGuide/identity-providers-oidc-obtain-thumbprint.html) in the _IAM User Guide_.>
  take tags
    like list
      like tag
    note <A list of tags that you want to attach to the new IAM OpenID Connect (OIDC) provider. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the _IAM User Guide_.

If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=CreateOpenIDConnectProvider>

  find <Url>, loan url
  find <ClientIDList>, loan client-id-list
  find <ThumbprintList>, loan thumbprint-list
  find <Tags>, loan tags
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like create-open-id-connect-provider-response
    note <Success>
  loot 480
    seed xml, like invalid-input-exception
    note <InvalidInputException>
  loot 481
    seed xml, like entity-already-exists-exception
    note <EntityAlreadyExistsException>
  loot 482
    seed xml, like limit-exceeded-exception
    note <LimitExceededException>
  loot 483
    seed xml, like concurrent-modification-exception
    note <ConcurrentModificationException>
  loot 484
    seed xml, like service-failure-exception
    note <ServiceFailureException>