
load @textsurf/snow/amazonaws.com/iam/2010-05-08/base/concurrent-modification-exception
  take form concurrent-modification-exception

load @textsurf/snow/amazonaws.com/iam/2010-05-08/base/create-virtual-mfa-device-response
  take form create-virtual-mfa-device-response

load @textsurf/snow/amazonaws.com/iam/2010-05-08/base/entity-already-exists-exception
  take form entity-already-exists-exception

load @textsurf/snow/amazonaws.com/iam/2010-05-08/base/invalid-input-exception
  take form invalid-input-exception

load @textsurf/snow/amazonaws.com/iam/2010-05-08/base/limit-exceeded-exception
  take form limit-exceeded-exception

load @textsurf/snow/amazonaws.com/iam/2010-05-08/base/service-failure-exception
  take form service-failure-exception

load @textsurf/snow/amazonaws.com/iam/2010-05-08/base/tag
  take form tag

load @textsurf/snow/base/list
  take form list

load @textsurf/snow/base/native-string
  take form native-string

boot get-create-virtual-mfa-device, name <GET_CreateVirtualMFADevice>
  deed get
  note <Creates a new virtual MFA device for the account. After creating the virtual MFA, use EnableMFADevice to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, see [Using a virtual MFA device](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html) in the _IAM User Guide_.

For information about the maximum number of MFA devices you can create, see [IAM and STS quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html) in the _IAM User Guide_.

The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your Amazon Web Services access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.>

  take path
    like native-string
    note <The path for the virtual MFA device. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the _IAM User Guide_.

This parameter is optional. If it is not included, it defaults to a slash (/).

This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (`\u0021`) through the DEL character (`\u007F`), including most punctuation characters, digits, and upper and lowercased letters.>
    void take
  take virtual-mfa-device-name
    like native-string
    note <The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.

This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@->
  take tags
    like list
      like tag
    note <A list of tags that you want to attach to the new IAM virtual MFA device. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the _IAM User Guide_.

If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=CreateVirtualMFADevice>

  find <Path>, loan path
  find <VirtualMFADeviceName>, loan virtual-mfa-device-name
  find <Tags>, loan tags
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like create-virtual-mfa-device-response
    note <Success>
  loot 480
    seed xml, like limit-exceeded-exception
    note <LimitExceededException>
  loot 481
    seed xml, like invalid-input-exception
    note <InvalidInputException>
  loot 482
    seed xml, like entity-already-exists-exception
    note <EntityAlreadyExistsException>
  loot 483
    seed xml, like concurrent-modification-exception
    note <ConcurrentModificationException>
  loot 484
    seed xml, like service-failure-exception
    note <ServiceFailureException>