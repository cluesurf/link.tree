
load @drumwork/snow/amazonaws.com/iam/2010-05-08/base/create-access-key-response
  take form create-access-key-response

load @drumwork/snow/amazonaws.com/iam/2010-05-08/base/limit-exceeded-exception
  take form limit-exceeded-exception

load @drumwork/snow/amazonaws.com/iam/2010-05-08/base/no-such-entity-exception
  take form no-such-entity-exception

load @drumwork/snow/amazonaws.com/iam/2010-05-08/base/service-failure-exception
  take form service-failure-exception

load @drumwork/snow/base/native-string
  take form native-string

boot get-create-access-key, name <GET_CreateAccessKey>
  note <Creates a new Amazon Web Services secret access key and corresponding Amazon Web Services access key ID for the specified user. The default status for new keys is `Active`.

If you do not specify a user name, IAM determines the user name implicitly based on the Amazon Web Services access key ID signing the request. This operation works for access keys under the account. Consequently, you can use this operation to manage account root user credentials. This is true even if the account has no associated users.

For information about quotas on the number of keys you can create, see [IAM and STS quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html) in the _IAM User Guide_.

To ensure the security of your account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.>

  take user-name
    like native-string
    note <The name of the IAM user that the new key will belong to.

This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@->
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=CreateAccessKey>

  find <UserName>, loan user-name
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like create-access-key-response
    note <Success>
  loot 480
    seed xml, like no-such-entity-exception
    note <NoSuchEntityException>
  loot 481
    seed xml, like limit-exceeded-exception
    note <LimitExceededException>
  loot 482
    seed xml, like service-failure-exception
    note <ServiceFailureException>