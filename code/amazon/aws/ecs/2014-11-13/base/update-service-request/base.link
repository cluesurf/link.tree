
load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/boxed-boolean
  take form boxed-boolean

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/boxed-integer
  take form boxed-integer

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/capacity-provider-strategy
  take form capacity-provider-strategy

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/deployment-configuration
  take form deployment-configuration

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/network-configuration
  take form network-configuration

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/placement-constraints
  take form placement-constraints

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/placement-strategies
  take form placement-strategies

load @tunebond/snow/base/boolean
  take form boolean

load @tunebond/snow/base/string
  take form string

form update-service-request, name <UpdateServiceRequest>
  take cluster, name <cluster>
    like string
    void take
    note <The short name or full Amazon Resource Name (ARN) of the cluster that your service is running on. If you do not specify a cluster, the default cluster is assumed.>
  take service, name <service>
    like string
    note <The name of the service to update.>
  take desired-count, name <desiredCount>
    like boxed-integer
    void take
    note <The number of instantiations of the task to place and keep running in your service.>
  take task-definition, name <taskDefinition>
    like string
    void take
    note <The `family` and `revision` (`family:revision`) or full ARN of the task definition to run in your service. If a `revision` is not specified, the latest `ACTIVE` revision is used. If you modify the task definition with `UpdateService`, Amazon ECS spawns a task with the new version of the task definition and then stops an old task after the new version is running.>
  take capacity-provider-strategy, name <capacityProviderStrategy>
    like capacity-provider-strategy
    void take
    note <The capacity provider strategy to update the service to use.

If the service is using the default capacity provider strategy for the cluster, the service can be updated to use one or more capacity providers as opposed to the default capacity provider strategy. However, when a service is using a capacity provider strategy that is not the default capacity provider strategy, the service cannot be updated to use the cluster's default capacity provider strategy.

A capacity provider strategy consists of one or more capacity providers along with the `base` and `weight` to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an `ACTIVE` or `UPDATING` status can be used.

If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the CreateCapacityProvider API operation.

To use a Fargate capacity provider, specify either the `FARGATE` or `FARGATE_SPOT` capacity providers. The Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used.

The PutClusterCapacityProviders API operation is used to update the list of available capacity providers for a cluster after the cluster is created.>
  take deployment-configuration, name <deploymentConfiguration>
    like deployment-configuration
    void take
    note <Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.>
  take network-configuration, name <networkConfiguration>
    like network-configuration
    void take
    note <An object representing the network configuration for the service.>
  take placement-constraints, name <placementConstraints>
    like placement-constraints
    void take
    note <An array of task placement constraint objects to update the service to use. If no value is specified, the existing placement constraints for the service will remain unchanged. If this value is specified, it will override any existing placement constraints defined for the service. To remove all existing placement constraints, specify an empty array.

You can specify a maximum of 10 constraints per task (this limit includes constraints in the task definition and those specified at runtime).>
  take placement-strategy, name <placementStrategy>
    like placement-strategies
    void take
    note <The task placement strategy objects to update the service to use. If no value is specified, the existing placement strategy for the service will remain unchanged. If this value is specified, it will override the existing placement strategy defined for the service. To remove an existing placement strategy, specify an empty object.

You can specify a maximum of five strategy rules per service.>
  take platform-version, name <platformVersion>
    like string
    void take
    note <The platform version on which your tasks in the service are running. A platform version is only specified for tasks using the Fargate launch type. If a platform version is not specified, the `LATEST` platform version is used by default. For more information, see [Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take force-new-deployment, name <forceNewDeployment>
    like boolean
    void take
    note <Whether to force a new deployment of the service. Deployments are not forced by default. You can use this option to trigger a new deployment with no service definition changes. For example, you can update a service's tasks to use a newer Docker image with the same image/tag combination (`my_image:latest`) or to roll Fargate tasks onto a newer platform version.>
  take health-check-grace-period-seconds, name <healthCheckGracePeriodSeconds>
    like boxed-integer
    void take
    note <The period of time, in seconds, that the Amazon ECS service scheduler should ignore unhealthy Elastic Load Balancing target health checks after a task has first started. This is only valid if your service is configured to use a load balancer. If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health check grace period of up to 2,147,483,647 seconds. During that time, the Amazon ECS service scheduler ignores the Elastic Load Balancing health check status. This grace period can prevent the ECS service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.>
  take enable-execute-command, name <enableExecuteCommand>
    like boxed-boolean
    void take
    note <If `true`, this enables execute command functionality on all task containers.

If you do not want to override the value that was set when the service was created, you can set this to `null` when performing this action.>