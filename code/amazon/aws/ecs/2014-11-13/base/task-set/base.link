
load @textsurf/snow/amazonaws.com/ecs/2014-11-13/base/capacity-provider-strategy
  take form capacity-provider-strategy

load @textsurf/snow/amazonaws.com/ecs/2014-11-13/base/launch-type
  take form launch-type

load @textsurf/snow/amazonaws.com/ecs/2014-11-13/base/load-balancers
  take form load-balancers

load @textsurf/snow/amazonaws.com/ecs/2014-11-13/base/network-configuration
  take form network-configuration

load @textsurf/snow/amazonaws.com/ecs/2014-11-13/base/scale
  take form scale

load @textsurf/snow/amazonaws.com/ecs/2014-11-13/base/service-registries
  take form service-registries

load @textsurf/snow/amazonaws.com/ecs/2014-11-13/base/stability-status
  take form stability-status

load @textsurf/snow/amazonaws.com/ecs/2014-11-13/base/tags
  take form tags

load @textsurf/snow/amazonaws.com/ecs/2014-11-13/base/timestamp
  take form timestamp

load @textsurf/snow/base/integer
  take form integer

load @textsurf/snow/base/string
  take form string

form task-set, name <TaskSet>
  note <Information about a set of Amazon ECS tasks in either an CodeDeploy or an `EXTERNAL` deployment. An Amazon ECS task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic.>
  take id, name <id>
    like string
    void take
    note <The ID of the task set.>
  take task-set-arn, name <taskSetArn>
    like string
    void take
    note <The Amazon Resource Name (ARN) of the task set.>
  take service-arn, name <serviceArn>
    like string
    void take
    note <The Amazon Resource Name (ARN) of the service the task set exists in.>
  take cluster-arn, name <clusterArn>
    like string
    void take
    note <The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set exists in.>
  take started-by, name <startedBy>
    like string
    void take
    note <The tag specified when a task set is started. If the task set is created by an CodeDeploy deployment, the `startedBy` parameter is `CODE_DEPLOY`. For a task set created for an external deployment, the startedBy field isn't used.>
  take external-id, name <externalId>
    like string
    void take
    note <The external ID associated with the task set.

If a task set is created by an CodeDeploy deployment, the `externalId` parameter contains the CodeDeploy deployment ID.

If a task set is created for an external deployment and is associated with a service discovery registry, the `externalId` parameter contains the `ECS_TASK_SET_EXTERNAL_ID` Cloud Map attribute.>
  take status, name <status>
    like string
    void take
    note <The status of the task set. The following describes each state:

PRIMARY

The task set is serving production traffic.

ACTIVE

The task set is not serving production traffic.

DRAINING

The tasks in the task set are being stopped and their corresponding targets are being deregistered from their target group.>
  take task-definition, name <taskDefinition>
    like string
    void take
    note <The task definition the task set is using.>
  take computed-desired-count, name <computedDesiredCount>
    like integer
    void take
    note <The computed desired count for the task set. This is calculated by multiplying the service's `desiredCount` by the task set's `scale` percentage. The result is always rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.>
  take pending-count, name <pendingCount>
    like integer
    void take
    note <The number of tasks in the task set that are in the `PENDING` status during a deployment. A task in the `PENDING` state is preparing to enter the `RUNNING` state. A task set enters the `PENDING` status when it launches for the first time or when it is restarted after being in the `STOPPED` state.>
  take running-count, name <runningCount>
    like integer
    void take
    note <The number of tasks in the task set that are in the `RUNNING` status during a deployment. A task in the `RUNNING` state is running and ready for use.>
  take created-at, name <createdAt>
    like timestamp
    void take
    note <The Unix timestamp for when the task set was created.>
  take updated-at, name <updatedAt>
    like timestamp
    void take
    note <The Unix timestamp for when the task set was last updated.>
  take launch-type, name <launchType>
    like launch-type
    void take
    note <The launch type the tasks in the task set are using. For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take capacity-provider-strategy, name <capacityProviderStrategy>
    like capacity-provider-strategy
    void take
    note <The capacity provider strategy associated with the task set.>
  take platform-version, name <platformVersion>
    like string
    void take
    note <The Fargate platform version on which the tasks in the task set are running. A platform version is only specified for tasks run on Fargate. For more information, see [Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take network-configuration, name <networkConfiguration>
    like network-configuration
    void take
    note <The network configuration for the task set.>
  take load-balancers, name <loadBalancers>
    like load-balancers
    void take
    note <Details on a load balancer that is used with a task set.>
  take service-registries, name <serviceRegistries>
    like service-registries
    void take
    note <The details of the service discovery registries to assign to this task set. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).>
  take scale, name <scale>
    like scale
    void take
    note <A floating-point percentage of the desired number of tasks to place and keep running in the task set.>
  take stability-status, name <stabilityStatus>
    like stability-status
    void take
    note <The stability status, which indicates whether the task set has reached a steady state. If the following conditions are met, the task set will be in `STEADY_STATE`:

- The task `runningCount` is equal to the `computedDesiredCount`.

- The `pendingCount` is `0`.

- There are no tasks running on container instances in the `DRAINING` status.

- All tasks are reporting a healthy status from the load balancers, service discovery, and container health checks.

If any of those conditions are not met, the stability status returns `STABILIZING`.>
  take stability-status-at, name <stabilityStatusAt>
    like timestamp
    void take
    note <The Unix timestamp for when the task set stability status was retrieved.>
  take tags, name <tags>
    like tags
    void take
    note <The metadata that you apply to the task set to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.

The following basic restrictions apply to tags:

- Maximum number of tags per resource - 50

- For each resource, each tag key must be unique, and each tag key can have only one value.

- Maximum key length - 128 Unicode characters in UTF-8

- Maximum value length - 256 Unicode characters in UTF-8

- If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.

- Tag keys and values are case-sensitive.

- Do not use `aws:`, `AWS:`, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.>