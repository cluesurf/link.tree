
load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/boxed-integer
  take form boxed-integer

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/capacity-provider-strategy
  take form capacity-provider-strategy

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/deployment-configuration
  take form deployment-configuration

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/deployment-controller
  take form deployment-controller

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/deployments
  take form deployments

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/launch-type
  take form launch-type

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/load-balancers
  take form load-balancers

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/network-configuration
  take form network-configuration

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/placement-constraints
  take form placement-constraints

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/placement-strategies
  take form placement-strategies

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/propagate-tags
  take form propagate-tags

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/scheduling-strategy
  take form scheduling-strategy

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/service-events
  take form service-events

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/service-registries
  take form service-registries

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/tags
  take form tags

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/task-sets
  take form task-sets

load @nerdbond/snow/amazonaws.com/ecs/2014-11-13/base/timestamp
  take form timestamp

load @nerdbond/snow/base/boolean
  take form boolean

load @nerdbond/snow/base/integer
  take form integer

load @nerdbond/snow/base/string
  take form string

form service, name <Service>
  note <Details on a service within a cluster>
  take service-arn, name <serviceArn>
    like string
    void take
    note <The ARN that identifies the service. The ARN contains the `arn:aws:ecs` namespace, followed by the Region of the service, the Amazon Web Services account ID of the service owner, the `service` namespace, and then the service name. For example, `arn:aws:ecs:region:012345678910:service/my-service`.>
  take service-name, name <serviceName>
    like string
    void take
    note <The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a Region or across multiple Regions.>
  take cluster-arn, name <clusterArn>
    like string
    void take
    note <The Amazon Resource Name (ARN) of the cluster that hosts the service.>
  take load-balancers, name <loadBalancers>
    like load-balancers
    void take
    note <A list of Elastic Load Balancing load balancer objects, containing the load balancer name, the container name (as it appears in a container definition), and the container port to access from the load balancer.>
  take service-registries, name <serviceRegistries>
    like service-registries
    void take
    note <The details of the service discovery registries to assign to this service. For more information, see [Service Discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).>
  take status, name <status>
    like string
    void take
    note <The status of the service. The valid values are `ACTIVE`, `DRAINING`, or `INACTIVE`.>
  take desired-count, name <desiredCount>
    like integer
    void take
    note <The desired number of instantiations of the task definition to keep running on the service. This value is specified when the service is created with CreateService, and it can be modified with UpdateService.>
  take running-count, name <runningCount>
    like integer
    void take
    note <The number of tasks in the cluster that are in the `RUNNING` state.>
  take pending-count, name <pendingCount>
    like integer
    void take
    note <The number of tasks in the cluster that are in the `PENDING` state.>
  take launch-type, name <launchType>
    like launch-type
    void take
    note <The launch type the service is using. When using the DescribeServices API, this field is omitted if the service was created using a capacity provider strategy.>
  take capacity-provider-strategy, name <capacityProviderStrategy>
    like capacity-provider-strategy
    void take
    note <The capacity provider strategy the service is using. When using the DescribeServices API, this field is omitted if the service was created using a launch type.>
  take platform-version, name <platformVersion>
    like string
    void take
    note <The platform version on which to run your service. A platform version is only specified for tasks hosted on Fargate. If one is not specified, the `LATEST` platform version is used by default. For more information, see [Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take task-definition, name <taskDefinition>
    like string
    void take
    note <The task definition to use for tasks in the service. This value is specified when the service is created with CreateService, and it can be modified with UpdateService.>
  take deployment-configuration, name <deploymentConfiguration>
    like deployment-configuration
    void take
    note <Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.>
  take task-sets, name <taskSets>
    like task-sets
    void take
    note <Information about a set of Amazon ECS tasks in either an CodeDeploy or an `EXTERNAL` deployment. An Amazon ECS task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic.>
  take deployments, name <deployments>
    like deployments
    void take
    note <The current state of deployments for the service.>
  take role-arn, name <roleArn>
    like string
    void take
    note <The ARN of the IAM role associated with the service that allows the Amazon ECS container agent to register container instances with an Elastic Load Balancing load balancer.>
  take events, name <events>
    like service-events
    void take
    note <The event stream for your service. A maximum of 100 of the latest events are displayed.>
  take created-at, name <createdAt>
    like timestamp
    void take
    note <The Unix timestamp for when the service was created.>
  take placement-constraints, name <placementConstraints>
    like placement-constraints
    void take
    note <The placement constraints for the tasks in the service.>
  take placement-strategy, name <placementStrategy>
    like placement-strategies
    void take
    note <The placement strategy that determines how tasks for the service are placed.>
  take network-configuration, name <networkConfiguration>
    like network-configuration
    void take
    note <The VPC subnet and security group configuration for tasks that receive their own elastic network interface by using the `awsvpc` networking mode.>
  take health-check-grace-period-seconds, name <healthCheckGracePeriodSeconds>
    like boxed-integer
    void take
    note <The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started.>
  take scheduling-strategy, name <schedulingStrategy>
    like scheduling-strategy
    void take
    note <The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).

There are two service scheduler strategies available:

- `REPLICA`-The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions.

- `DAEMON`-The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks and will stop tasks that do not meet the placement constraints.

  Fargate tasks do not support the `DAEMON` scheduling strategy.>
  take deployment-controller, name <deploymentController>
    like deployment-controller
    void take
    note <The deployment controller type the service is using. When using the DescribeServices API, this field is omitted if the service is using the `ECS` deployment controller type.>
  take tags, name <tags>
    like tags
    void take
    note <The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.

The following basic restrictions apply to tags:

- Maximum number of tags per resource - 50

- For each resource, each tag key must be unique, and each tag key can have only one value.

- Maximum key length - 128 Unicode characters in UTF-8

- Maximum value length - 256 Unicode characters in UTF-8

- If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.

- Tag keys and values are case-sensitive.

- Do not use `aws:`, `AWS:`, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.>
  take created-by, name <createdBy>
    like string
    void take
    note <The principal that created the service.>
  take enable-ecs-managed-tags, name <enableECSManagedTags>
    like boolean
    void take
    note <Specifies whether to enable Amazon ECS managed tags for the tasks in the service. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take propagate-tags, name <propagateTags>
    like propagate-tags
    void take
    note <Specifies whether to propagate the tags from the task definition or the service to the task. If no value is specified, the tags are not propagated.>
  take enable-execute-command, name <enableExecuteCommand>
    like boolean
    void take
    note <Whether or not the execute command functionality is enabled for the service. If `true`, the execute command functionality is enabled for all containers in tasks as part of the service.>