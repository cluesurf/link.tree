
load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/boxed-integer
  take form boxed-integer

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/capacity-provider-strategy
  take form capacity-provider-strategy

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/deployment-configuration
  take form deployment-configuration

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/deployment-controller
  take form deployment-controller

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/launch-type
  take form launch-type

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/load-balancers
  take form load-balancers

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/network-configuration
  take form network-configuration

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/placement-constraints
  take form placement-constraints

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/placement-strategies
  take form placement-strategies

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/propagate-tags
  take form propagate-tags

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/scheduling-strategy
  take form scheduling-strategy

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/service-registries
  take form service-registries

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/tags
  take form tags

load @tunebond/snow/base/boolean
  take form boolean

load @tunebond/snow/base/string
  take form string

form create-service-request, name <CreateServiceRequest>
  take cluster, name <cluster>
    like string
    void take
    note <The short name or full Amazon Resource Name (ARN) of the cluster on which to run your service. If you do not specify a cluster, the default cluster is assumed.>
  take service-name, name <serviceName>
    like string
    note <The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a Region or across multiple Regions.>
  take task-definition, name <taskDefinition>
    like string
    void take
    note <The `family` and `revision` (`family:revision`) or full ARN of the task definition to run in your service. If a `revision` is not specified, the latest `ACTIVE` revision is used.

A task definition must be specified if the service is using either the `ECS` or `CODE_DEPLOY` deployment controllers.>
  take load-balancers, name <loadBalancers>
    like load-balancers
    void take
    note <A load balancer object representing the load balancers to use with your service. For more information, see [Service Load Balancing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html) in the _Amazon Elastic Container Service Developer Guide_.

If the service is using the rolling update (`ECS`) deployment controller and using either an Application Load Balancer or Network Load Balancer, you must specify one or more target group ARNs to attach to the service. The service-linked role is required for services that make use of multiple target groups. For more information, see [Using service-linked roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html) in the _Amazon Elastic Container Service Developer Guide_.

If the service is using the `CODE_DEPLOY` deployment controller, the service is required to use either an Application Load Balancer or Network Load Balancer. When creating an CodeDeploy deployment group, you specify two target groups (referred to as a `targetGroupPair`). During a deployment, CodeDeploy determines which task set in your service has the status `PRIMARY` and associates one target group with it, and then associates the other target group with the replacement task set. The load balancer can also have up to two listeners: a required listener for production traffic and an optional listener that allows you perform validation tests with Lambda functions before routing production traffic to it.

After you create a service using the `ECS` deployment controller, the load balancer name or target group ARN, container name, and container port specified in the service definition are immutable. If you are using the `CODE_DEPLOY` deployment controller, these values can be changed when updating the service.

For Application Load Balancers and Network Load Balancers, this object must contain the load balancer target group ARN, the container name (as it appears in a container definition), and the container port to access from the load balancer. The load balancer name parameter must be omitted. When a task from this service is placed on a container instance, the container instance and port combination is registered as a target in the target group specified here.

For Classic Load Balancers, this object must contain the load balancer name, the container name (as it appears in a container definition), and the container port to access from the load balancer. The target group ARN parameter must be omitted. When a task from this service is placed on a container instance, the container instance is registered with the load balancer specified here.

Services with tasks that use the `awsvpc` network mode (for example, those with the Fargate launch type) only support Application Load Balancers and Network Load Balancers. Classic Load Balancers are not supported. Also, when you create any target groups for these services, you must choose `ip` as the target type, not `instance`, because tasks that use the `awsvpc` network mode are associated with an elastic network interface, not an Amazon EC2 instance.>
  take service-registries, name <serviceRegistries>
    like service-registries
    void take
    note <The details of the service discovery registry to associate with this service. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).

Each service may be associated with one service registry. Multiple service registries per service isn't supported.>
  take desired-count, name <desiredCount>
    like boxed-integer
    void take
    note <The number of instantiations of the specified task definition to place and keep running on your cluster.

This is required if `schedulingStrategy` is `REPLICA` or is not specified. If `schedulingStrategy` is `DAEMON` then this is not required.>
  take client-token, name <clientToken>
    like string
    void take
    note <Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 32 ASCII characters are allowed.>
  take launch-type, name <launchType>
    like launch-type
    void take
    note <The infrastructure on which to run your service. For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the _Amazon Elastic Container Service Developer Guide_.

The `FARGATE` launch type runs your tasks on Fargate On-Demand infrastructure.

Fargate Spot infrastructure is available for use but a capacity provider strategy must be used. For more information, see [Fargate capacity providers](https://docs.aws.amazon.com/AmazonECS/latest/userguide/fargate-capacity-providers.html) in the _Amazon ECS User Guide for Fargate_.

The `EC2` launch type runs your tasks on Amazon EC2 instances registered to your cluster.

The `EXTERNAL` launch type runs your tasks on your on-premise server or virtual machine (VM) capacity registered to your cluster.

A service can use either a launch type or a capacity provider strategy. If a `launchType` is specified, the `capacityProviderStrategy` parameter must be omitted.>
  take capacity-provider-strategy, name <capacityProviderStrategy>
    like capacity-provider-strategy
    void take
    note <The capacity provider strategy to use for the service.

If a `capacityProviderStrategy` is specified, the `launchType` parameter must be omitted. If no `capacityProviderStrategy` or `launchType` is specified, the `defaultCapacityProviderStrategy` for the cluster is used.

A capacity provider strategy may contain a maximum of 6 capacity providers.>
  take platform-version, name <platformVersion>
    like string
    void take
    note <The platform version that your tasks in the service are running on. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the `LATEST` platform version is used by default. For more information, see [Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take role, name <role>
    like string
    void take
    note <The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is only permitted if you are using a load balancer with your service and your task definition does not use the `awsvpc` network mode. If you specify the `role` parameter, you must also specify a load balancer object with the `loadBalancers` parameter.

If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here. The service-linked role is required if your task definition uses the `awsvpc` network mode or if the service is configured to use service discovery, an external deployment controller, multiple target groups, or Elastic Inference accelerators in which case you should not specify a role here. For more information, see [Using service-linked roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html) in the _Amazon Elastic Container Service Developer Guide_.

If your specified role has a path other than `/`, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path. For example, if a role with the name `bar` has a path of `/foo/` then you would specify `/foo/bar` as the role name. For more information, see [Friendly names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names) in the _IAM User Guide_.>
  take deployment-configuration, name <deploymentConfiguration>
    like deployment-configuration
    void take
    note <Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.>
  take placement-constraints, name <placementConstraints>
    like placement-constraints
    void take
    note <An array of placement constraint objects to use for tasks in your service. You can specify a maximum of 10 constraints per task (this limit includes constraints in the task definition and those specified at runtime).>
  take placement-strategy, name <placementStrategy>
    like placement-strategies
    void take
    note <The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules per service.>
  take network-configuration, name <networkConfiguration>
    like network-configuration
    void take
    note <The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own elastic network interface, and it is not supported for other network modes. For more information, see [Task networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take health-check-grace-period-seconds, name <healthCheckGracePeriodSeconds>
    like boxed-integer
    void take
    note <The period of time, in seconds, that the Amazon ECS service scheduler should ignore unhealthy Elastic Load Balancing target health checks after a task has first started. This is only used when your service is configured to use a load balancer. If your service has a load balancer defined and you don't specify a health check grace period value, the default value of `0` is used.

If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health check grace period of up to 2,147,483,647 seconds. During that time, the Amazon ECS service scheduler ignores health check status. This grace period can prevent the service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.>
  take scheduling-strategy, name <schedulingStrategy>
    like scheduling-strategy
    void take
    note <The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).

There are two service scheduler strategies available:

- `REPLICA`-The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. This scheduler strategy is required if the service is using the `CODE_DEPLOY` or `EXTERNAL` deployment controller types.

- `DAEMON`-The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks and will stop tasks that do not meet the placement constraints. When you're using this strategy, you don't need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies.

  Tasks using the Fargate launch type or the `CODE_DEPLOY` or `EXTERNAL` deployment controller types don't support the `DAEMON` scheduling strategy.>
  take deployment-controller, name <deploymentController>
    like deployment-controller
    void take
    note <The deployment controller to use for the service. If no deployment controller is specified, the default value of `ECS` is used.>
  take tags, name <tags>
    like tags
    void take
    note <The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. When a service is deleted, the tags are deleted as well.

The following basic restrictions apply to tags:

- Maximum number of tags per resource - 50

- For each resource, each tag key must be unique, and each tag key can have only one value.

- Maximum key length - 128 Unicode characters in UTF-8

- Maximum value length - 256 Unicode characters in UTF-8

- If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.

- Tag keys and values are case-sensitive.

- Do not use `aws:`, `AWS:`, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.>
  take enable-ecs-managed-tags, name <enableECSManagedTags>
    like boolean
    void take
    note <Specifies whether to enable Amazon ECS managed tags for the tasks within the service. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take propagate-tags, name <propagateTags>
    like propagate-tags
    void take
    note <Specifies whether to propagate the tags from the task definition or the service to the tasks in the service. If no value is specified, the tags are not propagated. Tags can only be propagated to the tasks within the service during service creation. To add tags to a task after service creation, use the TagResource API action.>
  take enable-execute-command, name <enableExecuteCommand>
    like boolean
    void take
    note <Whether or not the execute command functionality is enabled for the service. If `true`, this enables execute command functionality on all containers in the service tasks.>