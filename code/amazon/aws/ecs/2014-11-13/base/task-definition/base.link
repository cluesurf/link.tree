
load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/compatibility-list
  take form compatibility-list

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/container-definitions
  take form container-definitions

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/ephemeral-storage
  take form ephemeral-storage

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/inference-accelerators
  take form inference-accelerators

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/ipc-mode
  take form ipc-mode

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/network-mode
  take form network-mode

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/pid-mode
  take form pid-mode

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/proxy-configuration
  take form proxy-configuration

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/requires-attributes
  take form requires-attributes

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/task-definition-placement-constraints
  take form task-definition-placement-constraints

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/task-definition-status
  take form task-definition-status

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/timestamp
  take form timestamp

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/volume-list
  take form volume-list

load @tunebond/snow/base/integer
  take form integer

load @tunebond/snow/base/string
  take form string

form task-definition, name <TaskDefinition>
  note <The details of a task definition which describes the container and volume definitions of an Amazon Elastic Container Service task. You can specify which Docker images to use, the required resources, and other configurations related to launching the task definition through an Amazon ECS service or task.>
  take task-definition-arn, name <taskDefinitionArn>
    like string
    void take
    note <The full Amazon Resource Name (ARN) of the task definition.>
  take container-definitions, name <containerDefinitions>
    like container-definitions
    void take
    note <A list of container definitions in JSON format that describe the different containers that make up your task. For more information about container definition parameters and defaults, see [Amazon ECS Task Definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take family, name <family>
    like string
    void take
    note <The name of a family that this task definition is registered to. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.

A family groups multiple versions of a task definition. Amazon ECS gives the first task definition that you registered to a family a revision number of 1. Amazon ECS gives sequential revision numbers to each task definition that you add.>
  take task-role-arn, name <taskRoleArn>
    like string
    void take
    note <The short name or full Amazon Resource Name (ARN) of the Identity and Access Management role that grants containers in the task permission to call Amazon Web Services APIs on your behalf. For more information, see [Amazon ECS Task Role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the _Amazon Elastic Container Service Developer Guide_.

IAM roles for tasks on Windows require that the `-EnableTaskIAMRole` option is set when you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some configuration code in order to take advantage of the feature. For more information, see [Windows IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows_task_IAM_roles.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take execution-role-arn, name <executionRoleArn>
    like string
    void take
    note <The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS container agent permission to make Amazon Web Services API calls on your behalf. The task execution IAM role is required depending on the requirements of your task. For more information, see [Amazon ECS task execution IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take network-mode, name <networkMode>
    like network-mode
    void take
    note <The Docker networking mode to use for the containers in the task. The valid values are `none`, `bridge`, `awsvpc`, and `host`. If no network mode is specified, the default is `bridge`.

For Amazon ECS tasks on Fargate, the `awsvpc` network mode is required. For Amazon ECS tasks on Amazon EC2 Linux instances, any network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows instances, `&lt;default&gt;` or `awsvpc` can be used. If the network mode is set to `none`, you cannot specify port mappings in your container definitions, and the tasks containers do not have external connectivity. The `host` and `awsvpc` network modes offer the highest networking performance for containers because they use the EC2 network stack instead of the virtualized network stack provided by the `bridge` mode.

With the `host` and `awsvpc` network modes, exposed container ports are mapped directly to the corresponding host port (for the `host` network mode) or the attached elastic network interface port (for the `awsvpc` network mode), so you cannot take advantage of dynamic host port mappings.

When using the `host` network mode, you should not run containers using the root user (UID 0). It is considered best practice to use a non-root user.

If the network mode is `awsvpc`, the task is allocated an elastic network interface, and you must specify a NetworkConfiguration value when you create a service or run a task with the task definition. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the _Amazon Elastic Container Service Developer Guide_.

If the network mode is `host`, you cannot run multiple instantiations of the same task on a single container instance when port mappings are used.

For more information, see [Network settings](https://docs.docker.com/engine/reference/run/#network-settings) in the _Docker run reference_.>
  take revision, name <revision>
    like integer
    void take
    note <The revision of the task in a particular family. The revision is a version number of a task definition in a family. When you register a task definition for the first time, the revision is `1`. Each time that you register a new revision of a task definition in the same family, the revision value always increases by one, even if you have deregistered previous revisions in this family.>
  take volumes, name <volumes>
    like volume-list
    void take
    note <The list of data volume definitions for the task. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the _Amazon Elastic Container Service Developer Guide_.

The `host` and `sourcePath` parameters are not supported for tasks run on Fargate.>
  take status, name <status>
    like task-definition-status
    void take
    note <The status of the task definition.>
  take requires-attributes, name <requiresAttributes>
    like requires-attributes
    void take
    note <The container instance attributes required by your task. When an Amazon EC2 instance is registered to your cluster, the Amazon ECS container agent assigns some standard attributes to the instance. You can apply custom attributes, specified as key-value pairs using the Amazon ECS console or the PutAttributes API. These attributes are used when considering task placement for tasks hosted on Amazon EC2 instances. For more information, see [Attributes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes) in the _Amazon Elastic Container Service Developer Guide_.

This parameter is not supported for tasks run on Fargate.>
  take placement-constraints, name <placementConstraints>
    like task-definition-placement-constraints
    void take
    note <An array of placement constraint objects to use for tasks.

This parameter is not supported for tasks run on Fargate.>
  take compatibilities, name <compatibilities>
    like compatibility-list
    void take
    note <The task launch types the task definition validated against during task definition registration. For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take requires-compatibilities, name <requiresCompatibilities>
    like compatibility-list
    void take
    note <The task launch types the task definition was validated against. To determine which task launch types the task definition is validated for, see the TaskDefinition$compatibilities parameter.>
  take cpu, name <cpu>
    like string
    void take
    note <The number of `cpu` units used by the task. If you are using the EC2 launch type, this field is optional and any value can be used. If you are using the Fargate launch type, this field is required and you must use one of the following values, which determines your range of valid values for the `memory` parameter:

- 256 (.25 vCPU) - Available `memory` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

- 512 (.5 vCPU) - Available `memory` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)

- 1024 (1 vCPU) - Available `memory` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

- 2048 (2 vCPU) - Available `memory` values: Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)

- 4096 (4 vCPU) - Available `memory` values: Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)>
  take memory, name <memory>
    like string
    void take
    note <The amount (in MiB) of memory used by the task.

If your tasks will be run on Amazon EC2 instances, you must specify either a task-level memory value or a container-level memory value. This field is optional and any value can be used. If a task-level memory value is specified then the container-level memory value is optional. For more information regarding container-level memory and memory reservation, see [ContainerDefinition](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html).

If your tasks will be run on Fargate, this field is required and you must use one of the following values, which determines your range of valid values for the `cpu` parameter:

- 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available `cpu` values: 256 (.25 vCPU)

- 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available `cpu` values: 512 (.5 vCPU)

- 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available `cpu` values: 1024 (1 vCPU)

- Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available `cpu` values: 2048 (2 vCPU)

- Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available `cpu` values: 4096 (4 vCPU)>
  take inference-accelerators, name <inferenceAccelerators>
    like inference-accelerators
    void take
    note <The Elastic Inference accelerator associated with the task.>
  take pid-mode, name <pidMode>
    like pid-mode
    void take
    note <The process namespace to use for the containers in the task. The valid values are `host` or `task`. If `host` is specified, then all containers within the tasks that specified the `host` PID mode on the same container instance share the same process namespace with the host Amazon EC2 instance. If `task` is specified, all containers within the specified task share the same process namespace. If no value is specified, the default is a private namespace. For more information, see [PID settings](https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the _Docker run reference_.

If the `host` PID mode is used, be aware that there is a heightened risk of undesired process namespace expose. For more information, see [Docker security](https://docs.docker.com/engine/security/security/).

This parameter is not supported for Windows containers or tasks run on Fargate.>
  take ipc-mode, name <ipcMode>
    like ipc-mode
    void take
    note <The IPC resource namespace to use for the containers in the task. The valid values are `host`, `task`, or `none`. If `host` is specified, then all containers within the tasks that specified the `host` IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance. If `task` is specified, all containers within the specified task share the same IPC resources. If `none` is specified, then IPC resources within the containers of a task are private and not shared with other containers in a task or on the container instance. If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the _Docker run reference_.

If the `host` IPC mode is used, be aware that there is a heightened risk of undesired IPC namespace expose. For more information, see [Docker security](https://docs.docker.com/engine/security/security/).

If you are setting namespaced kernel parameters using `systemControls` for the containers in the task, the following will apply to your IPC resource namespace. For more information, see [System Controls](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) in the _Amazon Elastic Container Service Developer Guide_.

- For tasks that use the `host` IPC mode, IPC namespace related `systemControls` are not supported.

- For tasks that use the `task` IPC mode, IPC namespace related `systemControls` will apply to all containers within a task.

This parameter is not supported for Windows containers or tasks run on Fargate.>
  take proxy-configuration, name <proxyConfiguration>
    like proxy-configuration
    void take
    note <The configuration details for the App Mesh proxy.

Your Amazon ECS container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the `ecs-init` package to enable a proxy configuration. If your container instances are launched from the Amazon ECS-optimized AMI version `20190301` or later, then they contain the required versions of the container agent and `ecs-init`. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take registered-at, name <registeredAt>
    like timestamp
    void take
    note <The Unix timestamp for when the task definition was registered.>
  take deregistered-at, name <deregisteredAt>
    like timestamp
    void take
    note <The Unix timestamp for when the task definition was deregistered.>
  take registered-by, name <registeredBy>
    like string
    void take
    note <The principal that registered the task definition.>
  take ephemeral-storage, name <ephemeralStorage>
    like ephemeral-storage
    void take
    note <The ephemeral storage settings to use for tasks run with the task definition.>