
load @treesurf/snow/amazonaws.com/ecs/2014-11-13/base/capacity-provider-strategy
  take form capacity-provider-strategy

load @treesurf/snow/amazonaws.com/ecs/2014-11-13/base/deployment-rollout-state
  take form deployment-rollout-state

load @treesurf/snow/amazonaws.com/ecs/2014-11-13/base/launch-type
  take form launch-type

load @treesurf/snow/amazonaws.com/ecs/2014-11-13/base/network-configuration
  take form network-configuration

load @treesurf/snow/amazonaws.com/ecs/2014-11-13/base/timestamp
  take form timestamp

load @treesurf/snow/base/integer
  take form integer

load @treesurf/snow/base/string
  take form string

form deployment, name <Deployment>
  note <The details of an Amazon ECS service deployment. This is used only when a service uses the `ECS` deployment controller type.>
  take id, name <id>
    like string
    void take
    note <The ID of the deployment.>
  take status, name <status>
    like string
    void take
    note <The status of the deployment. The following describes each state:

PRIMARY

The most recent deployment of a service.

ACTIVE

A service deployment that still has running tasks, but are in the process of being replaced with a new `PRIMARY` deployment.

INACTIVE

A deployment that has been completely replaced.>
  take task-definition, name <taskDefinition>
    like string
    void take
    note <The most recent task definition that was specified for the tasks in the service to use.>
  take desired-count, name <desiredCount>
    like integer
    void take
    note <The most recent desired count of tasks that was specified for the service to deploy or maintain.>
  take pending-count, name <pendingCount>
    like integer
    void take
    note <The number of tasks in the deployment that are in the `PENDING` status.>
  take running-count, name <runningCount>
    like integer
    void take
    note <The number of tasks in the deployment that are in the `RUNNING` status.>
  take failed-tasks, name <failedTasks>
    like integer
    void take
    note <The number of consecutively failed tasks in the deployment. A task is considered a failure if the service scheduler can't launch the task, the task doesn't transition to a `RUNNING` state, or if it fails any of its defined health checks and is stopped.

Once a service deployment has one or more successfully running tasks, the failed task count resets to zero and stops being evaluated.>
  take created-at, name <createdAt>
    like timestamp
    void take
    note <The Unix timestamp for when the service deployment was created.>
  take updated-at, name <updatedAt>
    like timestamp
    void take
    note <The Unix timestamp for when the service deployment was last updated.>
  take capacity-provider-strategy, name <capacityProviderStrategy>
    like capacity-provider-strategy
    void take
    note <The capacity provider strategy that the deployment is using.>
  take launch-type, name <launchType>
    like launch-type
    void take
    note <The launch type the tasks in the service are using. For more information, see [Amazon ECS Launch Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take platform-version, name <platformVersion>
    like string
    void take
    note <The platform version on which your tasks in the service are running. A platform version is only specified for tasks using the Fargate launch type. If one is not specified, the `LATEST` platform version is used by default. For more information, see [Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the _Amazon Elastic Container Service Developer Guide_.>
  take network-configuration, name <networkConfiguration>
    like network-configuration
    void take
    note <The VPC subnet and security group configuration for tasks that receive their own elastic network interface by using the `awsvpc` networking mode.>
  take rollout-state, name <rolloutState>
    like deployment-rollout-state
    void take
    note <The `rolloutState` of a service is only returned for services that use the rolling update (`ECS`) deployment type that are not behind a Classic Load Balancer.

The rollout state of the deployment. When a service deployment is started, it begins in an `IN_PROGRESS` state. When the service reaches a steady state, the deployment will transition to a `COMPLETED` state. If the service fails to reach a steady state and circuit breaker is enabled, the deployment will transition to a `FAILED` state. A deployment in `FAILED` state will launch no new tasks. For more information, see DeploymentCircuitBreaker.>
  take rollout-state-reason, name <rolloutStateReason>
    like string
    void take
    note <A description of the rollout state of a deployment.>