
load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/capacity-provider-strategy-item-base
  take form capacity-provider-strategy-item-base

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/capacity-provider-strategy-item-weight
  take form capacity-provider-strategy-item-weight

load @tunebond/snow/base/string
  take form string

form capacity-provider-strategy-item, name <CapacityProviderStrategyItem>
  note <The details of a capacity provider strategy. A capacity provider strategy can be set when using the RunTask or CreateCluster APIs or as the default capacity provider strategy for a cluster with the CreateCluster API.

Only capacity providers that are already associated with a cluster and have an `ACTIVE` or `UPDATING` status can be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster.

If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New Auto Scaling group capacity providers can be created with the CreateCapacityProvider API operation.

To use a Fargate capacity provider, specify either the `FARGATE` or `FARGATE_SPOT` capacity providers. The Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used in a capacity provider strategy.

A capacity provider strategy may contain a maximum of 6 capacity providers.>
  take capacity-provider, name <capacityProvider>
    like string
    note <The short name of the capacity provider.>
  take weight, name <weight>
    like capacity-provider-strategy-item-weight
    void take
    note <The _weight_ value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The `weight` value is taken into consideration after the `base` value, if defined, is satisfied.

If no `weight` value is specified, the default value of `0` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of `0` will not be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of `0`, any `RunTask` or `CreateService` actions using the capacity provider strategy will fail.

An example scenario for using weights is defining a strategy that contains two capacity providers and both have a weight of `1`, then when the `base` is satisfied, the tasks will be split evenly across the two capacity providers. Using that same logic, if you specify a weight of `1` for _capacityProviderA_ and a weight of `4` for _capacityProviderB_, then for every one task that is run using _capacityProviderA_, four tasks would use _capacityProviderB_.>
  take base, name <base>
    like capacity-provider-strategy-item-base
    void take
    note <The _base_ value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a _base_ defined. If no value is specified, the default value of `0` is used.>