
load @treesurf/snow/amazonaws.com/ecs/2014-11-13/base/client-exception
  take form client-exception

load @treesurf/snow/amazonaws.com/ecs/2014-11-13/base/cluster-not-found-exception
  take form cluster-not-found-exception

load @treesurf/snow/amazonaws.com/ecs/2014-11-13/base/invalid-parameter-exception
  take form invalid-parameter-exception

load @treesurf/snow/amazonaws.com/ecs/2014-11-13/base/server-exception
  take form server-exception

load @treesurf/snow/amazonaws.com/ecs/2014-11-13/base/update-container-instances-state-response
  take form update-container-instances-state-response

load @treesurf/snow/base/native-string
  take form native-string

boot update-container-instances-state, name <UpdateContainerInstancesState>
  deed post
  note <Modifies the status of an Amazon ECS container instance.

Once a container instance has reached an `ACTIVE` state, you can change the status of a container instance to `DRAINING` to manually remove an instance from a cluster, for example to perform system updates, update the Docker daemon, or scale down the cluster size.

A container instance cannot be changed to `DRAINING` until it has reached an `ACTIVE` status. If the instance is in any other status, an error will be received.

When you set a container instance to `DRAINING`, Amazon ECS prevents new tasks from being scheduled for placement on the container instance and replacement service tasks are started on other container instances in the cluster if the resources are available. Service tasks on the container instance that are in the `PENDING` state are stopped immediately.

Service tasks on the container instance that are in the `RUNNING` state are stopped and replaced according to the service's deployment configuration parameters, `minimumHealthyPercent` and `maximumPercent`. You can change the deployment configuration of your service using UpdateService.

- If `minimumHealthyPercent` is below 100%, the scheduler can ignore `desiredCount` temporarily during task replacement. For example, `desiredCount` is four tasks, a minimum of 50% allows the scheduler to stop two existing tasks before starting two new tasks. If the minimum is 100%, the service scheduler can't remove existing tasks until the replacement tasks are considered healthy. Tasks for services that do not use a load balancer are considered healthy if they are in the `RUNNING` state. Tasks for services that use a load balancer are considered healthy if they are in the `RUNNING` state and the container instance they are hosted on is reported as healthy by the load balancer.

- The `maximumPercent` parameter represents an upper limit on the number of running tasks during task replacement, which enables you to define the replacement batch size. For example, if `desiredCount` is four tasks, a maximum of 200% starts four new tasks before stopping the four tasks to be drained, provided that the cluster resources required to do this are available. If the maximum is 100%, then replacement tasks can't start until the draining tasks have stopped.

Any `PENDING` or `RUNNING` tasks that do not belong to a service are not affected. You must wait for them to finish or stop them manually.

A container instance has completed draining when it has no more `RUNNING` tasks. You can verify this using ListTasks.

When a container instance has been drained, you can set a container instance to `ACTIVE` status and once it has reached that status the Amazon ECS scheduler can begin scheduling tasks on the instance again.>

  take x-amz-target
    like native-string
  take update-container-instances-state-request, like update-container-instances-state-request

  line </#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateContainerInstancesState>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan update-container-instances-state-request

  loot 200
    seed json, like update-container-instances-state-response
    note <Success>
  loot 480
    seed json, like server-exception
    note <ServerException>
  loot 481
    seed json, like client-exception
    note <ClientException>
  loot 482
    seed json, like invalid-parameter-exception
    note <InvalidParameterException>
  loot 483
    seed json, like cluster-not-found-exception
    note <ClusterNotFoundException>