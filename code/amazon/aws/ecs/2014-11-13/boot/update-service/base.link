
load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/access-denied-exception
  take form access-denied-exception

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/client-exception
  take form client-exception

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/cluster-not-found-exception
  take form cluster-not-found-exception

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/invalid-parameter-exception
  take form invalid-parameter-exception

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/platform-task-definition-incompatibility-exception
  take form platform-task-definition-incompatibility-exception

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/platform-unknown-exception
  take form platform-unknown-exception

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/server-exception
  take form server-exception

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/service-not-active-exception
  take form service-not-active-exception

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/service-not-found-exception
  take form service-not-found-exception

load @tunebond/snow/amazonaws.com/ecs/2014-11-13/base/update-service-response
  take form update-service-response

load @tunebond/snow/base/native-string
  take form native-string

boot update-service, name <UpdateService>
  deed post
  note <Updating the task placement strategies and constraints on an Amazon ECS service remains in preview and is a Beta Service as defined by and subject to the Beta Service Participation Service Terms located at [https://aws.amazon.com/service-terms](https://aws.amazon.com/service-terms) ("Beta Terms"). These Beta Terms apply to your participation in this preview.

Modifies the parameters of a service.

For services using the rolling update (`ECS`) deployment controller, the desired count, deployment configuration, network configuration, task placement constraints and strategies, or task definition used can be updated.

For services using the blue/green (`CODE_DEPLOY`) deployment controller, only the desired count, deployment configuration, task placement constraints and strategies, and health check grace period can be updated using this API. If the network configuration, platform version, or task definition need to be updated, a new CodeDeploy deployment should be created. For more information, see [CreateDeployment](https://docs.aws.amazon.com/codedeploy/latest/APIReference/API_CreateDeployment.html) in the _CodeDeploy API Reference_.

For services using an external deployment controller, you can update only the desired count, task placement constraints and strategies, and health check grace period using this API. If the launch type, load balancer, network configuration, platform version, or task definition need to be updated, you should create a new task set. For more information, see CreateTaskSet.

You can add to or subtract from the number of instantiations of a task definition in a service by specifying the cluster that the service is running in and a new `desiredCount` parameter.

If you have updated the Docker image of your application, you can create a new task definition with that image and deploy it to your service. The service scheduler uses the minimum healthy percent and maximum percent parameters (in the service's deployment configuration) to determine the deployment strategy.

If your updated Docker image uses the same tag as what is in the existing task definition for your service (for example, `my_image:latest`), you do not need to create a new revision of your task definition. You can update the service using the `forceNewDeployment` option. The new tasks launched by the deployment pull the current image/tag combination from your repository when they start.

You can also update the deployment configuration of a service. When a deployment is triggered by updating the task definition of a service, the service scheduler uses the deployment configuration parameters, `minimumHealthyPercent` and `maximumPercent`, to determine the deployment strategy.

- If `minimumHealthyPercent` is below 100%, the scheduler can ignore `desiredCount` temporarily during a deployment. For example, if `desiredCount` is four tasks, a minimum of 50% allows the scheduler to stop two existing tasks before starting two new tasks. Tasks for services that do not use a load balancer are considered healthy if they are in the `RUNNING` state. Tasks for services that use a load balancer are considered healthy if they are in the `RUNNING` state and the container instance they are hosted on is reported as healthy by the load balancer.

- The `maximumPercent` parameter represents an upper limit on the number of running tasks during a deployment, which enables you to define the deployment batch size. For example, if `desiredCount` is four tasks, a maximum of 200% starts four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available).

When UpdateService stops a task during a deployment, the equivalent of `docker stop` is issued to the containers running in the task. This results in a `SIGTERM` and a 30-second timeout, after which `SIGKILL` is sent and the containers are forcibly stopped. If the container handles the `SIGTERM` gracefully and exits within 30 seconds from receiving it, no `SIGKILL` is sent.

When the service scheduler launches new tasks, it determines task placement in your cluster with the following logic:

- Determine which of the container instances in your cluster can support your service's task definition (for example, they have the required CPU, memory, ports, and container instance attributes).

- By default, the service scheduler attempts to balance tasks across Availability Zones in this manner (although you can choose a different placement strategy):

  - Sort the valid container instances by the fewest number of running tasks for this service in the same Availability Zone as the instance. For example, if zone A has one running service task and zones B and C each have zero, valid container instances in either zone B or C are considered optimal for placement.

  - Place the new service task on a valid container instance in an optimal Availability Zone (based on the previous steps), favoring container instances with the fewest number of running tasks for this service.

When the service scheduler stops running tasks, it attempts to maintain balance across the Availability Zones in your cluster using the following logic:

- Sort the container instances by the largest number of running tasks for this service in the same Availability Zone as the instance. For example, if zone A has one running service task and zones B and C each have two, container instances in either zone B or C are considered optimal for termination.

- Stop the task on a container instance in an optimal Availability Zone (based on the previous steps), favoring container instances with the largest number of running tasks for this service.>

  take x-amz-target
    like native-string
  take update-service-request, like update-service-request

  line </#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateService>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan update-service-request

  loot 200
    seed json, like update-service-response
    note <Success>
  loot 480
    seed json, like server-exception
    note <ServerException>
  loot 481
    seed json, like client-exception
    note <ClientException>
  loot 482
    seed json, like invalid-parameter-exception
    note <InvalidParameterException>
  loot 483
    seed json, like cluster-not-found-exception
    note <ClusterNotFoundException>
  loot 484
    seed json, like service-not-found-exception
    note <ServiceNotFoundException>
  loot 485
    seed json, like service-not-active-exception
    note <ServiceNotActiveException>
  loot 486
    seed json, like platform-unknown-exception
    note <PlatformUnknownException>
  loot 487
    seed json, like platform-task-definition-incompatibility-exception
    note <PlatformTaskDefinitionIncompatibilityException>
  loot 488
    seed json, like access-denied-exception
    note <AccessDeniedException>