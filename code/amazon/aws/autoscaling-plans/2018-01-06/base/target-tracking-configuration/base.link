
load @nerdbond/snow/amazonaws.com/autoscaling-plans/2018-01-06/base/cooldown
  take form cooldown

load @nerdbond/snow/amazonaws.com/autoscaling-plans/2018-01-06/base/customized-scaling-metric-specification
  take form customized-scaling-metric-specification

load @nerdbond/snow/amazonaws.com/autoscaling-plans/2018-01-06/base/disable-scale-in
  take form disable-scale-in

load @nerdbond/snow/amazonaws.com/autoscaling-plans/2018-01-06/base/metric-scale
  take form metric-scale

load @nerdbond/snow/amazonaws.com/autoscaling-plans/2018-01-06/base/predefined-scaling-metric-specification
  take form predefined-scaling-metric-specification

form target-tracking-configuration, name <TargetTrackingConfiguration>
  note <Describes a target tracking configuration to use with AWS Auto Scaling. Used with ScalingInstruction and ScalingPolicy.>
  take predefined-scaling-metric-specification, name <PredefinedScalingMetricSpecification>
    like predefined-scaling-metric-specification
    void take
    note <A predefined metric. You can specify either a predefined metric or a customized metric.>
  take customized-scaling-metric-specification, name <CustomizedScalingMetricSpecification>
    like customized-scaling-metric-specification
    void take
    note <A customized metric. You can specify either a predefined metric or a customized metric.>
  take target-value, name <TargetValue>
    like metric-scale
    note <The target value for the metric. Although this property accepts numbers of type Double, it won't accept values that are either too small or too large. Values must be in the range of -2^360 to 2^360.>
  take disable-scale-in, name <DisableScaleIn>
    like disable-scale-in
    void take
    note <Indicates whether scale in by the target tracking scaling policy is disabled. If the value is `true`, scale in is disabled and the target tracking scaling policy doesn't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking scaling policy can remove capacity from the scalable resource.

The default value is `false`.>
  take scale-out-cooldown, name <ScaleOutCooldown>
    like cooldown
    void take
    note <The amount of time, in seconds, to wait for a previous scale-out activity to take effect. This property is not used if the scalable resource is an Auto Scaling group.

With the _scale-out cooldown period_, the intention is to continuously (but not excessively) scale out. After Auto Scaling successfully scales out using a target tracking scaling policy, it starts to calculate the cooldown time. The scaling policy won't increase the desired capacity again unless either a larger scale out is triggered or the cooldown period ends.>
  take scale-in-cooldown, name <ScaleInCooldown>
    like cooldown
    void take
    note <The amount of time, in seconds, after a scale-in activity completes before another scale-in activity can start. This property is not used if the scalable resource is an Auto Scaling group.

With the _scale-in cooldown period_, the intention is to scale in conservatively to protect your applicationâ€™s availability, so scale-in activities are blocked until the cooldown period has expired. However, if another alarm triggers a scale-out activity during the scale-in cooldown period, Auto Scaling scales out the target immediately. In this case, the scale-in cooldown period stops and doesn't complete.>
  take estimated-instance-warmup, name <EstimatedInstanceWarmup>
    like cooldown
    void take
    note <The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This value is used only if the resource is an Auto Scaling group.>