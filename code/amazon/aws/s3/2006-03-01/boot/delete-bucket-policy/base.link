
load @termsurf/snow/base/native-boolean
  take form native-boolean

load @termsurf/snow/base/native-string
  take form native-string

boot delete-bucket-policy, name <DeleteBucketPolicy>
  deed delete
  note <This implementation of the DELETE action uses the policy subresource to delete the policy of a specified bucket. If you are using an identity other than the root user of the Amazon Web Services account that owns the bucket, the calling identity must have the `DeleteBucketPolicy` permissions on the specified bucket and belong to the bucket owner's account to use this operation.

If you don't have `DeleteBucketPolicy` permissions, Amazon S3 returns a `403 Access Denied` error. If you have the correct permissions, but you're not using an identity that belongs to the bucket owner's account, Amazon S3 returns a `405 Method Not Allowed` error.

As a security precaution, the root user of the Amazon Web Services account that owns a bucket can always use this operation, even if the policy explicitly denies the root user the ability to perform this action.

For more information about bucket policies, see [Using Bucket Policies and UserPolicies](https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html).

The following operations are related to `DeleteBucketPolicy`

- [CreateBucket](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html)

- [DeleteObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html)>

  take bucket
    like native-string
    note <The bucket name.>
  take x-amz-expected-bucket-owner
    like native-string
    note <The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP `403 (Access Denied)` error.>
    void take
  take policy
    like native-boolean

  line </{bucket}#policy>

  hint <x-amz-expected-bucket-owner>, loan x-amz-expected-bucket-owner

  find <policy>, loan policy

  loot 204
    note <Success>