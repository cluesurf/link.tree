
load @nerdbond/snow/amazonaws.com/s3/2006-03-01/base/copy-object-body
  take form copy-object-body

load @nerdbond/snow/amazonaws.com/s3/2006-03-01/base/copy-object-output
  take form copy-object-output

load @nerdbond/snow/amazonaws.com/s3/2006-03-01/base/object-not-in-active-tier-error
  take form object-not-in-active-tier-error

load @nerdbond/snow/base/native-boolean
  take form native-boolean

load @nerdbond/snow/base/native-string
  take form native-string

boot copy-object, name <CopyObject>
  deed put
  note <Creates a copy of an object that is already stored in Amazon S3.

You can store individual objects of up to 5 TB in Amazon S3. You create a copy of your object up to 5 GB in size in a single atomic action using this API. However, to copy an object greater than 5 GB, you must use the multipart upload Upload Part - Copy API. For more information, see [Copy Object Using the REST Multipart Upload API](https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjctsUsingRESTMPUapi.html).

All copy requests must be authenticated. Additionally, you must have _read_ access to the source object and _write_ access to the destination bucket. For more information, see [REST Authentication](https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html). Both the Region that you want to copy the object from and the Region that you want to copy the object to must be enabled for your account.

A copy request might return an error when Amazon S3 receives the copy request or while Amazon S3 is copying the files. If the error occurs before the copy action starts, you receive a standard Amazon S3 error. If the error occurs during the copy operation, the error response is embedded in the `200 OK` response. This means that a `200 OK` response can contain either a success or an error. Design your application to parse the contents of the response and handle it appropriately.

If the copy is successful, you receive a response with information about the copied object.

If the request is an HTTP 1.1 request, the response is chunk encoded. If it were not, it would not contain the content-length, and you would need to read the entire body.

The copy request charge is based on the storage class and Region that you specify for the destination object. For pricing information, see [Amazon S3 pricing](http://aws.amazon.com/s3/pricing/).

Amazon S3 transfer acceleration does not support cross-Region copies. If you request a cross-Region copy using a transfer acceleration endpoint, you get a 400 `Bad Request` error. For more information, see [Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html).

**Metadata** When copying an object, you can preserve all metadata (default) or specify new metadata. However, the ACL is not preserved and is set to private for the user making the request. To override the default ACL setting, specify a new ACL when generating a copy request. For more information, see [Using ACLs](https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html).

To specify whether you want the object metadata copied from the source object or replaced with metadata provided in the request, you can optionally add the `x-amz-metadata-directive` header. When you grant permissions, you can use the `s3:x-amz-metadata-directive` condition key to enforce certain metadata behavior when objects are uploaded. For more information, see [Specifying Conditions in a Policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html) in the _Amazon S3 User Guide_. For a complete list of Amazon S3-specific condition keys, see [Actions, Resources, and Condition Keys for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/list_amazons3.html).

**`x-amz-copy-source-if` Headers** To only copy an object under certain conditions, such as whether the `Etag` matches or whether the object was modified before or after a specified date, use the following request parameters:

- `x-amz-copy-source-if-match`

- `x-amz-copy-source-if-none-match`

- `x-amz-copy-source-if-unmodified-since`

- `x-amz-copy-source-if-modified-since`

If both the `x-amz-copy-source-if-match` and `x-amz-copy-source-if-unmodified-since` headers are present in the request and evaluate as follows, Amazon S3 returns `200 OK` and copies the data:

- `x-amz-copy-source-if-match` condition evaluates to true

- `x-amz-copy-source-if-unmodified-since` condition evaluates to false

If both the `x-amz-copy-source-if-none-match` and `x-amz-copy-source-if-modified-since` headers are present in the request and evaluate as follows, Amazon S3 returns the `412 Precondition Failed` response code:

- `x-amz-copy-source-if-none-match` condition evaluates to false

- `x-amz-copy-source-if-modified-since` condition evaluates to true

All headers with the `x-amz-` prefix, including `x-amz-copy-source`, must be signed.

**Server-side encryption** When you perform a CopyObject operation, you can optionally use the appropriate encryption-related headers to encrypt the object using server-side encryption with Amazon Web Services managed encryption keys (SSE-S3 or SSE-KMS) or a customer-provided encryption key. With server-side encryption, Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts the data when you access it. For more information about server-side encryption, see [Using Server-Side Encryption](https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html).

If a target object uses SSE-KMS, you can enable an S3 Bucket Key for the object. For more information, see [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) in the _Amazon S3 User Guide_.

**Access Control List (ACL)-Specific Request Headers** When copying an object, you can optionally use headers to grant ACL-based permissions. By default, all objects are private. Only the owner has full access control. When adding a new object, you can grant permissions to individual Amazon Web Services accounts or to predefined groups defined by Amazon S3. These permissions are then added to the ACL on the object. For more information, see [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html) and [Managing ACLs Using the REST API](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-using-rest-api.html).

**Storage Class Options** You can use the `CopyObject` action to change the storage class of an object that is already stored in Amazon S3 using the `StorageClass` parameter. For more information, see [Storage Classes](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html) in the _Amazon S3 User Guide_.

**Versioning** By default, `x-amz-copy-source` identifies the current version of an object to copy. If the current version is a delete marker, Amazon S3 behaves as if the object was deleted. To copy a different version, use the `versionId` subresource.

If you enable versioning on the target bucket, Amazon S3 generates a unique version ID for the object being copied. This version ID is different from the version ID of the source object. Amazon S3 returns the version ID of the copied object in the `x-amz-version-id` response header in the response.

If you do not enable versioning or suspend it on the target bucket, the version ID that Amazon S3 generates is always null.

If the source object's storage class is GLACIER, you must restore a copy of this object before you can use it as a source object for the copy operation. For more information, see [RestoreObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html).

The following operations are related to `CopyObject`:

- [PutObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html)

- [GetObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html)

For more information, see [Copying Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjectsExamples.html).>

  take bucket
    like native-string
    note <The name of the destination bucket.

When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form _AccessPointName_-_AccountId_.s3-accesspoint._Region_.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the _Amazon S3 User Guide_.

When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form _AccessPointName_-_AccountId_._outpostID_.s3-outposts._Region_.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [Using S3 on Outposts](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the _Amazon S3 User Guide_.>
  take key
    like native-string
    note <The key of the destination object.>
  take x-amz-acl
    like native-string
    note <The canned ACL to apply to the object.

This action is not supported by Amazon S3 on Outposts.>
    void take
  take cache-control
    like native-string
    note <Specifies caching behavior along the request/reply chain.>
    void take
  take content-disposition
    like native-string
    note <Specifies presentational information for the object.>
    void take
  take content-encoding
    like native-string
    note <Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.>
    void take
  take content-language
    like native-string
    note <The language the content is in.>
    void take
  take content-type
    like native-string
    note <A standard MIME type describing the format of the object data.>
    void take
  take x-amz-copy-source
    like native-string
    note <Specifies the source object for the copy operation. You specify the value in one of two formats, depending on whether you want to access the source object through an [access point](https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html):

- For objects not accessed through an access point, specify the name of the source bucket and the key of the source object, separated by a slash (/). For example, to copy the object `reports/january.pdf` from the bucket `awsexamplebucket`, use `awsexamplebucket/reports/january.pdf`. The value must be URL encoded.

- For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format `arn:aws:s3:&lt;Region&gt;:&lt;account-id&gt;:accesspoint/&lt;access-point-name&gt;/object/&lt;key&gt;`. For example, to copy the object `reports/january.pdf` through access point `my-access-point` owned by account `123456789012` in Region `us-west-2`, use the URL encoding of `arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf`. The value must be URL encoded.

  Amazon S3 supports copy operations using access points only when the source and destination buckets are in the same Amazon Web Services Region.

  Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format `arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/object/&lt;key&gt;`. For example, to copy the object `reports/january.pdf` through outpost `my-outpost` owned by account `123456789012` in Region `us-west-2`, use the URL encoding of `arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf`. The value must be URL encoded.

To copy a specific version of an object, append `?versionId=&lt;version-id&gt;` to the value (for example, `awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893`). If you don't specify a version ID, Amazon S3 copies the latest version of the source object.>
  take x-amz-copy-source-if-match
    like native-string
    note <Copies the object if its entity tag (ETag) matches the specified tag.>
    void take
  take x-amz-copy-source-if-modified-since
    like native-string
    note <Copies the object if it has been modified since the specified time.>
    void take
  take x-amz-copy-source-if-none-match
    like native-string
    note <Copies the object if its entity tag (ETag) is different than the specified ETag.>
    void take
  take x-amz-copy-source-if-unmodified-since
    like native-string
    note <Copies the object if it hasn't been modified since the specified time.>
    void take
  take expires
    like native-string
    note <The date and time at which the object is no longer cacheable.>
    void take
  take x-amz-grant-full-control
    like native-string
    note <Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.

This action is not supported by Amazon S3 on Outposts.>
    void take
  take x-amz-grant-read
    like native-string
    note <Allows grantee to read the object data and its metadata.

This action is not supported by Amazon S3 on Outposts.>
    void take
  take x-amz-grant-read-acp
    like native-string
    note <Allows grantee to read the object ACL.

This action is not supported by Amazon S3 on Outposts.>
    void take
  take x-amz-grant-write-acp
    like native-string
    note <Allows grantee to write the ACL for the applicable object.

This action is not supported by Amazon S3 on Outposts.>
    void take
  take x-amz-metadata-directive
    like native-string
    note <Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request.>
    void take
  take x-amz-tagging-directive
    like native-string
    note <Specifies whether the object tag-set are copied from the source object or replaced with tag-set provided in the request.>
    void take
  take x-amz-server-side-encryption
    like native-string
    note <The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).>
    void take
  take x-amz-storage-class
    like native-string
    note <By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class provides high durability and high availability. Depending on performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses the OUTPOSTS Storage Class. For more information, see [Storage Classes](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html) in the _Amazon S3 User Guide_.>
    void take
  take x-amz-website-redirect-location
    like native-string
    note <If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.>
    void take
  take x-amz-server-side-encryption-customer-algorithm
    like native-string
    note <Specifies the algorithm to use to when encrypting the object (for example, AES256).>
    void take
  take x-amz-server-side-encryption-customer-key
    like native-string
    note <Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header.>
    void take
  take x-amz-server-side-encryption-customer-key-md5
    like native-string
    note <Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.>
    void take
  take x-amz-server-side-encryption-aws-kms-key-id
    like native-string
    note <Specifies the Amazon Web Services KMS key ID to use for object encryption. All GET and PUT requests for an object protected by Amazon Web Services KMS will fail if not made via SSL or using SigV4. For information about configuring using any of the officially supported Amazon Web Services SDKs and Amazon Web Services CLI, see [Specifying the Signature Version in Request Authentication](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version) in the _Amazon S3 User Guide_.>
    void take
  take x-amz-server-side-encryption-context
    like native-string
    note <Specifies the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs.>
    void take
  take x-amz-server-side-encryption-bucket-key-enabled
    like native-boolean
    note <Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using AWS KMS (SSE-KMS). Setting this header to `true` causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS.

Specifying this header with a COPY action doesn’t affect bucket-level settings for S3 Bucket Key.>
    void take
  take x-amz-copy-source-server-side-encryption-customer-algorithm
    like native-string
    note <Specifies the algorithm to use when decrypting the source object (for example, AES256).>
    void take
  take x-amz-copy-source-server-side-encryption-customer-key
    like native-string
    note <Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.>
    void take
  take x-amz-copy-source-server-side-encryption-customer-key-md5
    like native-string
    note <Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.>
    void take
  take x-amz-request-payer
    like native-string
    void take
  take x-amz-tagging
    like native-string
    note <The tag-set for the object destination object this value must be used in conjunction with the `TaggingDirective`. The tag-set must be encoded as URL Query parameters.>
    void take
  take x-amz-object-lock-mode
    like native-string
    note <The Object Lock mode that you want to apply to the copied object.>
    void take
  take x-amz-object-lock-retain-until-date
    like native-string
    note <The date and time when you want the copied object's Object Lock to expire.>
    void take
  take x-amz-object-lock-legal-hold
    like native-string
    note <Specifies whether you want to apply a Legal Hold to the copied object.>
    void take
  take x-amz-expected-bucket-owner
    like native-string
    note <The account ID of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP `403 (Access Denied)` error.>
    void take
  take x-amz-source-expected-bucket-owner
    like native-string
    note <The account ID of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP `403 (Access Denied)` error.>
    void take
  take copy-object-body, like copy-object-body

  line </{bucket}/{key}#x-amz-copy-source>

  hint <x-amz-acl>, loan x-amz-acl
  hint <Cache-Control>, loan cache-control
  hint <Content-Disposition>, loan content-disposition
  hint <Content-Encoding>, loan content-encoding
  hint <Content-Language>, loan content-language
  hint <Content-Type>, loan content-type
  hint <x-amz-copy-source>, loan x-amz-copy-source
  hint <x-amz-copy-source-if-match>, loan x-amz-copy-source-if-match
  hint <x-amz-copy-source-if-modified-since>, loan x-amz-copy-source-if-modified-since
  hint <x-amz-copy-source-if-none-match>, loan x-amz-copy-source-if-none-match
  hint <x-amz-copy-source-if-unmodified-since>, loan x-amz-copy-source-if-unmodified-since
  hint <Expires>, loan expires
  hint <x-amz-grant-full-control>, loan x-amz-grant-full-control
  hint <x-amz-grant-read>, loan x-amz-grant-read
  hint <x-amz-grant-read-acp>, loan x-amz-grant-read-acp
  hint <x-amz-grant-write-acp>, loan x-amz-grant-write-acp
  hint <x-amz-metadata-directive>, loan x-amz-metadata-directive
  hint <x-amz-tagging-directive>, loan x-amz-tagging-directive
  hint <x-amz-server-side-encryption>, loan x-amz-server-side-encryption
  hint <x-amz-storage-class>, loan x-amz-storage-class
  hint <x-amz-website-redirect-location>, loan x-amz-website-redirect-location
  hint <x-amz-server-side-encryption-customer-algorithm>, loan x-amz-server-side-encryption-customer-algorithm
  hint <x-amz-server-side-encryption-customer-key>, loan x-amz-server-side-encryption-customer-key
  hint <x-amz-server-side-encryption-customer-key-MD5>, loan x-amz-server-side-encryption-customer-key-md5
  hint <x-amz-server-side-encryption-aws-kms-key-id>, loan x-amz-server-side-encryption-aws-kms-key-id
  hint <x-amz-server-side-encryption-context>, loan x-amz-server-side-encryption-context
  hint <x-amz-server-side-encryption-bucket-key-enabled>, loan x-amz-server-side-encryption-bucket-key-enabled
  hint <x-amz-copy-source-server-side-encryption-customer-algorithm>, loan x-amz-copy-source-server-side-encryption-customer-algorithm
  hint <x-amz-copy-source-server-side-encryption-customer-key>, loan x-amz-copy-source-server-side-encryption-customer-key
  hint <x-amz-copy-source-server-side-encryption-customer-key-MD5>, loan x-amz-copy-source-server-side-encryption-customer-key-md5
  hint <x-amz-request-payer>, loan x-amz-request-payer
  hint <x-amz-tagging>, loan x-amz-tagging
  hint <x-amz-object-lock-mode>, loan x-amz-object-lock-mode
  hint <x-amz-object-lock-retain-until-date>, loan x-amz-object-lock-retain-until-date
  hint <x-amz-object-lock-legal-hold>, loan x-amz-object-lock-legal-hold
  hint <x-amz-expected-bucket-owner>, loan x-amz-expected-bucket-owner
  hint <x-amz-source-expected-bucket-owner>, loan x-amz-source-expected-bucket-owner

  seed xml, loan copy-object-body

  loot 200
    seed xml, like copy-object-output
    note <Success>
  loot 480
    seed xml, like object-not-in-active-tier-error
    note <ObjectNotInActiveTierError>