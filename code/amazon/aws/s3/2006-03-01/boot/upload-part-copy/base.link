
load @drumwork/snow/amazonaws.com/s3/2006-03-01/base/upload-part-copy-output
  take form upload-part-copy-output

load @drumwork/snow/base/native-integer
  take form native-integer

load @drumwork/snow/base/native-string
  take form native-string

boot upload-part-copy, name <UploadPartCopy>
  note <Uploads a part by copying data from an existing object as data source. You specify the data source by adding the request header `x-amz-copy-source` in your request and a byte range by adding the request header `x-amz-copy-source-range` in your request.

The minimum allowable part size for a multipart upload is 5 MB. For more information about multipart upload limits, go to [Quick Facts](https://docs.aws.amazon.com/AmazonS3/latest/dev/qfacts.html) in the _Amazon S3 User Guide_.

Instead of using an existing object as part data, you might use the [UploadPart](https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html) action and provide data in your request.

You must initiate a multipart upload before you can upload any part. In response to your initiate request. Amazon S3 returns a unique identifier, the upload ID, that you must include in your upload part request.

For more information about using the `UploadPartCopy` operation, see the following:

- For conceptual information about multipart uploads, see [Uploading Objects Using Multipart Upload](https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html) in the _Amazon S3 User Guide_.

- For information about permissions required to use the multipart upload API, see [Multipart Upload and Permissions](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html) in the _Amazon S3 User Guide_.

- For information about copying objects using a single atomic action vs. the multipart upload, see [Operations on Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectOperations.html) in the _Amazon S3 User Guide_.

- For information about using server-side encryption with customer-provided encryption keys with the UploadPartCopy operation, see [CopyObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html) and [UploadPart](https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html).

Note the following additional considerations about the request headers `x-amz-copy-source-if-match`, `x-amz-copy-source-if-none-match`, `x-amz-copy-source-if-unmodified-since`, and `x-amz-copy-source-if-modified-since`:

- **Consideration 1** - If both of the `x-amz-copy-source-if-match` and `x-amz-copy-source-if-unmodified-since` headers are present in the request as follows:

  `x-amz-copy-source-if-match` condition evaluates to `true`, and;

  `x-amz-copy-source-if-unmodified-since` condition evaluates to `false`;

  Amazon S3 returns `200 OK` and copies the data.

- **Consideration 2** - If both of the `x-amz-copy-source-if-none-match` and `x-amz-copy-source-if-modified-since` headers are present in the request as follows:

  `x-amz-copy-source-if-none-match` condition evaluates to `false`, and;

  `x-amz-copy-source-if-modified-since` condition evaluates to `true`;

  Amazon S3 returns `412 Precondition Failed` response code.

**Versioning** If your bucket has versioning enabled, you could have multiple versions of the same object. By default, `x-amz-copy-source` identifies the current version of the object to copy. If the current version is a delete marker and you don't specify a versionId in the `x-amz-copy-source`, Amazon S3 returns a 404 error, because the object does not exist. If you specify versionId in the `x-amz-copy-source` and the versionId is a delete marker, Amazon S3 returns an HTTP 400 error, because you are not allowed to specify a delete marker as a version for the `x-amz-copy-source`.

You can optionally specify a specific version of the source object to copy by adding the `versionId` subresource as shown in the following example:

`x-amz-copy-source: /bucket/object?versionId=version id`

**Special Errors** - - _Code: NoSuchUpload_

  - _Cause: The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed._

  - _HTTP Status Code: 404 Not Found_

- - _Code: InvalidRequest_

  - _Cause: The specified copy source is not supported as a byte-range copy source._

  - _HTTP Status Code: 400 Bad Request_

**Related Resources** - [CreateMultipartUpload](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html)

- [UploadPart](https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html)

- [CompleteMultipartUpload](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html)

- [AbortMultipartUpload](https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html)

- [ListParts](https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html)

- [ListMultipartUploads](https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html)>

  take bucket
    like native-string
    note <The bucket name.

When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form _AccessPointName_-_AccountId_.s3-accesspoint._Region_.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the _Amazon S3 User Guide_.

When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form _AccessPointName_-_AccountId_._outpostID_.s3-outposts._Region_.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [Using S3 on Outposts](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the _Amazon S3 User Guide_.>
  take key
    like native-string
    note <Object key for which the multipart upload was initiated.>
  take x-amz-copy-source
    like native-string
    note <Specifies the source object for the copy operation. You specify the value in one of two formats, depending on whether you want to access the source object through an [access point](https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html):

- For objects not accessed through an access point, specify the name of the source bucket and key of the source object, separated by a slash (/). For example, to copy the object `reports/january.pdf` from the bucket `awsexamplebucket`, use `awsexamplebucket/reports/january.pdf`. The value must be URL encoded.

- For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format `arn:aws:s3:&lt;Region&gt;:&lt;account-id&gt;:accesspoint/&lt;access-point-name&gt;/object/&lt;key&gt;`. For example, to copy the object `reports/january.pdf` through access point `my-access-point` owned by account `123456789012` in Region `us-west-2`, use the URL encoding of `arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf`. The value must be URL encoded.

  Amazon S3 supports copy operations using access points only when the source and destination buckets are in the same Amazon Web Services Region.

  Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format `arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/object/&lt;key&gt;`. For example, to copy the object `reports/january.pdf` through outpost `my-outpost` owned by account `123456789012` in Region `us-west-2`, use the URL encoding of `arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf`. The value must be URL encoded.

To copy a specific version of an object, append `?versionId=&lt;version-id&gt;` to the value (for example, `awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893`). If you don't specify a version ID, Amazon S3 copies the latest version of the source object.>
  take x-amz-copy-source-if-match
    like native-string
    note <Copies the object if its entity tag (ETag) matches the specified tag.>
    void take
  take x-amz-copy-source-if-modified-since
    like native-string
    note <Copies the object if it has been modified since the specified time.>
    void take
  take x-amz-copy-source-if-none-match
    like native-string
    note <Copies the object if its entity tag (ETag) is different than the specified ETag.>
    void take
  take x-amz-copy-source-if-unmodified-since
    like native-string
    note <Copies the object if it hasn't been modified since the specified time.>
    void take
  take x-amz-copy-source-range
    like native-string
    note <The range of bytes to copy from the source object. The range value must use the form bytes=first-last, where the first and last are the zero-based byte offsets to copy. For example, bytes=0-9 indicates that you want to copy the first 10 bytes of the source. You can copy a range only if the source object is greater than 5 MB.>
    void take
  take x-amz-server-side-encryption-customer-algorithm
    like native-string
    note <Specifies the algorithm to use to when encrypting the object (for example, AES256).>
    void take
  take x-amz-server-side-encryption-customer-key
    like native-string
    note <Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header. This must be the same encryption key specified in the initiate multipart upload request.>
    void take
  take x-amz-server-side-encryption-customer-key-md5
    like native-string
    note <Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.>
    void take
  take x-amz-copy-source-server-side-encryption-customer-algorithm
    like native-string
    note <Specifies the algorithm to use when decrypting the source object (for example, AES256).>
    void take
  take x-amz-copy-source-server-side-encryption-customer-key
    like native-string
    note <Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.>
    void take
  take x-amz-copy-source-server-side-encryption-customer-key-md5
    like native-string
    note <Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.>
    void take
  take x-amz-request-payer
    like native-string
    void take
  take x-amz-expected-bucket-owner
    like native-string
    note <The account ID of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP `403 (Access Denied)` error.>
    void take
  take x-amz-source-expected-bucket-owner
    like native-string
    note <The account ID of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP `403 (Access Denied)` error.>
    void take
  take part-number
    like native-integer
    note <Part number of part being copied. This is a positive integer between 1 and 10,000.>
  take upload-id
    like native-string
    note <Upload ID identifying the multipart upload whose part is being copied.>

  line </{bucket}/{key}#x-amz-copy-source&partNumber&uploadId>

  hint <x-amz-copy-source>, loan x-amz-copy-source
  hint <x-amz-copy-source-if-match>, loan x-amz-copy-source-if-match
  hint <x-amz-copy-source-if-modified-since>, loan x-amz-copy-source-if-modified-since
  hint <x-amz-copy-source-if-none-match>, loan x-amz-copy-source-if-none-match
  hint <x-amz-copy-source-if-unmodified-since>, loan x-amz-copy-source-if-unmodified-since
  hint <x-amz-copy-source-range>, loan x-amz-copy-source-range
  hint <x-amz-server-side-encryption-customer-algorithm>, loan x-amz-server-side-encryption-customer-algorithm
  hint <x-amz-server-side-encryption-customer-key>, loan x-amz-server-side-encryption-customer-key
  hint <x-amz-server-side-encryption-customer-key-MD5>, loan x-amz-server-side-encryption-customer-key-md5
  hint <x-amz-copy-source-server-side-encryption-customer-algorithm>, loan x-amz-copy-source-server-side-encryption-customer-algorithm
  hint <x-amz-copy-source-server-side-encryption-customer-key>, loan x-amz-copy-source-server-side-encryption-customer-key
  hint <x-amz-copy-source-server-side-encryption-customer-key-MD5>, loan x-amz-copy-source-server-side-encryption-customer-key-md5
  hint <x-amz-request-payer>, loan x-amz-request-payer
  hint <x-amz-expected-bucket-owner>, loan x-amz-expected-bucket-owner
  hint <x-amz-source-expected-bucket-owner>, loan x-amz-source-expected-bucket-owner

  find <partNumber>, loan part-number
  find <uploadId>, loan upload-id

  loot 200
    seed xml, like upload-part-copy-output
    note <Success>