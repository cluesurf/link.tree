
load @drumwork/snow/amazonaws.com/apigateway/2015-07-09/base/double
  take form double

load @drumwork/snow/amazonaws.com/apigateway/2015-07-09/base/unauthorized-cache-control-header-strategy
  take form unauthorized-cache-control-header-strategy

load @drumwork/snow/base/boolean
  take form boolean

load @drumwork/snow/base/integer
  take form integer

load @drumwork/snow/base/string
  take form string

form method-setting, name <MethodSetting>
  note <Specifies the method setting properties.>
  take metrics-enabled, name <metricsEnabled>
    like boolean
    void take
    note <Specifies whether Amazon CloudWatch metrics are enabled for this method. The PATCH path for this setting is `/{method_setting_key}/metrics/enabled`, and the value is a Boolean.>
  take logging-level, name <loggingLevel>
    like string
    void take
    note <Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is `/{method_setting_key}/logging/loglevel`, and the available levels are `OFF`, `ERROR`, and `INFO`. Choose `ERROR` to write only error-level entries to CloudWatch Logs, or choose `INFO` to include all `ERROR` events as well as extra informational events.>
  take data-trace-enabled, name <dataTraceEnabled>
    like boolean
    void take
    note <Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is `/{method_setting_key}/logging/dataTrace`, and the value is a Boolean.>
  take throttling-burst-limit, name <throttlingBurstLimit>
    like integer
    void take
    note <Specifies the throttling burst limit. The PATCH path for this setting is `/{method_setting_key}/throttling/burstLimit`, and the value is an integer.>
  take throttling-rate-limit, name <throttlingRateLimit>
    like double
    void take
    note <Specifies the throttling rate limit. The PATCH path for this setting is `/{method_setting_key}/throttling/rateLimit`, and the value is a double.>
  take caching-enabled, name <cachingEnabled>
    like boolean
    void take
    note <Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. The PATCH path for this setting is `/{method_setting_key}/caching/enabled`, and the value is a Boolean.>
  take cache-ttl-in-seconds, name <cacheTtlInSeconds>
    like integer
    void take
    note <Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached. The PATCH path for this setting is `/{method_setting_key}/caching/ttlInSeconds`, and the value is an integer.>
  take cache-data-encrypted, name <cacheDataEncrypted>
    like boolean
    void take
    note <Specifies whether the cached responses are encrypted. The PATCH path for this setting is `/{method_setting_key}/caching/dataEncrypted`, and the value is a Boolean.>
  take require-authorization-for-cache-control, name <requireAuthorizationForCacheControl>
    like boolean
    void take
    note <Specifies whether authorization is required for a cache invalidation request. The PATCH path for this setting is `/{method_setting_key}/caching/requireAuthorizationForCacheControl`, and the value is a Boolean.>
  take unauthorized-cache-control-header-strategy, name <unauthorizedCacheControlHeaderStrategy>
    like unauthorized-cache-control-header-strategy
    void take
    note <Specifies how to handle unauthorized requests for cache invalidation. The PATCH path for this setting is `/{method_setting_key}/caching/unauthorizedCacheControlHeaderStrategy`, and the available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.>