
load @termsurf/snow/amazonaws.com/apigateway/2015-07-09/base/connection-type
  take form connection-type

load @termsurf/snow/amazonaws.com/apigateway/2015-07-09/base/content-handling-strategy
  take form content-handling-strategy

load @termsurf/snow/amazonaws.com/apigateway/2015-07-09/base/integration-type
  take form integration-type

load @termsurf/snow/amazonaws.com/apigateway/2015-07-09/base/list-of-string
  take form list-of-string

load @termsurf/snow/amazonaws.com/apigateway/2015-07-09/base/map-of-string-to-string
  take form map-of-string-to-string

load @termsurf/snow/amazonaws.com/apigateway/2015-07-09/base/nullable-integer
  take form nullable-integer

load @termsurf/snow/amazonaws.com/apigateway/2015-07-09/base/tls-config
  take form tls-config

load @termsurf/snow/base/string
  take form string

form put-integration-request, name <PutIntegrationRequest>
  note <Sets up a method's integration.>
  take type, name <type>
    like integration-type
    note <[Required] Specifies a put integration input's type.>
  take integration-http-method, name <integrationHttpMethod>
    like string
    void take
    note <Specifies a put integration HTTP method. When the integration type is HTTP or AWS, this field is required.>
    host xml
      host name, text <httpMethod>
  take uri, name <uri>
    like string
    void take
    note <Specifies Uniform Resource Identifier (URI) of the integration endpoint.

- For `HTTP` or `HTTP_PROXY` integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the [RFC-3986 specification](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier), for either standard integration, where `connectionType` is not `VPC_LINK`, or private integration, where `connectionType` is `VPC_LINK`. For a private HTTP integration, the URI is not used for routing.

- For `AWS` or `AWS_PROXY` integrations, the URI is of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}`. Here, `{Region}` is the API Gateway region (e.g., `us-east-1`); `{service}` is the name of the integrated AWS service (e.g., `s3`); and `{subdomain}` is a designated subdomain supported by certain AWS service for fast host-name lookup. `action` can be used for an AWS service action-based API, using an `Action={name}&{p1}={v1}&p2={v2}...` query string. The ensuing `{service_api}` refers to a supported action `{name}` plus any required input parameters. Alternatively, `path` can be used for an AWS service path-based API. The ensuing `service_api` refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of `[GetObject](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html)`, the `uri` can be either `arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key}` or `arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}`>
  take connection-type, name <connectionType>
    like connection-type
    void take
    note <The type of the network connection to the integration endpoint. The valid value is `INTERNET` for connections through the public routable internet or `VPC_LINK` for private connections between API Gateway and a network load balancer in a VPC. The default value is `INTERNET`.>
  take connection-id, name <connectionId>
    like string
    void take
    note <The ([`id`](https://docs.aws.amazon.com/apigateway/api-reference/resource/vpc-link/#id)) of the VpcLink used for the integration when `connectionType=VPC_LINK` and undefined, otherwise.>
  take credentials, name <credentials>
    like string
    void take
    note <Specifies whether credentials are required for a put integration.>
  take request-parameters, name <requestParameters>
    like map-of-string-to-string
    void take
    note <A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of `method.request.{location}.{name}`, where `location` is `querystring`, `path`, or `header` and `name` must be a valid and unique method request parameter name.>
  take request-templates, name <requestTemplates>
    like map-of-string-to-string
    void take
    note <Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.>
  take passthrough-behavior, name <passthroughBehavior>
    like string
    void take
    note <Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the `requestTemplates` property on the Integration resource. There are three valid values: `WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, and `NEVER`.

- `WHEN_NO_MATCH` passes the request body for unmapped content types through to the integration back end without transformation.

- `NEVER` rejects unmapped content types with an HTTP 415 'Unsupported Media Type' response.

- `WHEN_NO_TEMPLATES` allows pass-through when the integration has NO content types mapped to templates. However if there is at least one content type defined, unmapped content types will be rejected with the same 415 response.>
  take cache-namespace, name <cacheNamespace>
    like string
    void take
    note <Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the `cacheNamespace`. You can specify the same `cacheNamespace` across resources to return the same cached data for requests to different resources.>
  take cache-key-parameters, name <cacheKeyParameters>
    like list-of-string
    void take
    note <A list of request parameters whose values API Gateway caches. To be valid values for `cacheKeyParameters`, these parameters must also be specified for Method `requestParameters`.>
  take content-handling, name <contentHandling>
    like content-handling-strategy
    void take
    note <Specifies how to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`, with the following behaviors:

- `CONVERT_TO_BINARY`: Converts a request payload from a Base64-encoded string to the corresponding binary blob.

- `CONVERT_TO_TEXT`: Converts a request payload from a binary blob to a Base64-encoded string.

If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the `passthroughBehavior` is configured to support payload pass-through.>
  take timeout-in-millis, name <timeoutInMillis>
    like nullable-integer
    void take
    note <Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.>
  take tls-config, name <tlsConfig>
    like tls-config
    void take
