
load @textsurf/snow/amazonaws.com/events/2015-10-07/base/concurrent-modification-exception
  take form concurrent-modification-exception

load @textsurf/snow/amazonaws.com/events/2015-10-07/base/internal-exception
  take form internal-exception

load @textsurf/snow/amazonaws.com/events/2015-10-07/base/invalid-event-pattern-exception
  take form invalid-event-pattern-exception

load @textsurf/snow/amazonaws.com/events/2015-10-07/base/limit-exceeded-exception
  take form limit-exceeded-exception

load @textsurf/snow/amazonaws.com/events/2015-10-07/base/managed-rule-exception
  take form managed-rule-exception

load @textsurf/snow/amazonaws.com/events/2015-10-07/base/put-rule-response
  take form put-rule-response

load @textsurf/snow/amazonaws.com/events/2015-10-07/base/resource-not-found-exception
  take form resource-not-found-exception

load @textsurf/snow/base/native-string
  take form native-string

boot put-rule, name <PutRule>
  deed post
  note <Creates or updates the specified rule. Rules are enabled by default, or based on value of the state. You can disable a rule using [DisableRule](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_DisableRule.html).

A single rule watches for events from a single event bus. Events generated by Amazon Web Services services go to your account's default event bus. Events generated by SaaS partner services or applications go to the matching partner event bus. If you have custom applications or services, you can specify whether their events go to your default event bus or a custom event bus that you have created. For more information, see [CreateEventBus](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_CreateEventBus.html).

If you are updating an existing rule, the rule is replaced with what you specify in this `PutRule` command. If you omit arguments in `PutRule`, the old values for those arguments are not kept. Instead, they are replaced with null values.

When you create or update a rule, incoming events might not immediately start matching to new or updated rules. Allow a short period of time for changes to take effect.

A rule must contain at least an EventPattern or ScheduleExpression. Rules with EventPatterns are triggered when a matching event is observed. Rules with ScheduleExpressions self-trigger based on the given schedule. A rule can have both an EventPattern and a ScheduleExpression, in which case the rule triggers on matching events as well as on a schedule.

When you initially create a rule, you can optionally assign one or more tags to the rule. Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only rules with certain tag values. To use the `PutRule` operation and assign tags, you must have both the `events:PutRule` and `events:TagResource` permissions.

If you are updating an existing rule, any tags you specify in the `PutRule` operation are ignored. To update the tags of an existing rule, use [TagResource](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_TagResource.html) and [UntagResource](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_UntagResource.html).

Most services in Amazon Web Services treat : or / as the same character in Amazon Resource Names (ARNs). However, EventBridge uses an exact match in event patterns and rules. Be sure to use the correct ARN characters when creating event patterns so that they match the ARN syntax in the event you want to match.

In EventBridge, it is possible to create rules that lead to infinite loops, where a rule is fired repeatedly. For example, a rule might detect that ACLs have changed on an S3 bucket, and trigger software to change them to the desired state. If the rule is not written carefully, the subsequent change to the ACLs fires the rule again, creating an infinite loop.

To prevent this, write the rules so that the triggered actions do not re-fire the same rule. For example, your rule could fire only if ACLs are found to be in a bad state, instead of after any change.

An infinite loop can quickly cause higher than expected charges. We recommend that you use budgeting, which alerts you when charges exceed your specified limit. For more information, see [Managing Your Costs with Budgets](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/budgets-managing-costs.html).>

  take x-amz-target
    like native-string
  take put-rule-request, like put-rule-request

  line </#X-Amz-Target=AWSEvents.PutRule>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan put-rule-request

  loot 200
    seed json, like put-rule-response
    note <Success>
  loot 480
    seed json, like invalid-event-pattern-exception
    note <InvalidEventPatternException>
  loot 481
    seed json, like limit-exceeded-exception
    note <LimitExceededException>
  loot 482
    seed json, like concurrent-modification-exception
    note <ConcurrentModificationException>
  loot 483
    seed json, like managed-rule-exception
    note <ManagedRuleException>
  loot 484
    seed json, like internal-exception
    note <InternalException>
  loot 485
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>