
load @termsurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/component-type
  take form component-type

load @termsurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/date-time
  take form date-time

load @termsurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/image-builder-arn
  take form image-builder-arn

load @termsurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/non-empty-string
  take form non-empty-string

load @termsurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/os-version-list
  take form os-version-list

load @termsurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/platform
  take form platform

load @termsurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/resource-name
  take form resource-name

load @termsurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/version-number
  take form version-number

form component-version, name <ComponentVersion>
  note <The defining characteristics of a specific version of an Amazon Web Services TOE component.>
  take arn, name <arn>
    like image-builder-arn
    void take
    note <The Amazon Resource Name (ARN) of the component.

Semantic versioning is included in each object's Amazon Resource Name (ARN), at the level that applies to that object as follows:

1. Versionless ARNs and Name ARNs do not include specific values in any of the nodes. The nodes are either left off entirely, or they are specified as wildcards, for example: x.x.x.

2. Version ARNs have only the first three nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;

3. Build version ARNs have all four nodes, and point to a specific build for a specific version of an object.>
  take name, name <name>
    like resource-name
    void take
    note <The name of the component.>
  take version, name <version>
    like version-number
    void take
    note <The semantic version of the component.

The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.

**Assignment:** For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number, and that is not open for updates.

**Patterns:** You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.

**Filtering:** When you retrieve or reference a resource with a semantic version, you can use wildcards (x) to filter your results. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards. For example, specifying "1.2.x", or "1.x.x" works to filter list results, but neither "1.x.2", nor "x.2.x" will work. You do not have to specify the build - Image Builder automatically uses a wildcard for that, if applicable.>
  take description, name <description>
    like non-empty-string
    void take
    note <The description of the component.>
  take platform, name <platform>
    like platform
    void take
    note <The platform of the component.>
  take supported-os-versions, name <supportedOsVersions>
    like os-version-list
    void take
    note <he operating system (OS) version supported by the component. If the OS information is available, a prefix match is performed against the parent image OS version during image recipe creation.>
  take type, name <type>
    like component-type
    void take
    note <The type of the component denotes whether the component is used to build the image or only to test it.>
  take owner, name <owner>
    like non-empty-string
    void take
    note <The owner of the component.>
  take date-created, name <dateCreated>
    like date-time
    void take
    note <The date that the component was created.>