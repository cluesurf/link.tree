
load @treesurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/client-token
  take form client-token

load @treesurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/inline-component-data
  take form inline-component-data

load @treesurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/non-empty-string
  take form non-empty-string

load @treesurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/os-version-list
  take form os-version-list

load @treesurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/platform
  take form platform

load @treesurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/resource-name
  take form resource-name

load @treesurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/tag-map
  take form tag-map

load @treesurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/uri
  take form uri

load @treesurf/snow/amazonaws.com/imagebuilder/2019-12-02/base/version-number
  take form version-number

form create-component-request, name <CreateComponentRequest>
  take name, name <name>
    like resource-name
    note <The name of the component.>
  take semantic-version, name <semanticVersion>
    like version-number
    note <The semantic version of the component. This version follows the semantic version syntax.

The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.

**Assignment:** For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number, and that is not open for updates.

**Patterns:** You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.>
  take description, name <description>
    like non-empty-string
    void take
    note <The description of the component. Describes the contents of the component.>
  take change-description, name <changeDescription>
    like non-empty-string
    void take
    note <The change description of the component. Describes what change has been made in this version, or what makes this version different from other versions of this component.>
  take platform, name <platform>
    like platform
    note <The platform of the component.>
  take supported-os-versions, name <supportedOsVersions>
    like os-version-list
    void take
    note <The operating system (OS) version supported by the component. If the OS information is available, a prefix match is performed against the parent image OS version during image recipe creation.>
  take data, name <data>
    like inline-component-data
    void take
    note <The data of the component. Used to specify the data inline. Either `data` or `uri` can be used to specify the data within the component.>
  take uri, name <uri>
    like uri
    void take
    note <The uri of the component. Must be an Amazon S3 URL and the requester must have permission to access the Amazon S3 bucket. If you use Amazon S3, you can specify component content up to your service quota. Either `data` or `uri` can be used to specify the data within the component.>
  take kms-key-id, name <kmsKeyId>
    like non-empty-string
    void take
    note <The ID of the KMS key that should be used to encrypt this component.>
  take tags, name <tags>
    like tag-map
    void take
    note <The tags of the component.>
  take client-token, name <clientToken>
    like client-token
    note <The idempotency token of the component.>