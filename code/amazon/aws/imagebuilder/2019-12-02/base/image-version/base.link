
load @nerdbond/snow/amazonaws.com/imagebuilder/2019-12-02/base/date-time
  take form date-time

load @nerdbond/snow/amazonaws.com/imagebuilder/2019-12-02/base/image-builder-arn
  take form image-builder-arn

load @nerdbond/snow/amazonaws.com/imagebuilder/2019-12-02/base/image-type
  take form image-type

load @nerdbond/snow/amazonaws.com/imagebuilder/2019-12-02/base/non-empty-string
  take form non-empty-string

load @nerdbond/snow/amazonaws.com/imagebuilder/2019-12-02/base/os-version
  take form os-version

load @nerdbond/snow/amazonaws.com/imagebuilder/2019-12-02/base/platform
  take form platform

load @nerdbond/snow/amazonaws.com/imagebuilder/2019-12-02/base/resource-name
  take form resource-name

load @nerdbond/snow/amazonaws.com/imagebuilder/2019-12-02/base/version-number
  take form version-number

form image-version, name <ImageVersion>
  note <The defining characteristics of a specific version of an Image Builder image.>
  take arn, name <arn>
    like image-builder-arn
    void take
    note <The Amazon Resource Name (ARN) of a specific version of an Image Builder image.

Semantic versioning is included in each object's Amazon Resource Name (ARN), at the level that applies to that object as follows:

1. Versionless ARNs and Name ARNs do not include specific values in any of the nodes. The nodes are either left off entirely, or they are specified as wildcards, for example: x.x.x.

2. Version ARNs have only the first three nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;

3. Build version ARNs have all four nodes, and point to a specific build for a specific version of an object.>
  take name, name <name>
    like resource-name
    void take
    note <The name of this specific version of an Image Builder image.>
  take type, name <type>
    like image-type
    void take
    note <Specifies whether this image is an AMI or a container image.>
  take version, name <version>
    like version-number
    void take
    note <Details for a specific version of an Image Builder image. This version follows the semantic version syntax.

The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.

**Assignment:** For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number, and that is not open for updates.

**Patterns:** You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.

**Filtering:** When you retrieve or reference a resource with a semantic version, you can use wildcards (x) to filter your results. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards. For example, specifying "1.2.x", or "1.x.x" works to filter list results, but neither "1.x.2", nor "x.2.x" will work. You do not have to specify the build - Image Builder automatically uses a wildcard for that, if applicable.>
  take platform, name <platform>
    like platform
    void take
    note <The platform of the image version, for example "Windows" or "Linux".>
  take os-version, name <osVersion>
    like os-version
    void take
    note <The operating system version of the Amazon EC2 build instance. For example, Amazon Linux 2, Ubuntu 18, or Microsoft Windows Server 2019.>
  take owner, name <owner>
    like non-empty-string
    void take
    note <The owner of the image version.>
  take date-created, name <dateCreated>
    like date-time
    void take
    note <The date on which this specific version of the Image Builder image was created.>