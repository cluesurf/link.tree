
load @drumwork/snow/amazonaws.com/gamelift/2015-10-01/base/internal-service-exception
  take form internal-service-exception

load @drumwork/snow/amazonaws.com/gamelift/2015-10-01/base/invalid-request-exception
  take form invalid-request-exception

load @drumwork/snow/amazonaws.com/gamelift/2015-10-01/base/not-found-exception
  take form not-found-exception

load @drumwork/snow/amazonaws.com/gamelift/2015-10-01/base/start-match-backfill-output
  take form start-match-backfill-output

load @drumwork/snow/amazonaws.com/gamelift/2015-10-01/base/unsupported-region-exception
  take form unsupported-region-exception

load @drumwork/snow/base/native-string
  take form native-string

boot start-match-backfill, name <StartMatchBackfill>
  note <Finds new players to fill open slots in currently running game sessions. The backfill match process is essentially identical to the process of forming new matches. Backfill requests use the same matchmaker that was used to make the original match, and they provide matchmaking data for all players currently in the game session. FlexMatch uses this information to select new players so that backfilled match continues to meet the original match requirements.

When using FlexMatch with GameLift managed hosting, you can request a backfill match from a client service by calling this operation with a GameSession identifier. You also have the option of making backfill requests directly from your game server. In response to a request, FlexMatch creates player sessions for the new players, updates the `GameSession` resource, and sends updated matchmaking data to the game server. You can request a backfill match at any point after a game session is started. Each game session can have only one active backfill request at a time; a subsequent request automatically replaces the earlier request.

When using FlexMatch as a standalone component, request a backfill match by calling this operation without a game session identifier. As with newly formed matches, matchmaking results are returned in a matchmaking event so that your game can update the game session that is being backfilled.

To request a backfill match, specify a unique ticket ID, the original matchmaking configuration, and matchmaking data for all current players in the game session being backfilled. Optionally, specify the `GameSession` ARN. If successful, a match backfill ticket is created and returned with status set to QUEUED. Track the status of backfill tickets using the same method for tracking tickets for new matches.

**Learn more** [Backfill existing games with FlexMatch](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html)

[Matchmaking events](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html) (reference)

[How GameLift FlexMatch works](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/gamelift-match.html)

**Related actions** StartMatchmaking | DescribeMatchmaking | StopMatchmaking | AcceptMatch | StartMatchBackfill | [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)>

  take x-amz-target
    like native-string
  take start-match-backfill-input, like start-match-backfill-input

  line </#X-Amz-Target=GameLift.StartMatchBackfill>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan start-match-backfill-input

  loot 200
    seed json, like start-match-backfill-output
    note <Success>
  loot 480
    seed json, like invalid-request-exception
    note <InvalidRequestException>
  loot 481
    seed json, like not-found-exception
    note <NotFoundException>
  loot 482
    seed json, like internal-service-exception
    note <InternalServiceException>
  loot 483
    seed json, like unsupported-region-exception
    note <UnsupportedRegionException>