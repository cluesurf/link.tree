
load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/create-matchmaking-configuration-output
  take form create-matchmaking-configuration-output

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/internal-service-exception
  take form internal-service-exception

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/invalid-request-exception
  take form invalid-request-exception

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/limit-exceeded-exception
  take form limit-exceeded-exception

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/not-found-exception
  take form not-found-exception

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/tagging-failed-exception
  take form tagging-failed-exception

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/unsupported-region-exception
  take form unsupported-region-exception

load @wavebond/snow/base/native-string
  take form native-string

boot create-matchmaking-configuration, name <CreateMatchmakingConfiguration>
  deed post
  note <Defines a new matchmaking configuration for use with FlexMatch. Whether your are using FlexMatch with GameLift hosting or as a standalone matchmaking service, the matchmaking configuration sets out rules for matching players and forming teams. If you're also using GameLift hosting, it defines how to start game sessions for each match. Your matchmaking system can use multiple configurations to handle different game scenarios. All matchmaking requests (StartMatchmaking or StartMatchBackfill) identify the matchmaking configuration to use and provide player attributes consistent with that configuration.

To create a matchmaking configuration, you must provide the following: configuration name and FlexMatch mode (with or without GameLift hosting); a rule set that specifies how to evaluate players and find acceptable matches; whether player acceptance is required; and the maximum time allowed for a matchmaking attempt. When using FlexMatch with GameLift hosting, you also need to identify the game session queue to use when starting a game session for the match.

In addition, you must set up an Amazon Simple Notification Service (SNS) topic to receive matchmaking notifications. Provide the topic ARN in the matchmaking configuration. An alternative method, continuously polling ticket status with DescribeMatchmaking, is only suitable for games in development with low matchmaking usage.

**Learn more** [Design a FlexMatch matchmaker](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-configuration.html)

[Set up FlexMatch event notification](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-notification.html)

**Related actions** CreateMatchmakingConfiguration | DescribeMatchmakingConfigurations | UpdateMatchmakingConfiguration | DeleteMatchmakingConfiguration | CreateMatchmakingRuleSet | DescribeMatchmakingRuleSets | ValidateMatchmakingRuleSet | DeleteMatchmakingRuleSet | [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)>

  take x-amz-target
    like native-string
  take create-matchmaking-configuration-input, like create-matchmaking-configuration-input

  line </#X-Amz-Target=GameLift.CreateMatchmakingConfiguration>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan create-matchmaking-configuration-input

  loot 200
    seed json, like create-matchmaking-configuration-output
    note <Success>
  loot 480
    seed json, like invalid-request-exception
    note <InvalidRequestException>
  loot 481
    seed json, like limit-exceeded-exception
    note <LimitExceededException>
  loot 482
    seed json, like not-found-exception
    note <NotFoundException>
  loot 483
    seed json, like internal-service-exception
    note <InternalServiceException>
  loot 484
    seed json, like unsupported-region-exception
    note <UnsupportedRegionException>
  loot 485
    seed json, like tagging-failed-exception
    note <TaggingFailedException>