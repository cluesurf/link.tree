
load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/dns-name
  take form dns-name

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/fleet-arn
  take form fleet-arn

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/fleet-id
  take form fleet-id

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/ip-address
  take form ip-address

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/non-zero-and-max-string
  take form non-zero-and-max-string

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/player-data
  take form player-data

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/player-session-id
  take form player-session-id

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/player-session-status
  take form player-session-status

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/port-number
  take form port-number

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/timestamp
  take form timestamp

form player-session, name <PlayerSession>
  note <Represents a player session. Player sessions are created either for a specific game session, or as part of a game session placement or matchmaking request. A player session can represents a reserved player slot in a game session (when status is `RESERVED`) or actual player activity in a game session (when status is `ACTIVE`). A player session object, including player data, is automatically passed to a game session when the player connects to the game session and is validated. After the game session ends, player sessions information is retained for 30 days and then removed.

**Related actions** CreatePlayerSession | CreatePlayerSessions | DescribePlayerSessions | StartGameSessionPlacement | DescribeGameSessionPlacement | [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)>
  take player-session-id, name <PlayerSessionId>
    like player-session-id
    void take
    note <A unique identifier for a player session.>
  take player-id, name <PlayerId>
    like non-zero-and-max-string
    void take
    note <A unique identifier for a player that is associated with this player session.>
  take game-session-id, name <GameSessionId>
    like non-zero-and-max-string
    void take
    note <A unique identifier for the game session that the player session is connected to.>
  take fleet-id, name <FleetId>
    like fleet-id
    void take
    note <A unique identifier for the fleet that the player's game session is running on.>
  take fleet-arn, name <FleetArn>
    like fleet-arn
    void take
    note <The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift fleet that the player's game session is running on.>
  take creation-time, name <CreationTime>
    like timestamp
    void take
    note <A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example `"1469498468.057"`).>
  take termination-time, name <TerminationTime>
    like timestamp
    void take
    note <A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example `"1469498468.057"`).>
  take status, name <Status>
    like player-session-status
    void take
    note <Current status of the player session.

Possible player session statuses include the following:

- **RESERVED** -- The player session request has been received, but the player has not yet connected to the server process and/or been validated.

- **ACTIVE** -- The player has been validated by the server process and is currently connected.

- **COMPLETED** -- The player connection has been dropped.

- **TIMEDOUT** -- A player session request was received, but the player did not connect and/or was not validated within the timeout limit (60 seconds).>
  take ip-address, name <IpAddress>
    like ip-address
    void take
    note <The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.>
  take dns-name, name <DnsName>
    like dns-name
    void take
    note <The DNS identifier assigned to the instance that is running the game session. Values have the following format:

- TLS-enabled fleets: `&lt;unique identifier&gt;.&lt;region identifier&gt;.amazongamelift.com`.

- Non-TLS-enabled fleets: `ec2-&lt;unique identifier&gt;.compute.amazonaws.com`. (See [Amazon EC2 Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)

When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.>
  take port, name <Port>
    like port-number
    void take
    note <Port number for the game session. To connect to a Amazon GameLift server process, an app needs both the IP address and port number.>
  take player-data, name <PlayerData>
    like player-data
    void take
    note <Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.>