
load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/build-id-or-arn
  take form build-id-or-arn

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/certificate-configuration
  take form certificate-configuration

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/ec2-instance-type
  take form ec2-instance-type

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/fleet-type
  take form fleet-type

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/ip-permissions-list
  take form ip-permissions-list

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/location-configuration-list
  take form location-configuration-list

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/metric-group-list
  take form metric-group-list

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/non-empty-string
  take form non-empty-string

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/non-zero-and-max-string
  take form non-zero-and-max-string

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/protection-policy
  take form protection-policy

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/resource-creation-limit-policy
  take form resource-creation-limit-policy

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/runtime-configuration
  take form runtime-configuration

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/script-id-or-arn
  take form script-id-or-arn

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/string-list
  take form string-list

load @wavebond/snow/amazonaws.com/gamelift/2015-10-01/base/tag-list
  take form tag-list

form create-fleet-input, name <CreateFleetInput>
  note <Represents the input for a request operation.>
  take name, name <Name>
    like non-zero-and-max-string
    note <A descriptive label that is associated with a fleet. Fleet names do not need to be unique.>
  take description, name <Description>
    like non-zero-and-max-string
    void take
    note <A human-readable description of the fleet.>
  take build-id, name <BuildId>
    like build-id-or-arn
    void take
    note <The unique identifier for a custom game server build to be deployed on fleet instances. You can use either the build ID or ARN. The build must be uploaded to GameLift and in `READY` status. This fleet property cannot be changed later.>
  take script-id, name <ScriptId>
    like script-id-or-arn
    void take
    note <The unique identifier for a Realtime configuration script to be deployed on fleet instances. You can use either the script ID or ARN. Scripts must be uploaded to GameLift prior to creating the fleet. This fleet property cannot be changed later.>
  take server-launch-path, name <ServerLaunchPath>
    like non-zero-and-max-string
    void take
    note <**This parameter is no longer used.** Specify a server launch path using the `RuntimeConfiguration` parameter. Requests that use this parameter instead continue to be valid.>
  take server-launch-parameters, name <ServerLaunchParameters>
    like non-zero-and-max-string
    void take
    note <**This parameter is no longer used.** Specify server launch parameters using the `RuntimeConfiguration` parameter. Requests that use this parameter instead continue to be valid.>
  take log-paths, name <LogPaths>
    like string-list
    void take
    note <**This parameter is no longer used.** To specify where GameLift should store log files once a server process shuts down, use the GameLift server API `ProcessReady()` and specify one or more directory paths in `logParameters`. See more information in the [Server API Reference](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api-ref.html#gamelift-sdk-server-api-ref-dataypes-process).>
  take ec2-instance-type, name <EC2InstanceType>
    like ec2-instance-type
    note <The GameLift-supported EC2 instance type to use for all fleet instances. Instance type determines the computing resources that will be used to host your game servers, including CPU, memory, storage, and networking capacity. See [Amazon EC2 Instance Types](http://aws.amazon.com/ec2/instance-types/) for detailed descriptions of EC2 instance types.>
  take ec2-inbound-permissions, name <EC2InboundPermissions>
    like ip-permissions-list
    void take
    note <The allowed IP address ranges and port settings that allow inbound traffic to access game sessions on this fleet. If the fleet is hosting a custom game build, this property must be set before players can connect to game sessions. For Realtime Servers fleets, GameLift automatically sets TCP and UDP ranges.>
  take new-game-session-protection-policy, name <NewGameSessionProtectionPolicy>
    like protection-policy
    void take
    note <The status of termination protection for active game sessions on the fleet. By default, this property is set to `NoProtection`. You can also set game session protection for an individual game session by calling UpdateGameSession.

- **NoProtection** - Game sessions can be terminated during active gameplay as a result of a scale-down event.

- **FullProtection** - Game sessions in `ACTIVE` status cannot be terminated during a scale-down event.>
  take runtime-configuration, name <RuntimeConfiguration>
    like runtime-configuration
    void take
    note <Instructions for how to launch and maintain server processes on instances in the fleet. The runtime configuration defines one or more server process configurations, each identifying a build executable or Realtime script file and the number of processes of that type to run concurrently.

The `RuntimeConfiguration` parameter is required unless the fleet is being configured using the older parameters `ServerLaunchPath` and `ServerLaunchParameters`, which are still supported for backward compatibility.>
  take resource-creation-limit-policy, name <ResourceCreationLimitPolicy>
    like resource-creation-limit-policy
    void take
    note <A policy that limits the number of game sessions that an individual player can create on instances in this fleet within a specified span of time.>
  take metric-groups, name <MetricGroups>
    like metric-group-list
    void take
    note <The name of an AWS CloudWatch metric group to add this fleet to. A metric group is used to aggregate the metrics for multiple fleets. You can specify an existing metric group name or set a new name to create a new metric group. A fleet can be included in only one metric group at a time.>
  take peer-vpc-aws-account-id, name <PeerVpcAwsAccountId>
    like non-zero-and-max-string
    void take
    note <Used when peering your GameLift fleet with a VPC, the unique identifier for the AWS account that owns the VPC. You can find your account ID in the AWS Management Console under account settings.>
  take peer-vpc-id, name <PeerVpcId>
    like non-zero-and-max-string
    void take
    note <A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the [VPC Dashboard](https://console.aws.amazon.com/vpc/) in the AWS Management Console. Learn more about VPC peering in [VPC Peering with GameLift Fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html).>
  take fleet-type, name <FleetType>
    like fleet-type
    void take
    note <Indicates whether to use On-Demand or Spot instances for this fleet. By default, this property is set to `ON_DEMAND`. Learn more about when to use [On-Demand versus Spot Instances](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot). This property cannot be changed after the fleet is created.>
  take instance-role-arn, name <InstanceRoleArn>
    like non-empty-string
    void take
    note <A unique identifier for an AWS IAM role that manages access to your AWS services. With an instance role ARN set, any application that runs on an instance in this fleet can assume the role, including install scripts, server processes, and daemons (background processes). Create a role or look up a role's ARN by using the [IAM dashboard](https://console.aws.amazon.com/iam/) in the AWS Management Console. Learn more about using on-box credentials for your game servers at [Access external resources from a game server](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html). This property cannot be changed after the fleet is created.>
  take certificate-configuration, name <CertificateConfiguration>
    like certificate-configuration
    void take
    note <Prompts GameLift to generate a TLS/SSL certificate for the fleet. TLS certificates are used for encrypting traffic between game clients and the game servers that are running on GameLift. By default, the `CertificateConfiguration` is set to `DISABLED`. Learn more at [Securing Client/Server Communication](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-howitworks.html#gamelift-howitworks-security). This property cannot be changed after the fleet is created.

Note: This feature requires the AWS Certificate Manager (ACM) service, which is not available in all AWS regions. When working in a region that does not support this feature, a fleet creation request with certificate generation fails with a 4xx error.>
  take locations, name <Locations>
    like location-configuration-list
    void take
    note <A set of remote locations to deploy additional instances to and manage as part of the fleet. This parameter can only be used when creating fleets in AWS Regions that support multiple locations. You can add any GameLift-supported AWS Region as a remote location, in the form of an AWS Region code such as `us-west-2`. To create a fleet with instances in the home Region only, omit this parameter.>
  take tags, name <Tags>
    like tag-list
    void take
    note <A list of labels to assign to the new fleet resource. Tags are developer-defined key-value pairs. Tagging AWS resources are useful for resource management, access management and cost allocation. For more information, see [Tagging AWS Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the _AWS General Reference_. Once the fleet is created, you can use TagResource, UntagResource, and ListTagsForResource to add, remove, and view tags. The maximum tag limit may be lower than stated. See the _AWS General Reference_ for actual tagging limits.>