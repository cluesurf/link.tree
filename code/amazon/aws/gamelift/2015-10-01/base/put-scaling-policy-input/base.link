
load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/comparison-operator-type
  take form comparison-operator-type

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/double
  take form double

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/fleet-id-or-arn
  take form fleet-id-or-arn

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/metric-name
  take form metric-name

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/non-zero-and-max-string
  take form non-zero-and-max-string

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/policy-type
  take form policy-type

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/positive-integer
  take form positive-integer

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/scaling-adjustment-type
  take form scaling-adjustment-type

load @tunebond/snow/amazonaws.com/gamelift/2015-10-01/base/target-configuration
  take form target-configuration

load @tunebond/snow/base/integer
  take form integer

form put-scaling-policy-input, name <PutScalingPolicyInput>
  note <Represents the input for a request operation.>
  take name, name <Name>
    like non-zero-and-max-string
    note <A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique. A fleet can have only one scaling policy with the same name.>
  take fleet-id, name <FleetId>
    like fleet-id-or-arn
    note <A unique identifier for the fleet to apply this policy to. You can use either the fleet ID or ARN value. The fleet cannot be in any of the following statuses: ERROR or DELETING.>
  take scaling-adjustment, name <ScalingAdjustment>
    like integer
    void take
    note <Amount of adjustment to make, based on the scaling adjustment type.>
  take scaling-adjustment-type, name <ScalingAdjustmentType>
    like scaling-adjustment-type
    void take
    note <The type of adjustment to make to a fleet's instance count (see FleetCapacity):

- **ChangeInCapacity** -- add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.

- **ExactCapacity** -- set the instance count to the scaling adjustment value.

- **PercentChangeInCapacity** -- increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down; for example, a value of "-10" scales the fleet down by 10%.>
  take threshold, name <Threshold>
    like double
    void take
    note <Metric value used to trigger a scaling event.>
  take comparison-operator, name <ComparisonOperator>
    like comparison-operator-type
    void take
    note <Comparison operator to use when measuring the metric against the threshold value.>
  take evaluation-periods, name <EvaluationPeriods>
    like positive-integer
    void take
    note <Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.>
  take metric-name, name <MetricName>
    like metric-name
    note <Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment. For detailed descriptions of fleet metrics, see [Monitor Amazon GameLift with Amazon CloudWatch](https://docs.aws.amazon.com/gamelift/latest/developerguide/monitoring-cloudwatch.html).

- **ActivatingGameSessions** -- Game sessions in the process of being created.

- **ActiveGameSessions** -- Game sessions that are currently running.

- **ActiveInstances** -- Fleet instances that are currently running at least one game session.

- **AvailableGameSessions** -- Additional game sessions that fleet could host simultaneously, given current capacity.

- **AvailablePlayerSessions** -- Empty player slots in currently active game sessions. This includes game sessions that are not currently accepting players. Reserved player slots are not included.

- **CurrentPlayerSessions** -- Player slots in active game sessions that are being used by a player or are reserved for a player.

- **IdleInstances** -- Active instances that are currently hosting zero game sessions.

- **PercentAvailableGameSessions** -- Unused percentage of the total number of game sessions that a fleet could host simultaneously, given current capacity. Use this metric for a target-based scaling policy.

- **PercentIdleInstances** -- Percentage of the total number of active instances that are hosting zero game sessions.

- **QueueDepth** -- Pending game session placement requests, in any queue, where the current fleet is the top-priority destination.

- **WaitTime** -- Current wait time for pending game session placement requests, in any queue, where the current fleet is the top-priority destination.>
  take policy-type, name <PolicyType>
    like policy-type
    void take
    note <The type of scaling policy to create. For a target-based policy, set the parameter _MetricName_ to 'PercentAvailableGameSessions' and specify a _TargetConfiguration_. For a rule-based policy set the following parameters: _MetricName_, _ComparisonOperator_, _Threshold_, _EvaluationPeriods_, _ScalingAdjustmentType_, and _ScalingAdjustment_.>
  take target-configuration, name <TargetConfiguration>
    like target-configuration
    void take
    note <An object that contains settings for a target-based scaling policy.>