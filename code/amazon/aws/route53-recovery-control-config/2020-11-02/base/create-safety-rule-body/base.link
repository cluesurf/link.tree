
load @nerdbond/snow/amazonaws.com/route53-recovery-control-config/2020-11-02/base/list-of-string
  take form list-of-string

load @nerdbond/snow/amazonaws.com/route53-recovery-control-config/2020-11-02/base/rule-config
  take form rule-config

load @nerdbond/snow/amazonaws.com/route53-recovery-control-config/2020-11-02/base/string-min1-max64-pattern-s
  take form string-min1-max64-pattern-s

load @nerdbond/snow/base/integer
  take form integer

load @nerdbond/snow/base/string
  take form string

form create-safety-rule-body
  take assertion-rule, name <AssertionRule>
    like form
      take asserted-controls, name <AssertedControls>
        like list-of-string
        void take
        note <The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three Amazon Web Services Regions.>
      take control-panel-arn, name <ControlPanelArn>
        like string
        void take
        note <The Amazon Resource Name (ARN) for the control panel.>
      take name, name <Name>
        like string-min1-max64-pattern-s
        void take
        note <The name of the assertion rule. You can use any non-white space character in the name.>
      take rule-config, name <RuleConfig>
        like rule-config
        void take
        note <The criteria that you set for specific assertion controls (routing controls) that designate how many controls must be enabled as the result of a transaction. For example, if you have three assertion controls, you might specify atleast 2 for your rule configuration. This means that at least two assertion controls must be enabled, so that at least two Amazon Web Services Regions are enabled.>
      take wait-period-ms, name <WaitPeriodMs>
        like integer
        void take
        note <An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.>
    void take
  take client-token, name <ClientToken>
    void take
  take gating-rule, name <GatingRule>
    like form
      take control-panel-arn, name <ControlPanelArn>
        like string
        void take
        note <The Amazon Resource Name (ARN) of the control panel.>
      take gating-controls, name <GatingControls>
        like list-of-string
        void take
        note <The gating controls for the new gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.>
      take name, name <Name>
        like string-min1-max64-pattern-s
        void take
        note <The name for the new gating rule.>
      take rule-config, name <RuleConfig>
        like rule-config
        void take
        note <The criteria that you set for specific gating controls (routing controls) that designates how many controls must be enabled to allow you to change (set or unset) the target controls.>
      take target-controls, name <TargetControls>
        like list-of-string
        void take
        note <Routing controls that can only be set or unset if the specified RuleConfig evaluates to true for the specified GatingControls. For example, say you have three gating controls, one for each of three Amazon Web Services Regions. Now you specify AtLeast 2 as your RuleConfig. With these settings, you can only change (set or unset) the routing controls that you have specified as TargetControls if that rule evaluates to true.

In other words, your ability to change the routing controls that you have specified as TargetControls is gated by the rule that you set for the routing controls in GatingControls.>
      take wait-period-ms, name <WaitPeriodMs>
        like integer
        void take
        note <An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.>
    void take
