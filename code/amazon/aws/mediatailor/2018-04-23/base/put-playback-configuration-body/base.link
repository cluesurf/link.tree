
load @tunebond/snow/amazonaws.com/mediatailor/2018-04-23/base/ad-marker-passthrough
  take form ad-marker-passthrough

load @tunebond/snow/amazonaws.com/mediatailor/2018-04-23/base/mode
  take form mode

load @tunebond/snow/amazonaws.com/mediatailor/2018-04-23/base/origin-manifest-type
  take form origin-manifest-type

load @tunebond/snow/base/integer
  take form integer

load @tunebond/snow/base/string
  take form string

form put-playback-configuration-body
  take ad-decision-server-url, name <AdDecisionServerUrl>
    void take
  take avail-suppression, name <AvailSuppression>
    like form
      take mode, name <Mode>
        like mode
        void take
        note <Sets the ad suppression mode. By default, ad suppression is off and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.>
      take value, name <Value>
        like string
        void take
        note <A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.>
    void take
  take bumper, name <Bumper>
    like form
      take end-url, name <EndUrl>
        like string
        void take
        note <The URL for the end bumper asset.>
      take start-url, name <StartUrl>
        like string
        void take
        note <The URL for the start bumper asset.>
    void take
  take cdn-configuration, name <CdnConfiguration>
    like form
      take ad-segment-url-prefix, name <AdSegmentUrlPrefix>
        like string
        void take
        note <A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region&gt;.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.>
      take content-segment-url-prefix, name <ContentSegmentUrlPrefix>
        like string
        void take
        note <A content delivery network (CDN) to cache content segments, so that content requests donâ€™t always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.>
    void take
  take configuration-aliases, name <ConfigurationAliases>
    void take
  take dash-configuration, name <DashConfiguration>
    like form
      take mpd-location, name <MpdLocation>
        like string
        void take
        note <The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.>
      take origin-manifest-type, name <OriginManifestType>
        like origin-manifest-type
        void take
        note <The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.>
    void take
  take live-pre-roll-configuration, name <LivePreRollConfiguration>
    like form
      take ad-decision-server-url, name <AdDecisionServerUrl>
        like string
        void take
        note <The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.>
      take max-duration-seconds, name <MaxDurationSeconds>
        like integer
        void take
        note <The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.>
    void take
  take manifest-processing-rules, name <ManifestProcessingRules>
    like form
      take ad-marker-passthrough, name <AdMarkerPassthrough>
        like ad-marker-passthrough
        void take
        note <For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest.

No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.>
    void take
  take name, name <Name>
    void take
  take personalization-threshold-seconds, name <PersonalizationThresholdSeconds>
    void take
  take slate-ad-url, name <SlateAdUrl>
    void take
  take tags, name <tags>
    void take
  take transcode-profile-name, name <TranscodeProfileName>
    void take
  take video-content-source-url, name <VideoContentSourceUrl>
    void take