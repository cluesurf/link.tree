
load @termsurf/snow/amazonaws.com/ecr-public/2020-10-30/base/complete-layer-upload-response
  take form complete-layer-upload-response

load @termsurf/snow/amazonaws.com/ecr-public/2020-10-30/base/empty-upload-exception
  take form empty-upload-exception

load @termsurf/snow/amazonaws.com/ecr-public/2020-10-30/base/invalid-layer-exception
  take form invalid-layer-exception

load @termsurf/snow/amazonaws.com/ecr-public/2020-10-30/base/invalid-parameter-exception
  take form invalid-parameter-exception

load @termsurf/snow/amazonaws.com/ecr-public/2020-10-30/base/layer-already-exists-exception
  take form layer-already-exists-exception

load @termsurf/snow/amazonaws.com/ecr-public/2020-10-30/base/layer-part-too-small-exception
  take form layer-part-too-small-exception

load @termsurf/snow/amazonaws.com/ecr-public/2020-10-30/base/registry-not-found-exception
  take form registry-not-found-exception

load @termsurf/snow/amazonaws.com/ecr-public/2020-10-30/base/repository-not-found-exception
  take form repository-not-found-exception

load @termsurf/snow/amazonaws.com/ecr-public/2020-10-30/base/server-exception
  take form server-exception

load @termsurf/snow/amazonaws.com/ecr-public/2020-10-30/base/unsupported-command-exception
  take form unsupported-command-exception

load @termsurf/snow/amazonaws.com/ecr-public/2020-10-30/base/upload-not-found-exception
  take form upload-not-found-exception

load @termsurf/snow/base/native-string
  take form native-string

boot complete-layer-upload, name <CompleteLayerUpload>
  deed post
  note <Informs Amazon ECR that the image layer upload has completed for a specified public registry, repository name, and upload ID. You can optionally provide a `sha256` digest of the image layer for data validation purposes.

When an image is pushed, the CompleteLayerUpload API is called once per each new image layer to verify that the upload has completed.

This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the `docker` CLI to pull, tag, and push images.>

  take x-amz-target
    like native-string
  take complete-layer-upload-request, like complete-layer-upload-request

  line </#X-Amz-Target=SpencerFrontendService.CompleteLayerUpload>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan complete-layer-upload-request

  loot 200
    seed json, like complete-layer-upload-response
    note <Success>
  loot 480
    seed json, like server-exception
    note <ServerException>
  loot 481
    seed json, like invalid-parameter-exception
    note <InvalidParameterException>
  loot 482
    seed json, like repository-not-found-exception
    note <RepositoryNotFoundException>
  loot 483
    seed json, like upload-not-found-exception
    note <UploadNotFoundException>
  loot 484
    seed json, like invalid-layer-exception
    note <InvalidLayerException>
  loot 485
    seed json, like layer-part-too-small-exception
    note <LayerPartTooSmallException>
  loot 486
    seed json, like layer-already-exists-exception
    note <LayerAlreadyExistsException>
  loot 487
    seed json, like empty-upload-exception
    note <EmptyUploadException>
  loot 488
    seed json, like registry-not-found-exception
    note <RegistryNotFoundException>
  loot 489
    seed json, like unsupported-command-exception
    note <UnsupportedCommandException>