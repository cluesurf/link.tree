
load @textsurf/snow/amazonaws.com/transfer/2018-11-05/base/external-id
  take form external-id

load @textsurf/snow/amazonaws.com/transfer/2018-11-05/base/home-directory
  take form home-directory

load @textsurf/snow/amazonaws.com/transfer/2018-11-05/base/home-directory-mappings
  take form home-directory-mappings

load @textsurf/snow/amazonaws.com/transfer/2018-11-05/base/home-directory-type
  take form home-directory-type

load @textsurf/snow/amazonaws.com/transfer/2018-11-05/base/policy
  take form policy

load @textsurf/snow/amazonaws.com/transfer/2018-11-05/base/posix-profile
  take form posix-profile

load @textsurf/snow/amazonaws.com/transfer/2018-11-05/base/role
  take form role

load @textsurf/snow/amazonaws.com/transfer/2018-11-05/base/server-id
  take form server-id

form create-access-request, name <CreateAccessRequest>
  take home-directory, name <HomeDirectory>
    like home-directory
    void take
    note <The landing directory (folder) for a user when they log in to the server using the client.

A `HomeDirectory` example is `/bucket_name/home/mydirectory`.>
  take home-directory-type, name <HomeDirectoryType>
    like home-directory-type
    void take
    note <The type of landing directory (folder) you want your users' home directory to be when they log into the server. If you set it to `PATH`, the user will see the absolute Amazon S3 bucket or EFS paths as is in their file transfer protocol clients. If you set it `LOGICAL`, you need to provide mappings in the `HomeDirectoryMappings` for how you want to make Amazon S3 or EFS paths visible to your users.>
  take home-directory-mappings, name <HomeDirectoryMappings>
    like home-directory-mappings
    void take
    note <Logical directory mappings that specify what Amazon S3 or Amazon EFS paths and keys should be visible to your user and how you want to make them visible. You must specify the `Entry` and `Target` pair, where `Entry` shows how the path is made visible and `Target` is the actual Amazon S3 or Amazon EFS path. If you only specify a target, it is displayed as is. You also must ensure that your Amazon Web Services Identity and Access Management (IAM) role provides access to paths in `Target`. This value can only be set when `HomeDirectoryType` is set to _LOGICAL_.

The following is an `Entry` and `Target` pair example.

`[ { "Entry": "your-personal-report.pdf", "Target": "/bucket3/customized-reports/${transfer:UserName}.pdf" } ]`

In most cases, you can use this value instead of the session policy to lock down your user to the designated home directory ("`chroot`"). To do this, you can set `Entry` to `/` and set `Target` to the `HomeDirectory` parameter value.

The following is an `Entry` and `Target` pair example for `chroot`.

`[ { "Entry:": "/", "Target": "/bucket_name/home/mydirectory" } ]`

If the target of a logical directory entry does not exist in Amazon S3 or EFS, the entry is ignored. As a workaround, you can use the Amazon S3 API or EFS API to create 0 byte objects as place holders for your directory. If using the CLI, use the `s3api` or `efsapi` call instead of `s3` or `efs` so you can use the put-object operation. For example, you use the following: `aws s3api put-object --bucket bucketname --key path/to/folder/`. Make sure that the end of the key name ends in a `/` for it to be considered a folder.>
  take policy, name <Policy>
    like policy
    void take
    note <A session policy for your user so that you can use the same IAM role across multiple users. This policy scopes down user access to portions of their Amazon S3 bucket. Variables that you can use inside this policy include `${Transfer:UserName}`, `${Transfer:HomeDirectory}`, and `${Transfer:HomeBucket}`.

This only applies when the domain of `ServerId` is S3. EFS does not use session policies.

For session policies, Amazon Web Services Transfer Family stores the policy as a JSON blob, instead of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass it in the `Policy` argument.

For an example of a session policy, see [Example session policy](https://docs.aws.amazon.com/transfer/latest/userguide/session-policy.html).

For more information, see [AssumeRole](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) in the _Amazon Web Services Security Token Service API Reference_.>
  take posix-profile, name <PosixProfile>
    like posix-profile
    void take
  take role, name <Role>
    like role
    note <Specifies the Amazon Resource Name (ARN) of the IAM role that controls your users' access to your Amazon S3 bucket or EFS file system. The policies attached to this role determine the level of access that you want to provide your users when transferring files into and out of your Amazon S3 bucket or EFS file system. The IAM role should also contain a trust relationship that allows the server to access your resources when servicing your users' transfer requests.>
  take server-id, name <ServerId>
    like server-id
    note <A system-assigned unique identifier for a server instance. This is the specific server that you added your user to.>
  take external-id, name <ExternalId>
    like external-id
    note <A unique identifier that is required to identify specific groups within your directory. The users of the group that you associate have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Amazon Web Services Transfer Family. If you know the group name, you can view the SID values by running the following command using Windows PowerShell.

`Get-ADGroup -Filter {samAccountName -like "_YourGroupName_*"} -Properties * | Select SamAccountName,ObjectSid`

In that command, replace _YourGroupName_ with the name of your Active Directory group.

The regex used to validate this parameter is a string of characters consisting of uppercase and lowercase alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@:/->