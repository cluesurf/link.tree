
load @nerdbond/snow/amazonaws.com/rds/2014-10-31/base/db-cluster-capacity-info
  take form db-cluster-capacity-info

load @nerdbond/snow/amazonaws.com/rds/2014-10-31/base/db-cluster-not-found-fault
  take form db-cluster-not-found-fault

load @nerdbond/snow/amazonaws.com/rds/2014-10-31/base/invalid-db-cluster-capacity-fault
  take form invalid-db-cluster-capacity-fault

load @nerdbond/snow/amazonaws.com/rds/2014-10-31/base/invalid-db-cluster-state-fault
  take form invalid-db-cluster-state-fault

load @nerdbond/snow/base/native-integer
  take form native-integer

load @nerdbond/snow/base/native-string
  take form native-string

boot get-modify-current-db-cluster-capacity, name <GET_ModifyCurrentDBClusterCapacity>
  deed get
  note <Set the capacity of an Aurora Serverless DB cluster to a specific value.

Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call `ModifyCurrentDBClusterCapacity` to set the capacity explicitly.

After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.

For more information about Aurora Serverless, see [Using Amazon Aurora Serverless](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html) in the _Amazon Aurora User Guide_.

If you call `ModifyCurrentDBClusterCapacity` with the default `TimeoutAction`, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see [Autoscaling for Aurora Serverless](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling) in the _Amazon Aurora User Guide_.

This action only applies to Aurora Serverless DB clusters.>

  take db-cluster-identifier
    like native-string
    note <The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.

Constraints:

- Must match the identifier of an existing DB cluster.>
  take capacity
    like native-integer
    note <The DB cluster capacity.

When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.

Constraints:

- For Aurora MySQL, valid capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, and `256`.

- For Aurora PostgreSQL, valid capacity values are `2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`.>
    void take
  take seconds-before-timeout
    like native-integer
    note <The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.

Specify a value between 10 and 600 seconds.>
    void take
  take timeout-action
    like native-string
    note <The action to take when the timeout is reached, either `ForceApplyCapacityChange` or `RollbackCapacityChange`.

`ForceApplyCapacityChange`, the default, sets the capacity to the specified value as soon as possible.

`RollbackCapacityChange` ignores the capacity change if a scaling point isn't found in the timeout period.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=ModifyCurrentDBClusterCapacity>

  find <DBClusterIdentifier>, loan db-cluster-identifier
  find <Capacity>, loan capacity
  find <SecondsBeforeTimeout>, loan seconds-before-timeout
  find <TimeoutAction>, loan timeout-action
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like db-cluster-capacity-info
    note <Success>
  loot 480
    seed xml, like db-cluster-not-found-fault
    note <DBClusterNotFoundFault>
  loot 481
    seed xml, like invalid-db-cluster-state-fault
    note <InvalidDBClusterStateFault>
  loot 482
    seed xml, like invalid-db-cluster-capacity-fault
    note <InvalidDBClusterCapacityFault>