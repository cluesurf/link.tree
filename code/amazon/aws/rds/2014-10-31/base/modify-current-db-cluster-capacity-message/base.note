
load @termsurf/snow/amazonaws.com/rds/2014-10-31/base/integer-optional
  take form integer-optional

load @termsurf/snow/base/string
  take form string

form modify-current-db-cluster-capacity-message, name <ModifyCurrentDBClusterCapacityMessage>
  take db-cluster-identifier, name <DBClusterIdentifier>
    like string
    note <The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.

Constraints:

- Must match the identifier of an existing DB cluster.>
  take capacity, name <Capacity>
    like integer-optional
    void take
    note <The DB cluster capacity.

When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.

Constraints:

- For Aurora MySQL, valid capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, and `256`.

- For Aurora PostgreSQL, valid capacity values are `2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`.>
  take seconds-before-timeout, name <SecondsBeforeTimeout>
    like integer-optional
    void take
    note <The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.

Specify a value between 10 and 600 seconds.>
  take timeout-action, name <TimeoutAction>
    like string
    void take
    note <The action to take when the timeout is reached, either `ForceApplyCapacityChange` or `RollbackCapacityChange`.

`ForceApplyCapacityChange`, the default, sets the capacity to the specified value as soon as possible.

`RollbackCapacityChange` ignores the capacity change if a scaling point isn't found in the timeout period.>