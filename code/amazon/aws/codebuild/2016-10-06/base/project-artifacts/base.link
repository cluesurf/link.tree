
load @treesurf/snow/amazonaws.com/codebuild/2016-10-06/base/artifact-namespace
  take form artifact-namespace

load @treesurf/snow/amazonaws.com/codebuild/2016-10-06/base/artifact-packaging
  take form artifact-packaging

load @treesurf/snow/amazonaws.com/codebuild/2016-10-06/base/artifacts-type
  take form artifacts-type

load @treesurf/snow/amazonaws.com/codebuild/2016-10-06/base/bucket-owner-access
  take form bucket-owner-access

load @treesurf/snow/amazonaws.com/codebuild/2016-10-06/base/wrapper-boolean
  take form wrapper-boolean

load @treesurf/snow/base/string
  take form string

form project-artifacts, name <ProjectArtifacts>
  note <Information about the build output artifacts for the build project.>
  take type, name <type>
    like artifacts-type
    note <The type of build output artifact. Valid values include:

- `CODEPIPELINE`: The build project has build output generated through CodePipeline.

  The `CODEPIPELINE` type is not supported for `secondaryArtifacts`.

- `NO_ARTIFACTS`: The build project does not produce any build output.

- `S3`: The build project stores build output in Amazon S3.>
  take location, name <location>
    like string
    void take
    note <Information about the build output artifact location:

- If `type` is set to `CODEPIPELINE`, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output locations instead of CodeBuild.

- If `type` is set to `NO_ARTIFACTS`, this value is ignored if specified, because no build output is produced.

- If `type` is set to `S3`, this is the name of the output bucket.>
  take path, name <path>
    like string
    void take
    note <Along with `namespaceType` and `name`, the pattern that CodeBuild uses to name and store the output artifact:

- If `type` is set to `CODEPIPELINE`, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output names instead of CodeBuild.

- If `type` is set to `NO_ARTIFACTS`, this value is ignored if specified, because no build output is produced.

- If `type` is set to `S3`, this is the path to the output artifact. If `path` is not specified, `path` is not used.

For example, if `path` is set to `MyArtifacts`, `namespaceType` is set to `NONE`, and `name` is set to `MyArtifact.zip`, the output artifact is stored in the output bucket at `MyArtifacts/MyArtifact.zip`.>
  take namespace-type, name <namespaceType>
    like artifact-namespace
    void take
    note <Along with `path` and `name`, the pattern that CodeBuild uses to determine the name and location to store the output artifact:

- If `type` is set to `CODEPIPELINE`, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output names instead of CodeBuild.

- If `type` is set to `NO_ARTIFACTS`, this value is ignored if specified, because no build output is produced.

- If `type` is set to `S3`, valid values include:

  - `BUILD_ID`: Include the build ID in the location of the build output artifact.

  - `NONE`: Do not include the build ID. This is the default if `namespaceType` is not specified.

For example, if `path` is set to `MyArtifacts`, `namespaceType` is set to `BUILD_ID`, and `name` is set to `MyArtifact.zip`, the output artifact is stored in `MyArtifacts/&lt;build-ID&gt;/MyArtifact.zip`.>
  take name, name <name>
    like string
    void take
    note <Along with `path` and `namespaceType`, the pattern that CodeBuild uses to name and store the output artifact:

- If `type` is set to `CODEPIPELINE`, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output names instead of CodeBuild.

- If `type` is set to `NO_ARTIFACTS`, this value is ignored if specified, because no build output is produced.

- If `type` is set to `S3`, this is the name of the output artifact object. If you set the name to be a forward slash ("/"), the artifact is stored in the root of the output bucket.

For example:

- If `path` is set to `MyArtifacts`, `namespaceType` is set to `BUILD_ID`, and `name` is set to `MyArtifact.zip`, then the output artifact is stored in `MyArtifacts/&lt;build-ID&gt;/MyArtifact.zip`.

- If `path` is empty, `namespaceType` is set to `NONE`, and `name` is set to "`/`", the output artifact is stored in the root of the output bucket.

- If `path` is set to `MyArtifacts`, `namespaceType` is set to `BUILD_ID`, and `name` is set to "`/`", the output artifact is stored in `MyArtifacts/&lt;build-ID&gt;`.>
  take packaging, name <packaging>
    like artifact-packaging
    void take
    note <The type of build output artifact to create:

- If `type` is set to `CODEPIPELINE`, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output artifacts instead of CodeBuild.

- If `type` is set to `NO_ARTIFACTS`, this value is ignored if specified, because no build output is produced.

- If `type` is set to `S3`, valid values include:

  - `NONE`: CodeBuild creates in the output bucket a folder that contains the build output. This is the default if `packaging` is not specified.

  - `ZIP`: CodeBuild creates in the output bucket a ZIP file that contains the build output.>
  take override-artifact-name, name <overrideArtifactName>
    like wrapper-boolean
    void take
    note <If this flag is set, a name specified in the buildspec file overrides the artifact name. The name specified in a buildspec file is calculated at build time and uses the Shell Command Language. For example, you can append a date and time to your artifact name so that it is always unique.>
  take encryption-disabled, name <encryptionDisabled>
    like wrapper-boolean
    void take
    note <Set to true if you do not want your output artifacts encrypted. This option is valid only if your artifacts type is Amazon S3. If this is set with another artifacts type, an invalidInputException is thrown.>
  take artifact-identifier, name <artifactIdentifier>
    like string
    void take
    note <An identifier for this artifact definition.>
  take bucket-owner-access, name <bucketOwnerAccess>
    like bucket-owner-access
    void take