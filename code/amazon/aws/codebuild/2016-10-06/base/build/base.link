
load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/build-artifacts
  take form build-artifacts

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/build-artifacts-list
  take form build-artifacts-list

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/build-phases
  take form build-phases

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/build-report-arns
  take form build-report-arns

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/debug-session
  take form debug-session

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/exported-environment-variables
  take form exported-environment-variables

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/logs-location
  take form logs-location

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/network-interface
  take form network-interface

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/non-empty-string
  take form non-empty-string

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/project-cache
  take form project-cache

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/project-environment
  take form project-environment

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/project-file-system-locations
  take form project-file-system-locations

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/project-secondary-source-versions
  take form project-secondary-source-versions

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/project-source
  take form project-source

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/project-sources
  take form project-sources

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/status-type
  take form status-type

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/timestamp
  take form timestamp

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/vpc-config
  take form vpc-config

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/wrapper-int
  take form wrapper-int

load @drumwork/snow/amazonaws.com/codebuild/2016-10-06/base/wrapper-long
  take form wrapper-long

load @drumwork/snow/base/boolean
  take form boolean

load @drumwork/snow/base/string
  take form string

form build, name <Build>
  note <Information about a build.>
  take id, name <id>
    like non-empty-string
    void take
    note <The unique ID for the build.>
  take arn, name <arn>
    like non-empty-string
    void take
    note <The Amazon Resource Name (ARN) of the build.>
  take build-number, name <buildNumber>
    like wrapper-long
    void take
    note <The number of the build. For each project, the `buildNumber` of its first build is `1`. The `buildNumber` of each subsequent build is incremented by `1`. If a build is deleted, the `buildNumber` of other builds does not change.>
  take start-time, name <startTime>
    like timestamp
    void take
    note <When the build process started, expressed in Unix time format.>
  take end-time, name <endTime>
    like timestamp
    void take
    note <When the build process ended, expressed in Unix time format.>
  take current-phase, name <currentPhase>
    like string
    void take
    note <The current build phase.>
  take build-status, name <buildStatus>
    like status-type
    void take
    note <The current status of the build. Valid values include:

- `FAILED`: The build failed.

- `FAULT`: The build faulted.

- `IN_PROGRESS`: The build is still in progress.

- `STOPPED`: The build stopped.

- `SUCCEEDED`: The build succeeded.

- `TIMED_OUT`: The build timed out.>
  take source-version, name <sourceVersion>
    like non-empty-string
    void take
    note <Any version identifier for the version of the source code to be built. If `sourceVersion` is specified at the project level, then this `sourceVersion` (at the build level) takes precedence.

For more information, see [Source Version Sample with CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html) in the _CodeBuild User Guide_.>
  take resolved-source-version, name <resolvedSourceVersion>
    like non-empty-string
    void take
    note <An identifier for the version of this build's source code.

- For CodeCommit, GitHub, GitHub Enterprise, and BitBucket, the commit ID.

- For CodePipeline, the source revision provided by CodePipeline.

- For Amazon S3, this does not apply.>
  take project-name, name <projectName>
    like non-empty-string
    void take
    note <The name of the CodeBuild project.>
  take phases, name <phases>
    like build-phases
    void take
    note <Information about all previous build phases that are complete and information about any current build phase that is not yet complete.>
  take source, name <source>
    like project-source
    void take
    note <Information about the source code to be built.>
  take secondary-sources, name <secondarySources>
    like project-sources
    void take
    note <An array of `ProjectSource` objects.>
  take secondary-source-versions, name <secondarySourceVersions>
    like project-secondary-source-versions
    void take
    note <An array of `ProjectSourceVersion` objects. Each `ProjectSourceVersion` must be one of:

- For CodeCommit: the commit ID, branch, or Git tag to use.

- For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format `pr/pull-request-ID` (for example, `pr/25`). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.

- For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.

- For Amazon S3: the version ID of the object that represents the build input ZIP file to use.>
  take artifacts, name <artifacts>
    like build-artifacts
    void take
    note <Information about the output artifacts for the build.>
  take secondary-artifacts, name <secondaryArtifacts>
    like build-artifacts-list
    void take
    note <An array of `ProjectArtifacts` objects.>
  take cache, name <cache>
    like project-cache
    void take
    note <Information about the cache for the build.>
  take environment, name <environment>
    like project-environment
    void take
    note <Information about the build environment for this build.>
  take service-role, name <serviceRole>
    like non-empty-string
    void take
    note <The name of a service role used for this build.>
  take logs, name <logs>
    like logs-location
    void take
    note <Information about the build's logs in CloudWatch Logs.>
  take timeout-in-minutes, name <timeoutInMinutes>
    like wrapper-int
    void take
    note <How long, in minutes, for CodeBuild to wait before timing out this build if it does not get marked as completed.>
  take queued-timeout-in-minutes, name <queuedTimeoutInMinutes>
    like wrapper-int
    void take
    note <The number of minutes a build is allowed to be queued before it times out.>
  take build-complete, name <buildComplete>
    like boolean
    void take
    note <Whether the build is complete. True if complete; otherwise, false.>
  take initiator, name <initiator>
    like string
    void take
    note <The entity that started the build. Valid values include:

- If CodePipeline started the build, the pipeline's name (for example, `codepipeline/my-demo-pipeline`).

- If an IAM user started the build, the user's name (for example, `MyUserName`).

- If the Jenkins plugin for CodeBuild started the build, the string `CodeBuild-Jenkins-Plugin`.>
  take vpc-config, name <vpcConfig>
    like vpc-config
    void take
    note <If your CodeBuild project accesses resources in an Amazon VPC, you provide this parameter that identifies the VPC ID and the list of security group IDs and subnet IDs. The security groups and subnets must belong to the same VPC. You must provide at least one security group and one subnet ID.>
  take network-interface, name <networkInterface>
    like network-interface
    void take
    note <Describes a network interface.>
  take encryption-key, name <encryptionKey>
    like non-empty-string
    void take
    note <The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts.

You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key.

You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format `alias/&lt;alias-name&gt;`).>
  take exported-environment-variables, name <exportedEnvironmentVariables>
    like exported-environment-variables
    void take
    note <A list of exported environment variables for this build.

Exported environment variables are used in conjunction with CodePipeline to export environment variables from the current build stage to subsequent stages in the pipeline. For more information, see [Working with variables](https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-variables.html) in the _CodePipeline User Guide_.>
  take report-arns, name <reportArns>
    like build-report-arns
    void take
    note <An array of the ARNs associated with this build's reports.>
  take file-system-locations, name <fileSystemLocations>
    like project-file-system-locations
    void take
    note <An array of `ProjectFileSystemLocation` objects for a CodeBuild build project. A `ProjectFileSystemLocation` object specifies the `identifier`, `location`, `mountOptions`, `mountPoint`, and `type` of a file system created using Amazon Elastic File System.>
  take debug-session, name <debugSession>
    like debug-session
    void take
    note <Contains information about the debug session for this build.>
  take build-batch-arn, name <buildBatchArn>
    like string
    void take
    note <The ARN of the batch build that this build is a member of, if applicable.>