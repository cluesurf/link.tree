
load @termsurf/snow/amazonaws.com/kms/2014-11-01/base/already-exists-exception
  take form already-exists-exception

load @termsurf/snow/amazonaws.com/kms/2014-11-01/base/disabled-exception
  take form disabled-exception

load @termsurf/snow/amazonaws.com/kms/2014-11-01/base/invalid-arn-exception
  take form invalid-arn-exception

load @termsurf/snow/amazonaws.com/kms/2014-11-01/base/kms-internal-exception
  take form kms-internal-exception

load @termsurf/snow/amazonaws.com/kms/2014-11-01/base/kms-invalid-state-exception
  take form kms-invalid-state-exception

load @termsurf/snow/amazonaws.com/kms/2014-11-01/base/limit-exceeded-exception
  take form limit-exceeded-exception

load @termsurf/snow/amazonaws.com/kms/2014-11-01/base/malformed-policy-document-exception
  take form malformed-policy-document-exception

load @termsurf/snow/amazonaws.com/kms/2014-11-01/base/not-found-exception
  take form not-found-exception

load @termsurf/snow/amazonaws.com/kms/2014-11-01/base/replicate-key-response
  take form replicate-key-response

load @termsurf/snow/amazonaws.com/kms/2014-11-01/base/tag-exception
  take form tag-exception

load @termsurf/snow/amazonaws.com/kms/2014-11-01/base/unsupported-operation-exception
  take form unsupported-operation-exception

load @termsurf/snow/base/native-string
  take form native-string

boot replicate-key, name <ReplicateKey>
  deed post
  note <Replicates a multi-Region key into the specified Region. This operation creates a multi-Region replica key based on a multi-Region primary key in a different Region of the same Amazon Web Services partition. You can create multiple replicas of a primary key, but each must be in a different Region. To create a multi-Region primary key, use the CreateKey operation.

This operation supports _multi-Region keys_, an KMS feature that lets you create multiple interoperable KMS keys in different Amazon Web Services Regions. Because these KMS keys have the same key ID, key material, and other metadata, you can use them interchangeably to encrypt data in one Amazon Web Services Region and decrypt it in a different Amazon Web Services Region without re-encrypting the data or making a cross-Region call. For more information about multi-Region keys, see [Using multi-Region keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html) in the _Key Management Service Developer Guide_.

A _replica key_ is a fully-functional KMS key that can be used independently of its primary and peer replica keys. A primary key and its replica keys share properties that make them interoperable. They have the same [key ID](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id) and key material. They also have the same [key spec](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-spec), [key usage](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-usage), [key material origin](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-origin), and [automatic key rotation status](https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html). KMS automatically synchronizes these shared properties among related multi-Region keys. All other properties of a replica key can differ, including its [key policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html), [tags](https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html), [aliases](https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html), and [key state](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html). KMS pricing and quotas for KMS keys apply to each primary key and replica key.

When this operation completes, the new replica key has a transient key state of `Creating`. This key state changes to `Enabled` (or `PendingImport`) after a few seconds when the process of creating the new replica key is complete. While the key state is `Creating`, you can manage key, but you cannot yet use it in cryptographic operations. If you are creating and using the replica key programmatically, retry on `KMSInvalidStateException` or call `DescribeKey` to check its `KeyState` value before using it. For details about the `Creating` key state, see [Key state: Effect on your KMS key](kms/latest/developerguide/key-state.html) in the _Key Management Service Developer Guide_.

The CloudTrail log of a `ReplicateKey` operation records a `ReplicateKey` operation in the primary key's Region and a CreateKey operation in the replica key's Region.

If you replicate a multi-Region primary key with imported key material, the replica key is created with no key material. You must import the same key material that you imported into the primary key. For details, see [Importing key material into multi-Region keys](kms/latest/developerguide/multi-region-keys-import.html) in the _Key Management Service Developer Guide_.

To convert a replica key to a primary key, use the UpdatePrimaryRegion operation.

`ReplicateKey` uses different default values for the `KeyPolicy` and `Tags` parameters than those used in the KMS console. For details, see the parameter descriptions.

**Cross-account use**: No. You cannot use this operation to create a replica key in a different Amazon Web Services account.

**Required permissions**:

- `kms:ReplicateKey` on the primary key (in the primary key's Region). Include this permission in the primary key's key policy.

- `kms:CreateKey` in an IAM policy in the replica Region.

- To use the `Tags` parameter, `kms:TagResource` in an IAM policy in the replica Region.

**Related operations** - CreateKey

- UpdatePrimaryRegion>

  take x-amz-target
    like native-string
  take replicate-key-request, like replicate-key-request

  line </#X-Amz-Target=TrentService.ReplicateKey>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan replicate-key-request

  loot 200
    seed json, like replicate-key-response
    note <Success>
  loot 480
    seed json, like already-exists-exception
    note <AlreadyExistsException>
  loot 481
    seed json, like disabled-exception
    note <DisabledException>
  loot 482
    seed json, like invalid-arn-exception
    note <InvalidArnException>
  loot 483
    seed json, like kms-invalid-state-exception
    note <KMSInvalidStateException>
  loot 484
    seed json, like kms-internal-exception
    note <KMSInternalException>
  loot 485
    seed json, like limit-exceeded-exception
    note <LimitExceededException>
  loot 486
    seed json, like malformed-policy-document-exception
    note <MalformedPolicyDocumentException>
  loot 487
    seed json, like not-found-exception
    note <NotFoundException>
  loot 488
    seed json, like tag-exception
    note <TagException>
  loot 489
    seed json, like unsupported-operation-exception
    note <UnsupportedOperationException>