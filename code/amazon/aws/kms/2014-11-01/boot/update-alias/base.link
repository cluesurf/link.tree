
load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/dependency-timeout-exception
  take form dependency-timeout-exception

load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/kms-internal-exception
  take form kms-internal-exception

load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/kms-invalid-state-exception
  take form kms-invalid-state-exception

load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/limit-exceeded-exception
  take form limit-exceeded-exception

load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/not-found-exception
  take form not-found-exception

load @wavebond/snow/base/native-string
  take form native-string

boot update-alias, name <UpdateAlias>
  deed post
  note <Associates an existing KMS alias with a different KMS key. Each alias is associated with only one KMS key at a time, although a KMS key can have multiple aliases. The alias and the KMS key must be in the same Amazon Web Services account and Region.

Adding, deleting, or updating an alias can allow or deny permission to the KMS key. For details, see [Using ABAC in KMS](https://docs.aws.amazon.com/kms/latest/developerguide/abac.html) in the _Key Management Service Developer Guide_.

The current and new KMS key must be the same type (both symmetric or both asymmetric), and they must have the same key usage (`ENCRYPT_DECRYPT` or `SIGN_VERIFY`). This restriction prevents errors in code that uses aliases. If you must assign an alias to a different type of KMS key, use DeleteAlias to delete the old alias and CreateAlias to create a new alias.

You cannot use `UpdateAlias` to change an alias name. To change an alias name, use DeleteAlias to delete the old alias and CreateAlias to create a new alias.

Because an alias is not a property of a KMS key, you can create, update, and delete the aliases of a KMS key without affecting the KMS key. Also, aliases do not appear in the response from the DescribeKey operation. To get the aliases of all KMS keys in the account, use the ListAliases operation.

The KMS key that you use for this operation must be in a compatible key state. For details, see [Key state: Effect on your KMS key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the _Key Management Service Developer Guide_.

**Cross-account use**: No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.

**Required permissions** - [kms:UpdateAlias](https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html) on the alias (IAM policy).

- [kms:UpdateAlias](https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html) on the current KMS key (key policy).

- [kms:UpdateAlias](https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html) on the new KMS key (key policy).

For details, see [Controlling access to aliases](https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access) in the _Key Management Service Developer Guide_.

**Related operations:** - CreateAlias

- DeleteAlias

- ListAliases>

  take x-amz-target
    like native-string
  take update-alias-request, like update-alias-request

  line </#X-Amz-Target=TrentService.UpdateAlias>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan update-alias-request

  loot 200
    note <Success>
  loot 480
    seed json, like dependency-timeout-exception
    note <DependencyTimeoutException>
  loot 481
    seed json, like not-found-exception
    note <NotFoundException>
  loot 482
    seed json, like kms-internal-exception
    note <KMSInternalException>
  loot 483
    seed json, like limit-exceeded-exception
    note <LimitExceededException>
  loot 484
    seed json, like kms-invalid-state-exception
    note <KMSInvalidStateException>