
load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/dependency-timeout-exception
  take form dependency-timeout-exception

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/get-parameters-for-import-response
  take form get-parameters-for-import-response

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/invalid-arn-exception
  take form invalid-arn-exception

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/kms-internal-exception
  take form kms-internal-exception

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/kms-invalid-state-exception
  take form kms-invalid-state-exception

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/not-found-exception
  take form not-found-exception

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/unsupported-operation-exception
  take form unsupported-operation-exception

load @treesurf/snow/base/native-string
  take form native-string

boot get-parameters-for-import, name <GetParametersForImport>
  deed post
  note <Returns the items you need to import key material into a symmetric, customer managed KMS key. For more information about importing key material into KMS, see [Importing Key Material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html) in the _Key Management Service Developer Guide_.

This operation returns a public key and an import token. Use the public key to encrypt the symmetric key material. Store the import token to send with a subsequent ImportKeyMaterial request.

You must specify the key ID of the symmetric KMS key into which you will import key material. This KMS key's `Origin` must be `EXTERNAL`. You must also specify the wrapping algorithm and type of wrapping key (public key) that you will use to encrypt the key material. You cannot perform this operation on an asymmetric KMS key or on any KMS key in a different Amazon Web Services account.

To import key material, you must use the public key and import token from the same response. These items are valid for 24 hours. The expiration date and time appear in the `GetParametersForImport` response. You cannot use an expired token in an ImportKeyMaterial request. If your key and token expire, send another `GetParametersForImport` request.

The KMS key that you use for this operation must be in a compatible key state. For details, see [Key state: Effect on your KMS key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the _Key Management Service Developer Guide_.

**Cross-account use**: No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.

**Required permissions**: [kms:GetParametersForImport](https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html) (key policy)

**Related operations:** - ImportKeyMaterial

- DeleteImportedKeyMaterial>

  take x-amz-target
    like native-string
  take get-parameters-for-import-request, like get-parameters-for-import-request

  line </#X-Amz-Target=TrentService.GetParametersForImport>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan get-parameters-for-import-request

  loot 200
    seed json, like get-parameters-for-import-response
    note <Success>
  loot 480
    seed json, like invalid-arn-exception
    note <InvalidArnException>
  loot 481
    seed json, like unsupported-operation-exception
    note <UnsupportedOperationException>
  loot 482
    seed json, like dependency-timeout-exception
    note <DependencyTimeoutException>
  loot 483
    seed json, like not-found-exception
    note <NotFoundException>
  loot 484
    seed json, like kms-internal-exception
    note <KMSInternalException>
  loot 485
    seed json, like kms-invalid-state-exception
    note <KMSInvalidStateException>