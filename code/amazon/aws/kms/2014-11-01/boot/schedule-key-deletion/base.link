
load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/dependency-timeout-exception
  take form dependency-timeout-exception

load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/invalid-arn-exception
  take form invalid-arn-exception

load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/kms-internal-exception
  take form kms-internal-exception

load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/kms-invalid-state-exception
  take form kms-invalid-state-exception

load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/not-found-exception
  take form not-found-exception

load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/schedule-key-deletion-response
  take form schedule-key-deletion-response

load @wavebond/snow/base/native-string
  take form native-string

boot schedule-key-deletion, name <ScheduleKeyDeletion>
  deed post
  note <Schedules the deletion of a KMS key. By default, KMS applies a waiting period of 30 days, but you can specify a waiting period of 7-30 days. When this operation is successful, the key state of the KMS key changes to `PendingDeletion` and the key can't be used in any cryptographic operations. It remains in this state for the duration of the waiting period. Before the waiting period ends, you can use CancelKeyDeletion to cancel the deletion of the KMS key. After the waiting period ends, KMS deletes the KMS key, its key material, and all KMS data associated with it, including all aliases that refer to it.

Deleting a KMS key is a destructive and potentially dangerous operation. When a KMS key is deleted, all data that was encrypted under the KMS key is unrecoverable. (The only exception is a multi-Region replica key.) To prevent the use of a KMS key without deleting it, use DisableKey.

If you schedule deletion of a KMS key from a [custom key store](https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html), when the waiting period expires, `ScheduleKeyDeletion` deletes the KMS key from KMS. Then KMS makes a best effort to delete the key material from the associated CloudHSM cluster. However, you might need to manually [delete the orphaned key material](https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-orphaned-key) from the cluster and its backups.

You can schedule the deletion of a multi-Region primary key and its replica keys at any time. However, KMS will not delete a multi-Region primary key with existing replica keys. If you schedule the deletion of a primary key with replicas, its key state changes to `PendingReplicaDeletion` and it cannot be replicated or used in cryptographic operations. This status can continue indefinitely. When the last of its replicas keys is deleted (not just scheduled), the key state of the primary key changes to `PendingDeletion` and its waiting period (`PendingWindowInDays`) begins. For details, see [Deleting multi-Region keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html) in the _Key Management Service Developer Guide_.

For more information about scheduling a KMS key for deletion, see [Deleting KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html) in the _Key Management Service Developer Guide_.

The KMS key that you use for this operation must be in a compatible key state. For details, see [Key state: Effect on your KMS key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the _Key Management Service Developer Guide_.

**Cross-account use**: No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.

**Required permissions**: kms:ScheduleKeyDeletion (key policy)

**Related operations** - CancelKeyDeletion

- DisableKey>

  take x-amz-target
    like native-string
  take schedule-key-deletion-request, like schedule-key-deletion-request

  line </#X-Amz-Target=TrentService.ScheduleKeyDeletion>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan schedule-key-deletion-request

  loot 200
    seed json, like schedule-key-deletion-response
    note <Success>
  loot 480
    seed json, like not-found-exception
    note <NotFoundException>
  loot 481
    seed json, like invalid-arn-exception
    note <InvalidArnException>
  loot 482
    seed json, like dependency-timeout-exception
    note <DependencyTimeoutException>
  loot 483
    seed json, like kms-internal-exception
    note <KMSInternalException>
  loot 484
    seed json, like kms-invalid-state-exception
    note <KMSInvalidStateException>