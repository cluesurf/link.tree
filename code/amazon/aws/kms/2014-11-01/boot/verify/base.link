
load @nerdbond/snow/amazonaws.com/kms/2014-11-01/base/dependency-timeout-exception
  take form dependency-timeout-exception

load @nerdbond/snow/amazonaws.com/kms/2014-11-01/base/disabled-exception
  take form disabled-exception

load @nerdbond/snow/amazonaws.com/kms/2014-11-01/base/invalid-grant-token-exception
  take form invalid-grant-token-exception

load @nerdbond/snow/amazonaws.com/kms/2014-11-01/base/invalid-key-usage-exception
  take form invalid-key-usage-exception

load @nerdbond/snow/amazonaws.com/kms/2014-11-01/base/key-unavailable-exception
  take form key-unavailable-exception

load @nerdbond/snow/amazonaws.com/kms/2014-11-01/base/kms-internal-exception
  take form kms-internal-exception

load @nerdbond/snow/amazonaws.com/kms/2014-11-01/base/kms-invalid-signature-exception
  take form kms-invalid-signature-exception

load @nerdbond/snow/amazonaws.com/kms/2014-11-01/base/kms-invalid-state-exception
  take form kms-invalid-state-exception

load @nerdbond/snow/amazonaws.com/kms/2014-11-01/base/not-found-exception
  take form not-found-exception

load @nerdbond/snow/amazonaws.com/kms/2014-11-01/base/verify-response
  take form verify-response

load @nerdbond/snow/base/native-string
  take form native-string

boot verify, name <Verify>
  deed post
  note <Verifies a digital signature that was generated by the Sign operation.

Verification confirms that an authorized user signed the message with the specified KMS key and signing algorithm, and the message hasn't changed since it was signed. If the signature is verified, the value of the `SignatureValid` field in the response is `True`. If the signature verification fails, the `Verify` operation fails with an `KMSInvalidSignatureException` exception.

A digital signature is generated by using the private key in an asymmetric KMS key. The signature is verified by using the public key in the same asymmetric KMS key. For information about symmetric and asymmetric KMS keys, see [Using Symmetric and Asymmetric KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html) in the _Key Management Service Developer Guide_.

To verify a digital signature, you can use the `Verify` operation. Specify the same asymmetric KMS key, message, and signing algorithm that were used to produce the signature.

You can also verify the digital signature by using the public key of the KMS key outside of KMS. Use the GetPublicKey operation to download the public key in the asymmetric KMS key and then use the public key to verify the signature outside of KMS. The advantage of using the `Verify` operation is that it is performed within KMS. As a result, it's easy to call, the operation is performed within the FIPS boundary, it is logged in CloudTrail, and you can use key policy and IAM policy to determine who is authorized to use the KMS key to verify signatures.

The KMS key that you use for this operation must be in a compatible key state. For details, see [Key state: Effect on your KMS key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the _Key Management Service Developer Guide_.

**Cross-account use**: Yes. To perform this operation with a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN in the value of the `KeyId` parameter.

**Required permissions**: [kms:Verify](https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html) (key policy)

**Related operations**: Sign>

  take x-amz-target
    like native-string
  take verify-request, like verify-request

  line </#X-Amz-Target=TrentService.Verify>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan verify-request

  loot 200
    seed json, like verify-response
    note <Success>
  loot 480
    seed json, like not-found-exception
    note <NotFoundException>
  loot 481
    seed json, like disabled-exception
    note <DisabledException>
  loot 482
    seed json, like key-unavailable-exception
    note <KeyUnavailableException>
  loot 483
    seed json, like dependency-timeout-exception
    note <DependencyTimeoutException>
  loot 484
    seed json, like invalid-key-usage-exception
    note <InvalidKeyUsageException>
  loot 485
    seed json, like invalid-grant-token-exception
    note <InvalidGrantTokenException>
  loot 486
    seed json, like kms-internal-exception
    note <KMSInternalException>
  loot 487
    seed json, like kms-invalid-state-exception
    note <KMSInvalidStateException>
  loot 488
    seed json, like kms-invalid-signature-exception
    note <KMSInvalidSignatureException>