
load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/decrypt-response
  take form decrypt-response

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/dependency-timeout-exception
  take form dependency-timeout-exception

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/disabled-exception
  take form disabled-exception

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/incorrect-key-exception
  take form incorrect-key-exception

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/invalid-ciphertext-exception
  take form invalid-ciphertext-exception

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/invalid-grant-token-exception
  take form invalid-grant-token-exception

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/invalid-key-usage-exception
  take form invalid-key-usage-exception

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/key-unavailable-exception
  take form key-unavailable-exception

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/kms-internal-exception
  take form kms-internal-exception

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/kms-invalid-state-exception
  take form kms-invalid-state-exception

load @treesurf/snow/amazonaws.com/kms/2014-11-01/base/not-found-exception
  take form not-found-exception

load @treesurf/snow/base/native-string
  take form native-string

boot decrypt, name <Decrypt>
  deed post
  note <Decrypts ciphertext that was encrypted by a KMS key using any of the following operations:

- Encrypt

- GenerateDataKey

- GenerateDataKeyPair

- GenerateDataKeyWithoutPlaintext

- GenerateDataKeyPairWithoutPlaintext

You can use this operation to decrypt ciphertext that was encrypted under a symmetric or asymmetric KMS key. When the KMS key is asymmetric, you must specify the KMS key and the encryption algorithm that was used to encrypt the ciphertext. For information about symmetric and asymmetric KMS keys, see [Using Symmetric and Asymmetric KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html) in the _Key Management Service Developer Guide_.

The Decrypt operation also decrypts ciphertext that was encrypted outside of KMS by the public key in an KMS asymmetric KMS key. However, it cannot decrypt ciphertext produced by other libraries, such as the [Amazon Web Services Encryption SDK](https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/) or [Amazon S3 client-side encryption](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html). These libraries return a ciphertext format that is incompatible with KMS.

If the ciphertext was encrypted under a symmetric KMS key, the `KeyId` parameter is optional. KMS can get this information from metadata that it adds to the symmetric ciphertext blob. This feature adds durability to your implementation by ensuring that authorized users can decrypt ciphertext decades after it was encrypted, even if they've lost track of the key ID. However, specifying the KMS key is always recommended as a best practice. When you use the `KeyId` parameter to specify a KMS key, KMS only uses the KMS key you specify. If the ciphertext was encrypted under a different KMS key, the `Decrypt` operation fails. This practice ensures that you use the KMS key that you intend.

Whenever possible, use key policies to give users permission to call the `Decrypt` operation on a particular KMS key, instead of using IAM policies. Otherwise, you might create an IAM user policy that gives the user `Decrypt` permission on all KMS keys. This user could decrypt ciphertext that was encrypted by KMS keys in other accounts if the key policy for the cross-account KMS key permits it. If you must use an IAM policy for `Decrypt` permissions, limit the user to particular KMS keys or particular trusted accounts. For details, see [Best practices for IAM policies](https://docs.aws.amazon.com/kms/latest/developerguide/iam-policies.html#iam-policies-best-practices) in the _Key Management Service Developer Guide_.

Applications in Amazon Web Services Nitro Enclaves can call this operation by using the [Amazon Web Services Nitro Enclaves Development Kit](https://github.com/aws/aws-nitro-enclaves-sdk-c). For information about the supporting parameters, see [How Amazon Web Services Nitro Enclaves use KMS](https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html) in the _Key Management Service Developer Guide_.

The KMS key that you use for this operation must be in a compatible key state. For details, see [Key state: Effect on your KMS key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the _Key Management Service Developer Guide_.

**Cross-account use**: Yes. To perform this operation with a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN in the value of the `KeyId` parameter.

**Required permissions**: [kms:Decrypt](https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html) (key policy)

**Related operations:** - Encrypt

- GenerateDataKey

- GenerateDataKeyPair

- ReEncrypt>

  take x-amz-target
    like native-string
  take decrypt-request, like decrypt-request

  line </#X-Amz-Target=TrentService.Decrypt>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan decrypt-request

  loot 200
    seed json, like decrypt-response
    note <Success>
  loot 480
    seed json, like not-found-exception
    note <NotFoundException>
  loot 481
    seed json, like disabled-exception
    note <DisabledException>
  loot 482
    seed json, like invalid-ciphertext-exception
    note <InvalidCiphertextException>
  loot 483
    seed json, like key-unavailable-exception
    note <KeyUnavailableException>
  loot 484
    seed json, like incorrect-key-exception
    note <IncorrectKeyException>
  loot 485
    seed json, like invalid-key-usage-exception
    note <InvalidKeyUsageException>
  loot 486
    seed json, like dependency-timeout-exception
    note <DependencyTimeoutException>
  loot 487
    seed json, like invalid-grant-token-exception
    note <InvalidGrantTokenException>
  loot 488
    seed json, like kms-internal-exception
    note <KMSInternalException>
  loot 489
    seed json, like kms-invalid-state-exception
    note <KMSInvalidStateException>