
load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/grant-constraints
  take form grant-constraints

load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/grant-name-type
  take form grant-name-type

load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/grant-operation-list
  take form grant-operation-list

load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/grant-token-list
  take form grant-token-list

load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/key-id-type
  take form key-id-type

load @wavebond/snow/amazonaws.com/kms/2014-11-01/base/principal-id-type
  take form principal-id-type

form create-grant-request, name <CreateGrantRequest>
  take key-id, name <KeyId>
    like key-id-type
    note <Identifies the KMS key for the grant. The grant gives principals permission to use this KMS key.

Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN.

For example:

- Key ID: `1234abcd-12ab-34cd-56ef-1234567890ab`

- Key ARN: `arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`

To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.>
  take grantee-principal, name <GranteePrincipal>
    like principal-id-type
    note <The identity that gets the permissions specified in the grant.

To specify the principal, use the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an Amazon Web Services principal. Valid Amazon Web Services principals include Amazon Web Services accounts (root), IAM users, IAM roles, federated users, and assumed role users. For examples of the ARN syntax to use for specifying a principal, see [Amazon Web Services Identity and Access Management (IAM)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam) in the Example ARNs section of the _Amazon Web Services General Reference_.>
  take retiring-principal, name <RetiringPrincipal>
    like principal-id-type
    void take
    note <The principal that has permission to use the RetireGrant operation to retire the grant.

To specify the principal, use the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an Amazon Web Services principal. Valid Amazon Web Services principals include Amazon Web Services accounts (root), IAM users, federated users, and assumed role users. For examples of the ARN syntax to use for specifying a principal, see [Amazon Web Services Identity and Access Management (IAM)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam) in the Example ARNs section of the _Amazon Web Services General Reference_.

The grant determines the retiring principal. Other principals might have permission to retire the grant or revoke the grant. For details, see RevokeGrant and [Retiring and revoking grants](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete) in the _Key Management Service Developer Guide_.>
  take operations, name <Operations>
    like grant-operation-list
    note <A list of operations that the grant permits.

The operation must be supported on the KMS key. For example, you cannot create a grant for a symmetric KMS key that allows the Sign operation, or a grant for an asymmetric KMS key that allows the GenerateDataKey operation. If you try, KMS returns a `ValidationError` exception. For details, see [Grant operations](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-grant-operations) in the _Key Management Service Developer Guide_.>
  take constraints, name <Constraints>
    like grant-constraints
    void take
    note <Specifies a grant constraint.

KMS supports the `EncryptionContextEquals` and `EncryptionContextSubset` grant constraints. Each constraint value can include up to 8 encryption context pairs. The encryption context value in each constraint cannot exceed 384 characters.

These grant constraints allow the permissions in the grant only when the encryption context in the request matches (`EncryptionContextEquals`) or includes (`EncryptionContextSubset`) the encryption context specified in this structure. For information about grant constraints, see [Using grant constraints](https://docs.aws.amazon.com/kms/latest/developerguide/create-grant-overview.html#grant-constraints) in the _Key Management Service Developer Guide_. For more information about encryption context, see [Encryption Context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the __Key Management Service Developer Guide__ .

The encryption context grant constraints are supported only on operations that include an encryption context. You cannot use an encryption context grant constraint for cryptographic operations with asymmetric KMS keys or for management operations, such as DescribeKey or RetireGrant.>
  take grant-tokens, name <GrantTokens>
    like grant-token-list
    void take
    note <A list of grant tokens.

Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved _eventual consistency_. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the _Key Management Service Developer Guide_.>
  take name, name <Name>
    like grant-name-type
    void take
    note <A friendly name for the grant. Use this value to prevent the unintended creation of duplicate grants when retrying this request.

When this value is absent, all `CreateGrant` requests result in a new grant with a unique `GrantId` even if all the supplied parameters are identical. This can result in unintended duplicates when you retry the `CreateGrant` request.

When this value is present, you can retry a `CreateGrant` request with identical parameters; if the grant already exists, the original `GrantId` is returned without creating a new grant. Note that the returned grant token is unique with every `CreateGrant` request, even when a duplicate `GrantId` is returned. All grant tokens for the same grant ID can be used interchangeably.>