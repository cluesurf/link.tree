
load @termsurf/snow/amazonaws.com/monitoring/2010-08-01/base/limit-exceeded-fault
  take form limit-exceeded-fault

load @termsurf/snow/base/native-string
  take form native-string

boot post-put-composite-alarm, name <POST_PutCompositeAlarm>
  deed post
  note <Creates or updates a _composite alarm_. When you create a composite alarm, you specify a rule expression for the alarm that takes into account the alarm states of other alarms that you have created. The composite alarm goes into ALARM state only if all conditions of the rule are met.

The alarms specified in a composite alarm's rule expression can include metric alarms and other composite alarms.

Using composite alarms can reduce alarm noise. You can create multiple metric alarms, and also create a composite alarm and set up alerts only for the composite alarm. For example, you could create a composite alarm that goes into ALARM state only when more than one of the underlying metric alarms are in ALARM state.

Currently, the only alarm actions that can be taken by composite alarms are notifying SNS topics.

It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can't delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.

To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the `AlarmRule` of one of the alarms to `False`.

Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path.

When this operation creates an alarm, the alarm state is immediately set to `INSUFFICIENT_DATA`. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed. For a composite alarm, this initial time after creation is the only time that the alarm can be in `INSUFFICIENT_DATA` state.

When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.

If you are an IAM user, you must have `iam:CreateServiceLinkedRole` to create a composite alarm that has Systems Manager OpsItem actions.>

  take action
    like native-string
  take version
    like native-string
  take put-composite-alarm-input, like put-composite-alarm-input
    void take

  line </#Action=PutCompositeAlarm>

  find <Action>, loan action
  find <Version>, loan version

  seed xml, loan put-composite-alarm-input

  loot 200
    note <Success>
  loot 480
    seed xml, like limit-exceeded-fault
    note <LimitExceededFault>