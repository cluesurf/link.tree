
load @treesurf/snow/amazonaws.com/monitoring/2010-08-01/base/dimension
  take form dimension

load @treesurf/snow/amazonaws.com/monitoring/2010-08-01/base/limit-exceeded-fault
  take form limit-exceeded-fault

load @treesurf/snow/amazonaws.com/monitoring/2010-08-01/base/metric-data-query
  take form metric-data-query

load @treesurf/snow/amazonaws.com/monitoring/2010-08-01/base/resource-name
  take form resource-name

load @treesurf/snow/amazonaws.com/monitoring/2010-08-01/base/tag
  take form tag

load @treesurf/snow/base/list
  take form list

load @treesurf/snow/base/native-boolean
  take form native-boolean

load @treesurf/snow/base/native-integer
  take form native-integer

load @treesurf/snow/base/native-number
  take form native-number

load @treesurf/snow/base/native-string
  take form native-string

boot get-put-metric-alarm, name <GET_PutMetricAlarm>
  deed get
  note <Creates or updates an alarm and associates it with the specified metric, metric math expression, or anomaly detection model.

Alarms based on anomaly detection models cannot have Auto Scaling actions.

When this operation creates an alarm, the alarm state is immediately set to `INSUFFICIENT_DATA`. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.

When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.

If you are an IAM user, you must have Amazon EC2 permissions for some alarm operations:

- The `iam:CreateServiceLinkedRole` for all alarms with EC2 actions

- The `iam:CreateServiceLinkedRole` to create an alarm with Systems Manager OpsItem actions.

The first time you create an alarm in the Management Console, the CLI, or by using the PutMetricAlarm API, CloudWatch creates the necessary service-linked role for you. The service-linked roles are called `AWSServiceRoleForCloudWatchEvents` and `AWSServiceRoleForCloudWatchAlarms_ActionSSM`. For more information, see [Amazon Web Services service-linked role](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role).

**Cross-account alarms** You can set an alarm on metrics in the current account, or in another account. To create a cross-account alarm that watches a metric in a different account, you must have completed the following pre-requisites:

- The account where the metrics are located (the _sharing account_) must already have a sharing role named **CloudWatch-CrossAccountSharingRole**. If it does not already have this role, you must create it using the instructions in **Set up a sharing account** in [Cross-account cross-Region CloudWatch console](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region). The policy for that role must grant access to the ID of the account where you are creating the alarm.

- The account where you are creating the alarm (the _monitoring account_) must already have a service-linked role named **AWSServiceRoleForCloudWatchCrossAccount** to allow CloudWatch to assume the sharing role in the sharing account. If it does not, you must create it following the directions in **Set up a monitoring account** in [Cross-account cross-Region CloudWatch console](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region).>

  take alarm-name
    like native-string
    note <The name for the alarm. This name must be unique within the Region.>
  take alarm-description
    like native-string
    note <The description for the alarm.>
    void take
  take actions-enabled
    like native-boolean
    note <Indicates whether actions should be executed during any changes to the alarm state. The default is `TRUE`.>
    void take
  take ok-actions
    like list
      like resource-name
    note <The actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an Amazon Resource Name (ARN).

Valid Values: `arn:aws:automate:_region_:ec2:stop` | `arn:aws:automate:_region_:ec2:terminate` | `arn:aws:automate:_region_:ec2:recover` | `arn:aws:automate:_region_:ec2:reboot` | `arn:aws:sns:_region_:_account-id_:_sns-topic-name_` | `arn:aws:autoscaling:_region_:_account-id_:scalingPolicy:_policy-id_:autoScalingGroupName/_group-friendly-name_:policyName/_policy-friendly-name_`

Valid Values (for use with IAM roles): `arn:aws:swf:_region_:_account-id_:action/actions/AWS_EC2.InstanceId.Stop/1.0` | `arn:aws:swf:_region_:_account-id_:action/actions/AWS_EC2.InstanceId.Terminate/1.0` | `arn:aws:swf:_region_:_account-id_:action/actions/AWS_EC2.InstanceId.Reboot/1.0` | `arn:aws:swf:_region_:_account-id_:action/actions/AWS_EC2.InstanceId.Recover/1.0`>
    void take
  take alarm-actions
    like list
      like resource-name
    note <The actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an Amazon Resource Name (ARN).

Valid Values: `arn:aws:automate:_region_:ec2:stop` | `arn:aws:automate:_region_:ec2:terminate` | `arn:aws:automate:_region_:ec2:recover` | `arn:aws:automate:_region_:ec2:reboot` | `arn:aws:sns:_region_:_account-id_:_sns-topic-name_` | `arn:aws:autoscaling:_region_:_account-id_:scalingPolicy:_policy-id_:autoScalingGroupName/_group-friendly-name_:policyName/_policy-friendly-name_` | `arn:aws:ssm:_region_:_account-id_:opsitem:_severity_` | `arn:aws:ssm-incidents::_account-id_:response-plan:_response-plan-name_`

Valid Values (for use with IAM roles): `arn:aws:swf:_region_:_account-id_:action/actions/AWS_EC2.InstanceId.Stop/1.0` | `arn:aws:swf:_region_:_account-id_:action/actions/AWS_EC2.InstanceId.Terminate/1.0` | `arn:aws:swf:_region_:_account-id_:action/actions/AWS_EC2.InstanceId.Reboot/1.0` | `arn:aws:swf:_region_:_account-id_:action/actions/AWS_EC2.InstanceId.Recover/1.0`>
    void take
  take insufficient-data-actions
    like list
      like resource-name
    note <The actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an Amazon Resource Name (ARN).

Valid Values: `arn:aws:automate:_region_:ec2:stop` | `arn:aws:automate:_region_:ec2:terminate` | `arn:aws:automate:_region_:ec2:recover` | `arn:aws:automate:_region_:ec2:reboot` | `arn:aws:sns:_region_:_account-id_:_sns-topic-name_` | `arn:aws:autoscaling:_region_:_account-id_:scalingPolicy:_policy-id_:autoScalingGroupName/_group-friendly-name_:policyName/_policy-friendly-name_`

Valid Values (for use with IAM roles): `&gt;arn:aws:swf:_region_:_account-id_:action/actions/AWS_EC2.InstanceId.Stop/1.0` | `arn:aws:swf:_region_:_account-id_:action/actions/AWS_EC2.InstanceId.Terminate/1.0` | `arn:aws:swf:_region_:_account-id_:action/actions/AWS_EC2.InstanceId.Reboot/1.0`>
    void take
  take metric-name
    like native-string
    note <The name for the metric associated with the alarm. For each `PutMetricAlarm` operation, you must specify either `MetricName` or a `Metrics` array.

If you are creating an alarm based on a math expression, you cannot specify this parameter, or any of the `Dimensions`, `Period`, `Namespace`, `Statistic`, or `ExtendedStatistic` parameters. Instead, you specify all this information in the `Metrics` array.>
    void take
  take namespace
    like native-string
    note <The namespace for the metric associated specified in `MetricName`.>
    void take
  take statistic
    like native-string
    note <The statistic for the metric specified in `MetricName`, other than percentile. For percentile statistics, use `ExtendedStatistic`. When you call `PutMetricAlarm` and specify a `MetricName`, you must specify either `Statistic` or `ExtendedStatistic,` but not both.>
    void take
  take extended-statistic
    like native-string
    note <The percentile statistic for the metric specified in `MetricName`. Specify a value between p0.0 and p100. When you call `PutMetricAlarm` and specify a `MetricName`, you must specify either `Statistic` or `ExtendedStatistic,` but not both.>
    void take
  take dimensions
    like list
      like dimension
    note <The dimensions for the metric specified in `MetricName`.>
    void take
  take period
    like native-integer
    note <The length, in seconds, used each time the metric specified in `MetricName` is evaluated. Valid values are 10, 30, and any multiple of 60.

`Period` is required for alarms based on static thresholds. If you are creating an alarm based on a metric math expression, you specify the period for each metric within the objects in the `Metrics` array.

Be sure to specify 10 or 30 only for metrics that are stored by a `PutMetricData` call with a `StorageResolution` of 1. If you specify a period of 10 or 30 for a metric that does not have sub-minute resolution, the alarm still attempts to gather data at the period rate that you specify. In this case, it does not receive data for the attempts that do not correspond to a one-minute data resolution, and the alarm might often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets this alarm as a high-resolution alarm, which has a higher charge than other alarms. For more information about pricing, see [Amazon CloudWatch Pricing](https://aws.amazon.com/cloudwatch/pricing/).

An alarm's total current evaluation period can be no longer than one day, so `Period` multiplied by `EvaluationPeriods` cannot be more than 86,400 seconds.>
    void take
  take unit
    like native-string
    note <The unit of measure for the statistic. For example, the units for the Amazon EC2 NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance receives on all network interfaces. You can also specify a unit when you create a custom metric. Units help provide conceptual meaning to your data. Metric data points that specify a unit of measure, such as Percent, are aggregated separately.

If you don't specify `Unit`, CloudWatch retrieves all unit types that have been published for the metric and attempts to evaluate the alarm. Usually, metrics are published with only one unit, so the alarm works as intended.

However, if the metric is published with multiple types of units and you don't specify a unit, the alarm's behavior is not defined and it behaves predictably.

We recommend omitting `Unit` so that you don't inadvertently specify an incorrect unit that is not published for this metric. Doing so causes the alarm to be stuck in the `INSUFFICIENT DATA` state.>
    void take
  take evaluation-periods
    like native-integer
    note <The number of periods over which data is compared to the specified threshold. If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an "M out of N" alarm, this value is the N.

An alarm's total current evaluation period can be no longer than one day, so this number multiplied by `Period` cannot be more than 86,400 seconds.>
  take datapoints-to-alarm
    like native-integer
    note <The number of data points that must be breaching to trigger the alarm. This is used only if you are setting an "M out of N" alarm. In that case, this value is the M. For more information, see [Evaluating an Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the _Amazon CloudWatch User Guide_.>
    void take
  take threshold
    like native-number
      bind lace, lace double
    note <The value against which the specified statistic is compared.

This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.>
    void take
  take comparison-operator
    like native-string
    note <The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.

The values `LessThanLowerOrGreaterThanUpperThreshold`, `LessThanLowerThreshold`, and `GreaterThanUpperThreshold` are used only for alarms based on anomaly detection models.>
  take treat-missing-data
    like native-string
    note <Sets how this alarm is to handle missing data points. If `TreatMissingData` is omitted, the default behavior of `missing` is used. For more information, see [Configuring How CloudWatch Alarms Treats Missing Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data).

Valid Values: `breaching | notBreaching | ignore | missing`>
    void take
  take evaluate-low-sample-count-percentile
    like native-string
    note <Used only for alarms based on percentiles. If you specify `ignore`, the alarm state does not change during periods with too few data points to be statistically significant. If you specify `evaluate` or omit this parameter, the alarm is always evaluated and possibly changes state no matter how many data points are available. For more information, see [Percentile-Based CloudWatch Alarms and Low Data Samples](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#percentiles-with-low-samples).

Valid Values: `evaluate | ignore`>
    void take
  take metrics
    like list
      like metric-data-query
    note <An array of `MetricDataQuery` structures that enable you to create an alarm based on the result of a metric math expression. For each `PutMetricAlarm` operation, you must specify either `MetricName` or a `Metrics` array.

Each item in the `Metrics` array either retrieves a metric or performs a math expression.

One item in the `Metrics` array is the expression that the alarm watches. You designate this expression by setting `ReturnData` to true for this object in the array. For more information, see [MetricDataQuery](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDataQuery.html).

If you use the `Metrics` parameter, you cannot include the `MetricName`, `Dimensions`, `Period`, `Namespace`, `Statistic`, or `ExtendedStatistic` parameters of `PutMetricAlarm` in the same operation. Instead, you retrieve the metrics you are using in your math expression as part of the `Metrics` array.>
    void take
  take tags
    like list
      like tag
    note <A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm.

Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.

If you are using this operation to update an existing alarm, any tags you specify in this parameter are ignored. To change the tags of an existing alarm, use [TagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html) or [UntagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html).>
    void take
  take threshold-metric-id
    like native-string
    note <If this is an alarm based on an anomaly detection model, make this value match the ID of the `ANOMALY_DETECTION_BAND` function.

For an example of how to use this parameter, see the **Anomaly Detection Model Alarm** example on this page.

If your alarm uses this parameter, it cannot have Auto Scaling actions.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=PutMetricAlarm>

  find <AlarmName>, loan alarm-name
  find <AlarmDescription>, loan alarm-description
  find <ActionsEnabled>, loan actions-enabled
  find <OKActions>, loan ok-actions
  find <AlarmActions>, loan alarm-actions
  find <InsufficientDataActions>, loan insufficient-data-actions
  find <MetricName>, loan metric-name
  find <Namespace>, loan namespace
  find <Statistic>, loan statistic
  find <ExtendedStatistic>, loan extended-statistic
  find <Dimensions>, loan dimensions
  find <Period>, loan period
  find <Unit>, loan unit
  find <EvaluationPeriods>, loan evaluation-periods
  find <DatapointsToAlarm>, loan datapoints-to-alarm
  find <Threshold>, loan threshold
  find <ComparisonOperator>, loan comparison-operator
  find <TreatMissingData>, loan treat-missing-data
  find <EvaluateLowSampleCountPercentile>, loan evaluate-low-sample-count-percentile
  find <Metrics>, loan metrics
  find <Tags>, loan tags
  find <ThresholdMetricId>, loan threshold-metric-id
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    note <Success>
  loot 480
    seed xml, like limit-exceeded-fault
    note <LimitExceededFault>