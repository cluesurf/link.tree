
load @nerdbond/snow/amazonaws.com/monitoring/2010-08-01/base/resource-not-found
  take form resource-not-found

load @nerdbond/snow/base/native-string
  take form native-string

boot post-delete-alarms, name <POST_DeleteAlarms>
  deed post
  note <Deletes the specified alarms. You can delete up to 100 alarms in one operation. However, this total can include no more than one composite alarm. For example, you could delete 99 metric alarms and one composite alarms with one operation, but you can't delete two composite alarms with one operation.

In the event of an error, no alarms are deleted.

It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can't delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.

To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the `AlarmRule` of one of the alarms to `False`.

Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path.>

  take action
    like native-string
  take version
    like native-string
  take delete-alarms-input, like delete-alarms-input
    void take

  line </#Action=DeleteAlarms>

  find <Action>, loan action
  find <Version>, loan version

  seed xml, loan delete-alarms-input

  loot 200
    note <Success>
  loot 480
    seed xml, like resource-not-found
    note <ResourceNotFound>