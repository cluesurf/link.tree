
load @nerdbond/snow/amazonaws.com/monitoring/2010-08-01/base/actions-enabled
  take form actions-enabled

load @nerdbond/snow/amazonaws.com/monitoring/2010-08-01/base/alarm-description
  take form alarm-description

load @nerdbond/snow/amazonaws.com/monitoring/2010-08-01/base/alarm-name
  take form alarm-name

load @nerdbond/snow/amazonaws.com/monitoring/2010-08-01/base/alarm-rule
  take form alarm-rule

load @nerdbond/snow/amazonaws.com/monitoring/2010-08-01/base/resource-list
  take form resource-list

load @nerdbond/snow/amazonaws.com/monitoring/2010-08-01/base/tag-list
  take form tag-list

form put-composite-alarm-input, name <PutCompositeAlarmInput>
  take actions-enabled, name <ActionsEnabled>
    like actions-enabled
    void take
    note <Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. The default is `TRUE`.>
  take alarm-actions, name <AlarmActions>
    like resource-list
    void take
    note <The actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an Amazon Resource Name (ARN).

Valid Values: `arn:aws:sns:_region_:_account-id_:_sns-topic-name_` | `arn:aws:ssm:_region_:_account-id_:opsitem:_severity_`>
  take alarm-description, name <AlarmDescription>
    like alarm-description
    void take
    note <The description for the composite alarm.>
  take alarm-name, name <AlarmName>
    like alarm-name
    note <The name for the composite alarm. This name must be unique within the Region.>
  take alarm-rule, name <AlarmRule>
    like alarm-rule
    note <An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For each alarm that you reference, you designate a function that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the functions in your expression.

You can use either alarm names or ARNs to reference the other alarms that are to be evaluated.

Functions can include the following:

- `ALARM("_alarm-name_ or _alarm-ARN_")` is TRUE if the named alarm is in ALARM state.

- `OK("_alarm-name_ or _alarm-ARN_")` is TRUE if the named alarm is in OK state.

- `INSUFFICIENT_DATA("_alarm-name_ or _alarm-ARN_")` is TRUE if the named alarm is in INSUFFICIENT_DATA state.

- `TRUE` always evaluates to TRUE.

- `FALSE` always evaluates to FALSE.

TRUE and FALSE are useful for testing a complex `AlarmRule` structure, and for testing your alarm actions.

Alarm names specified in `AlarmRule` can be surrounded with double-quotes ("), but do not have to be.

The following are some examples of `AlarmRule`:

- `ALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh)` specifies that the composite alarm goes into ALARM state only if both CPUUtilizationTooHigh and DiskReadOpsTooHigh alarms are in ALARM state.

- `ALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress)` specifies that the alarm goes to ALARM state if CPUUtilizationTooHigh is in ALARM state and DeploymentInProgress is not in ALARM state. This example reduces alarm noise during a known deployment window.

- `(ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND OK(NetworkOutTooHigh)` goes into ALARM state if CPUUtilizationTooHigh OR DiskReadOpsTooHigh is in ALARM state, and if NetworkOutTooHigh is in OK state. This provides another example of using a composite alarm to prevent noise. This rule ensures that you are not notified with an alarm action on high CPU or disk usage if a known network problem is also occurring.

The `AlarmRule` can specify as many as 100 "children" alarms. The `AlarmRule` expression can have as many as 500 elements. Elements are child alarms, TRUE or FALSE statements, and parentheses.>
  take insufficient-data-actions, name <InsufficientDataActions>
    like resource-list
    void take
    note <The actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an Amazon Resource Name (ARN).

Valid Values: `arn:aws:sns:_region_:_account-id_:_sns-topic-name_`>
  take ok-actions, name <OKActions>
    like resource-list
    void take
    note <The actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an Amazon Resource Name (ARN).

Valid Values: `arn:aws:sns:_region_:_account-id_:_sns-topic-name_`>
  take tags, name <Tags>
    like tag-list
    void take
    note <A list of key-value pairs to associate with the composite alarm. You can associate as many as 50 tags with an alarm.

Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values.>