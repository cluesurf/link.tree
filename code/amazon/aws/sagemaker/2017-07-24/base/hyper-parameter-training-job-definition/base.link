
load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/checkpoint-config
  take form checkpoint-config

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/hyper-parameter-algorithm-specification
  take form hyper-parameter-algorithm-specification

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/hyper-parameter-training-job-definition-name
  take form hyper-parameter-training-job-definition-name

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/hyper-parameter-tuning-job-objective
  take form hyper-parameter-tuning-job-objective

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/hyper-parameters
  take form hyper-parameters

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/input-data-config
  take form input-data-config

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/output-data-config
  take form output-data-config

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/parameter-ranges
  take form parameter-ranges

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/resource-config
  take form resource-config

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/retry-strategy
  take form retry-strategy

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/role-arn
  take form role-arn

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/stopping-condition
  take form stopping-condition

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/vpc-config
  take form vpc-config

load @nerdbond/snow/base/boolean
  take form boolean

form hyper-parameter-training-job-definition, name <HyperParameterTrainingJobDefinition>
  note <Defines the training jobs launched by a hyperparameter tuning job.>
  take definition-name, name <DefinitionName>
    like hyper-parameter-training-job-definition-name
    void take
    note <The job definition name.>
  take tuning-objective, name <TuningObjective>
    like hyper-parameter-tuning-job-objective
    void take
  take hyper-parameter-ranges, name <HyperParameterRanges>
    like parameter-ranges
    void take
  take static-hyper-parameters, name <StaticHyperParameters>
    like hyper-parameters
    void take
    note <Specifies the values of hyperparameters that do not change for the tuning job.>
  take algorithm-specification, name <AlgorithmSpecification>
    like hyper-parameter-algorithm-specification
    note <The HyperParameterAlgorithmSpecification object that specifies the resource algorithm to use for the training jobs that the tuning job launches.>
  take role-arn, name <RoleArn>
    like role-arn
    note <The Amazon Resource Name (ARN) of the IAM role associated with the training jobs that the tuning job launches.>
  take input-data-config, name <InputDataConfig>
    like input-data-config
    void take
    note <An array of Channel objects that specify the input for the training jobs that the tuning job launches.>
  take vpc-config, name <VpcConfig>
    like vpc-config
    void take
    note <The VpcConfig object that specifies the VPC that you want the training jobs that this hyperparameter tuning job launches to connect to. Control access to and from your training container by configuring the VPC. For more information, see [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).>
  take output-data-config, name <OutputDataConfig>
    like output-data-config
    note <Specifies the path to the Amazon S3 bucket where you store model artifacts from the training jobs that the tuning job launches.>
  take resource-config, name <ResourceConfig>
    like resource-config
    note <The resources, including the compute instances and storage volumes, to use for the training jobs that the tuning job launches.

Storage volumes store model artifacts and incremental states. Training algorithms might also use storage volumes for scratch space. If you want Amazon SageMaker to use the storage volume to store the training data, choose `File` as the `TrainingInputMode` in the algorithm specification. For distributed training algorithms, specify an instance count greater than 1.>
  take stopping-condition, name <StoppingCondition>
    like stopping-condition
    note <Specifies a limit to how long a model hyperparameter training job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, Amazon SageMaker ends the training job. Use this API to cap model training costs.>
  take enable-network-isolation, name <EnableNetworkIsolation>
    like boolean
    void take
    note <Isolates the training container. No inbound or outbound network calls can be made, except for calls between peers within a training cluster for distributed training. If network isolation is used for training jobs that are configured to use a VPC, Amazon SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.>
  take enable-inter-container-traffic-encryption, name <EnableInterContainerTrafficEncryption>
    like boolean
    void take
    note <To encrypt all communications between ML compute instances in distributed training, choose `True`. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training.>
  take enable-managed-spot-training, name <EnableManagedSpotTraining>
    like boolean
    void take
    note <A Boolean indicating whether managed spot training is enabled (`True`) or not (`False`).>
  take checkpoint-config, name <CheckpointConfig>
    like checkpoint-config
    void take
  take retry-strategy, name <RetryStrategy>
    like retry-strategy
    void take
    note <The number of times to retry the job when the job fails due to an `InternalServerError`.>
