
load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/algorithm-specification
  take form algorithm-specification

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/auto-ml-job-arn
  take form auto-ml-job-arn

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/billable-time-in-seconds
  take form billable-time-in-seconds

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/checkpoint-config
  take form checkpoint-config

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/debug-hook-config
  take form debug-hook-config

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/debug-rule-configurations
  take form debug-rule-configurations

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/debug-rule-evaluation-statuses
  take form debug-rule-evaluation-statuses

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/experiment-config
  take form experiment-config

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/failure-reason
  take form failure-reason

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/final-metric-data-list
  take form final-metric-data-list

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/hyper-parameter-tuning-job-arn
  take form hyper-parameter-tuning-job-arn

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/hyper-parameters
  take form hyper-parameters

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/input-data-config
  take form input-data-config

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/labeling-job-arn
  take form labeling-job-arn

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/model-artifacts
  take form model-artifacts

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/output-data-config
  take form output-data-config

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/resource-config
  take form resource-config

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/retry-strategy
  take form retry-strategy

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/role-arn
  take form role-arn

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/secondary-status
  take form secondary-status

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/secondary-status-transitions
  take form secondary-status-transitions

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/stopping-condition
  take form stopping-condition

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/tag-list
  take form tag-list

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/tensor-board-output-config
  take form tensor-board-output-config

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/timestamp
  take form timestamp

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/training-environment-map
  take form training-environment-map

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/training-job-arn
  take form training-job-arn

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/training-job-name
  take form training-job-name

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/training-job-status
  take form training-job-status

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/training-time-in-seconds
  take form training-time-in-seconds

load @termsurf/snow/amazonaws.com/sagemaker/2017-07-24/base/vpc-config
  take form vpc-config

load @termsurf/snow/base/boolean
  take form boolean

form training-job, name <TrainingJob>
  note <Contains information about a training job.>
  take training-job-name, name <TrainingJobName>
    like training-job-name
    void take
    note <The name of the training job.>
  take training-job-arn, name <TrainingJobArn>
    like training-job-arn
    void take
    note <The Amazon Resource Name (ARN) of the training job.>
  take tuning-job-arn, name <TuningJobArn>
    like hyper-parameter-tuning-job-arn
    void take
    note <The Amazon Resource Name (ARN) of the associated hyperparameter tuning job if the training job was launched by a hyperparameter tuning job.>
  take labeling-job-arn, name <LabelingJobArn>
    like labeling-job-arn
    void take
    note <The Amazon Resource Name (ARN) of the labeling job.>
  take auto-ml-job-arn, name <AutoMLJobArn>
    like auto-ml-job-arn
    void take
    note <The Amazon Resource Name (ARN) of the job.>
  take model-artifacts, name <ModelArtifacts>
    like model-artifacts
    void take
    note <Information about the Amazon S3 location that is configured for storing model artifacts.>
  take training-job-status, name <TrainingJobStatus>
    like training-job-status
    void take
    note <The status of the training job.

Training job statuses are:

- `InProgress` - The training is in progress.

- `Completed` - The training job has completed.

- `Failed` - The training job has failed. To see the reason for the failure, see the `FailureReason` field in the response to a `DescribeTrainingJobResponse` call.

- `Stopping` - The training job is stopping.

- `Stopped` - The training job has stopped.

For more detailed information, see `SecondaryStatus`.>
  take secondary-status, name <SecondaryStatus>
    like secondary-status
    void take
    note <Provides detailed information about the state of the training job. For detailed information about the secondary status of the training job, see `StatusMessage` under SecondaryStatusTransition.

Amazon SageMaker provides primary statuses and secondary statuses that apply to each of them:

InProgress

- `Starting` - Starting the training job.

- `Downloading` - An optional stage for algorithms that support `File` training input mode. It indicates that data is being downloaded to the ML storage volumes.

- `Training` - Training is in progress.

- `Uploading` - Training is complete and the model artifacts are being uploaded to the S3 location.

Completed

- `Completed` - The training job has completed.

Failed

- `Failed` - The training job has failed. The reason for the failure is returned in the `FailureReason` field of `DescribeTrainingJobResponse`.

Stopped

- `MaxRuntimeExceeded` - The job stopped because it exceeded the maximum allowed runtime.

- `Stopped` - The training job has stopped.

Stopping

- `Stopping` - Stopping the training job.

Valid values for `SecondaryStatus` are subject to change.

We no longer support the following secondary statuses:

- `LaunchingMLInstances`

- `PreparingTrainingStack`

- `DownloadingTrainingImage`>
  take failure-reason, name <FailureReason>
    like failure-reason
    void take
    note <If the training job failed, the reason it failed.>
  take hyper-parameters, name <HyperParameters>
    like hyper-parameters
    void take
    note <Algorithm-specific parameters.>
  take algorithm-specification, name <AlgorithmSpecification>
    like algorithm-specification
    void take
    note <Information about the algorithm used for training, and algorithm metadata.>
  take role-arn, name <RoleArn>
    like role-arn
    void take
    note <The Amazon Web Services Identity and Access Management (IAM) role configured for the training job.>
  take input-data-config, name <InputDataConfig>
    like input-data-config
    void take
    note <An array of `Channel` objects that describes each data input channel.>
  take output-data-config, name <OutputDataConfig>
    like output-data-config
    void take
    note <The S3 path where model artifacts that you configured when creating the job are stored. Amazon SageMaker creates subfolders for model artifacts.>
  take resource-config, name <ResourceConfig>
    like resource-config
    void take
    note <Resources, including ML compute instances and ML storage volumes, that are configured for model training.>
  take vpc-config, name <VpcConfig>
    like vpc-config
    void take
    note <A VpcConfig object that specifies the VPC that this training job has access to. For more information, see [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).>
  take stopping-condition, name <StoppingCondition>
    like stopping-condition
    void take
    note <Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, Amazon SageMaker ends the training job. Use this API to cap model training costs.

To stop a job, Amazon SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.>
  take creation-time, name <CreationTime>
    like timestamp
    void take
    note <A timestamp that indicates when the training job was created.>
  take training-start-time, name <TrainingStartTime>
    like timestamp
    void take
    note <Indicates the time when the training job starts on training instances. You are billed for the time interval between this time and the value of `TrainingEndTime`. The start time in CloudWatch Logs might be later than this time. The difference is due to the time it takes to download the training data and to the size of the training container.>
  take training-end-time, name <TrainingEndTime>
    like timestamp
    void take
    note <Indicates the time when the training job ends on training instances. You are billed for the time interval between the value of `TrainingStartTime` and this time. For successful jobs and stopped jobs, this is the time after model artifacts are uploaded. For failed jobs, this is the time when Amazon SageMaker detects a job failure.>
  take last-modified-time, name <LastModifiedTime>
    like timestamp
    void take
    note <A timestamp that indicates when the status of the training job was last modified.>
  take secondary-status-transitions, name <SecondaryStatusTransitions>
    like secondary-status-transitions
    void take
    note <A history of all of the secondary statuses that the training job has transitioned through.>
  take final-metric-data-list, name <FinalMetricDataList>
    like final-metric-data-list
    void take
    note <A list of final metric values that are set when the training job completes. Used only if the training job was configured to use metrics.>
  take enable-network-isolation, name <EnableNetworkIsolation>
    like boolean
    void take
    note <If the `TrainingJob` was created with network isolation, the value is set to `true`. If network isolation is enabled, nodes can't communicate beyond the VPC they run in.>
  take enable-inter-container-traffic-encryption, name <EnableInterContainerTrafficEncryption>
    like boolean
    void take
    note <To encrypt all communications between ML compute instances in distributed training, choose `True`. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training.>
  take enable-managed-spot-training, name <EnableManagedSpotTraining>
    like boolean
    void take
    note <When true, enables managed spot training using Amazon EC2 Spot instances to run training jobs instead of on-demand instances. For more information, see [Managed Spot Training](https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html).>
  take checkpoint-config, name <CheckpointConfig>
    like checkpoint-config
    void take
  take training-time-in-seconds, name <TrainingTimeInSeconds>
    like training-time-in-seconds
    void take
    note <The training time in seconds.>
  take billable-time-in-seconds, name <BillableTimeInSeconds>
    like billable-time-in-seconds
    void take
    note <The billable time in seconds.>
  take debug-hook-config, name <DebugHookConfig>
    like debug-hook-config
    void take
  take experiment-config, name <ExperimentConfig>
    like experiment-config
    void take
  take debug-rule-configurations, name <DebugRuleConfigurations>
    like debug-rule-configurations
    void take
    note <Information about the debug rule configuration.>
  take tensor-board-output-config, name <TensorBoardOutputConfig>
    like tensor-board-output-config
    void take
  take debug-rule-evaluation-statuses, name <DebugRuleEvaluationStatuses>
    like debug-rule-evaluation-statuses
    void take
    note <Information about the evaluation status of the rules for the training job.>
  take environment, name <Environment>
    like training-environment-map
    void take
    note <The environment variables to set in the Docker container.>
  take retry-strategy, name <RetryStrategy>
    like retry-strategy
    void take
    note <The number of times to retry the job when the job fails due to an `InternalServerError`.>
  take tags, name <Tags>
    like tag-list
    void take
    note <An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).>
