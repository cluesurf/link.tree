
load @treesurf/snow/amazonaws.com/sagemaker/2017-07-24/base/container-hostname
  take form container-hostname

load @treesurf/snow/amazonaws.com/sagemaker/2017-07-24/base/container-image
  take form container-image

load @treesurf/snow/amazonaws.com/sagemaker/2017-07-24/base/environment-map
  take form environment-map

load @treesurf/snow/amazonaws.com/sagemaker/2017-07-24/base/image-digest
  take form image-digest

load @treesurf/snow/amazonaws.com/sagemaker/2017-07-24/base/product-id
  take form product-id

load @treesurf/snow/amazonaws.com/sagemaker/2017-07-24/base/url
  take form url

form model-package-container-definition, name <ModelPackageContainerDefinition>
  note <Describes the Docker container for the model package.>
  take container-hostname, name <ContainerHostname>
    like container-hostname
    void take
    note <The DNS host name for the Docker container.>
  take image, name <Image>
    like container-image
    note <The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.

If you are using your own custom algorithm instead of an algorithm provided by Amazon SageMaker, the inference code must meet Amazon SageMaker requirements. Amazon SageMaker supports both `registry/repository[:tag]` and `registry/repository[@digest]` image path formats. For more information, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).>
  take image-digest, name <ImageDigest>
    like image-digest
    void take
    note <An MD5 hash of the training algorithm that identifies the Docker image used for training.>
  take model-data-url, name <ModelDataUrl>
    like url
    void take
    note <The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single `gzip` compressed tar archive (`.tar.gz` suffix).

The model artifacts must be in an S3 bucket that is in the same region as the model package.>
  take product-id, name <ProductId>
    like product-id
    void take
    note <The Amazon Web Services Marketplace product ID of the model package.>
  take environment, name <Environment>
    like environment-map
    void take
    note <The environment variables to set in the Docker container. Each key and value in the `Environment` string to string map can have length of up to 1024. We support up to 16 entries in the map.>