
load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/algorithm-specification
  take form algorithm-specification

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/checkpoint-config
  take form checkpoint-config

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/debug-hook-config
  take form debug-hook-config

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/debug-rule-configurations
  take form debug-rule-configurations

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/experiment-config
  take form experiment-config

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/hyper-parameters
  take form hyper-parameters

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/input-data-config
  take form input-data-config

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/output-data-config
  take form output-data-config

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/profiler-config
  take form profiler-config

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/profiler-rule-configurations
  take form profiler-rule-configurations

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/resource-config
  take form resource-config

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/retry-strategy
  take form retry-strategy

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/role-arn
  take form role-arn

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/stopping-condition
  take form stopping-condition

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/tag-list
  take form tag-list

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/tensor-board-output-config
  take form tensor-board-output-config

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/training-environment-map
  take form training-environment-map

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/training-job-name
  take form training-job-name

load @nerdbond/snow/amazonaws.com/sagemaker/2017-07-24/base/vpc-config
  take form vpc-config

load @nerdbond/snow/base/boolean
  take form boolean

form create-training-job-request, name <CreateTrainingJobRequest>
  take training-job-name, name <TrainingJobName>
    like training-job-name
    note <The name of the training job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.>
  take hyper-parameters, name <HyperParameters>
    like hyper-parameters
    void take
    note <Algorithm-specific parameters that influence the quality of the model. You set hyperparameters before you start the learning process. For a list of hyperparameters for each training algorithm provided by Amazon SageMaker, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html).

You can specify a maximum of 100 hyperparameters. Each hyperparameter is a key-value pair. Each key and value is limited to 256 characters, as specified by the `Length Constraint`.>
  take algorithm-specification, name <AlgorithmSpecification>
    like algorithm-specification
    note <The registry path of the Docker image that contains the training algorithm and algorithm-specific metadata, including the input mode. For more information about algorithms provided by Amazon SageMaker, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). For information about providing your own algorithms, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).>
  take role-arn, name <RoleArn>
    like role-arn
    note <The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.

During model training, Amazon SageMaker needs your permission to read input data from an S3 bucket, download a Docker image that contains training code, write model artifacts to an S3 bucket, write logs to Amazon CloudWatch Logs, and publish metrics to Amazon CloudWatch. You grant permissions for all of these tasks to an IAM role. For more information, see [Amazon SageMaker Roles](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html).

To be able to pass this role to Amazon SageMaker, the caller of this API must have the `iam:PassRole` permission.>
  take input-data-config, name <InputDataConfig>
    like input-data-config
    void take
    note <An array of `Channel` objects. Each channel is a named input source. `InputDataConfig` describes the input data and its location.

Algorithms can accept input data from one or more channels. For example, an algorithm might have two channels of input data, `training_data` and `validation_data`. The configuration for each channel provides the S3, EFS, or FSx location where the input data is stored. It also provides information about the stored data: the MIME type, compression method, and whether the data is wrapped in RecordIO format.

Depending on the input mode that the algorithm supports, Amazon SageMaker either copies input data files from an S3 bucket to a local directory in the Docker container, or makes it available as input streams. For example, if you specify an EFS location, input data files will be made available as input streams. They do not need to be downloaded.>
  take output-data-config, name <OutputDataConfig>
    like output-data-config
    note <Specifies the path to the S3 location where you want to store model artifacts. Amazon SageMaker creates subfolders for the artifacts.>
  take resource-config, name <ResourceConfig>
    like resource-config
    note <The resources, including the ML compute instances and ML storage volumes, to use for model training.

ML storage volumes store model artifacts and incremental states. Training algorithms might also use ML storage volumes for scratch space. If you want Amazon SageMaker to use the ML storage volume to store the training data, choose `File` as the `TrainingInputMode` in the algorithm specification. For distributed training algorithms, specify an instance count greater than 1.>
  take vpc-config, name <VpcConfig>
    like vpc-config
    void take
    note <A VpcConfig object that specifies the VPC that you want your training job to connect to. Control access to and from your training container by configuring the VPC. For more information, see [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).>
  take stopping-condition, name <StoppingCondition>
    like stopping-condition
    note <Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, Amazon SageMaker ends the training job. Use this API to cap model training costs.

To stop a job, Amazon SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.>
  take tags, name <Tags>
    like tag-list
    void take
    note <An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).>
  take enable-network-isolation, name <EnableNetworkIsolation>
    like boolean
    void take
    note <Isolates the training container. No inbound or outbound network calls can be made, except for calls between peers within a training cluster for distributed training. If you enable network isolation for training jobs that are configured to use a VPC, Amazon SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.>
  take enable-inter-container-traffic-encryption, name <EnableInterContainerTrafficEncryption>
    like boolean
    void take
    note <To encrypt all communications between ML compute instances in distributed training, choose `True`. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training. For more information, see [Protect Communications Between ML Compute Instances in a Distributed Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/train-encrypt.html).>
  take enable-managed-spot-training, name <EnableManagedSpotTraining>
    like boolean
    void take
    note <To train models using managed spot training, choose `True`. Managed spot training provides a fully managed and scalable infrastructure for training machine learning models. this option is useful when training jobs can be interrupted and when there is flexibility when the training job is run.

The complete and intermediate results of jobs are stored in an Amazon S3 bucket, and can be used as a starting point to train models incrementally. Amazon SageMaker provides metrics and logs in CloudWatch. They can be used to see when managed spot training jobs are running, interrupted, resumed, or completed.>
  take checkpoint-config, name <CheckpointConfig>
    like checkpoint-config
    void take
    note <Contains information about the output location for managed spot training checkpoint data.>
  take debug-hook-config, name <DebugHookConfig>
    like debug-hook-config
    void take
  take debug-rule-configurations, name <DebugRuleConfigurations>
    like debug-rule-configurations
    void take
    note <Configuration information for Debugger rules for debugging output tensors.>
  take tensor-board-output-config, name <TensorBoardOutputConfig>
    like tensor-board-output-config
    void take
  take experiment-config, name <ExperimentConfig>
    like experiment-config
    void take
  take profiler-config, name <ProfilerConfig>
    like profiler-config
    void take
  take profiler-rule-configurations, name <ProfilerRuleConfigurations>
    like profiler-rule-configurations
    void take
    note <Configuration information for Debugger rules for profiling system and framework metrics.>
  take environment, name <Environment>
    like training-environment-map
    void take
    note <The environment variables to set in the Docker container.>
  take retry-strategy, name <RetryStrategy>
    like retry-strategy
    void take
    note <The number of times to retry the job when the job fails due to an `InternalServerError`.>
