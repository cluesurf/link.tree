
load @termsurf/snow/amazonaws.com/waf-regional/2016-11-28/base/update-rule-response
  take form update-rule-response

load @termsurf/snow/amazonaws.com/waf-regional/2016-11-28/base/waf-internal-error-exception
  take form waf-internal-error-exception

load @termsurf/snow/amazonaws.com/waf-regional/2016-11-28/base/waf-invalid-account-exception
  take form waf-invalid-account-exception

load @termsurf/snow/amazonaws.com/waf-regional/2016-11-28/base/waf-invalid-operation-exception
  take form waf-invalid-operation-exception

load @termsurf/snow/amazonaws.com/waf-regional/2016-11-28/base/waf-invalid-parameter-exception
  take form waf-invalid-parameter-exception

load @termsurf/snow/amazonaws.com/waf-regional/2016-11-28/base/waf-limits-exceeded-exception
  take form waf-limits-exceeded-exception

load @termsurf/snow/amazonaws.com/waf-regional/2016-11-28/base/waf-nonexistent-container-exception
  take form waf-nonexistent-container-exception

load @termsurf/snow/amazonaws.com/waf-regional/2016-11-28/base/waf-nonexistent-item-exception
  take form waf-nonexistent-item-exception

load @termsurf/snow/amazonaws.com/waf-regional/2016-11-28/base/waf-referenced-item-exception
  take form waf-referenced-item-exception

load @termsurf/snow/amazonaws.com/waf-regional/2016-11-28/base/waf-stale-data-exception
  take form waf-stale-data-exception

load @termsurf/snow/base/native-string
  take form native-string

boot update-rule, name <UpdateRule>
  deed post
  note <This is **AWS WAF Classic** documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide.

**For the latest version of AWS WAF**, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use.

Inserts or deletes Predicate objects in a `Rule`. Each `Predicate` object identifies a predicate, such as a ByteMatchSet or an IPSet, that specifies the web requests that you want to allow, block, or count. If you add more than one predicate to a `Rule`, a request must match all of the specifications to be allowed, blocked, or counted. For example, suppose that you add the following to a `Rule`:

- A `ByteMatchSet` that matches the value `BadBot` in the `User-Agent` header

- An `IPSet` that matches the IP address `192.0.2.44`

You then add the `Rule` to a `WebACL` and specify that you want to block requests that satisfy the `Rule`. For a request to be blocked, the `User-Agent` header in the request must contain the value `BadBot` _and_ the request must originate from the IP address 192.0.2.44.

To create and configure a `Rule`, perform the following steps:

1. Create and update the predicates that you want to include in the `Rule`.

2. Create the `Rule`. See CreateRule.

3. Use `GetChangeToken` to get the change token that you provide in the `ChangeToken` parameter of an UpdateRule request.

4. Submit an `UpdateRule` request to add predicates to the `Rule`.

5. Create and update a `WebACL` that contains the `Rule`. See CreateWebACL.

If you want to replace one `ByteMatchSet` or `IPSet` with another, you delete the existing one and add the new one.

For more information about how to use the AWS WAF API to allow or block HTTP requests, see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/).>

  take x-amz-target
    like native-string
  take update-rule-request, like update-rule-request

  line </#X-Amz-Target=AWSWAF_Regional_20161128.UpdateRule>

  hint <X-Amz-Target>, loan x-amz-target

  seed json, loan update-rule-request

  loot 200
    seed json, like update-rule-response
    note <Success>
  loot 480
    seed json, like waf-stale-data-exception
    note <WAFStaleDataException>
  loot 481
    seed json, like waf-internal-error-exception
    note <WAFInternalErrorException>
  loot 482
    seed json, like waf-invalid-account-exception
    note <WAFInvalidAccountException>
  loot 483
    seed json, like waf-invalid-operation-exception
    note <WAFInvalidOperationException>
  loot 484
    seed json, like waf-invalid-parameter-exception
    note <WAFInvalidParameterException>
  loot 485
    seed json, like waf-nonexistent-container-exception
    note <WAFNonexistentContainerException>
  loot 486
    seed json, like waf-nonexistent-item-exception
    note <WAFNonexistentItemException>
  loot 487
    seed json, like waf-referenced-item-exception
    note <WAFReferencedItemException>
  loot 488
    seed json, like waf-limits-exceeded-exception
    note <WAFLimitsExceededException>