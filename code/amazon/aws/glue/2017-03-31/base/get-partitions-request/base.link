
load @textsurf/snow/amazonaws.com/glue/2017-03-31/base/boolean-nullable
  take form boolean-nullable

load @textsurf/snow/amazonaws.com/glue/2017-03-31/base/catalog-id-string
  take form catalog-id-string

load @textsurf/snow/amazonaws.com/glue/2017-03-31/base/name-string
  take form name-string

load @textsurf/snow/amazonaws.com/glue/2017-03-31/base/page-size
  take form page-size

load @textsurf/snow/amazonaws.com/glue/2017-03-31/base/predicate-string
  take form predicate-string

load @textsurf/snow/amazonaws.com/glue/2017-03-31/base/segment
  take form segment

load @textsurf/snow/amazonaws.com/glue/2017-03-31/base/token
  take form token

form get-partitions-request, name <GetPartitionsRequest>
  take catalog-id, name <CatalogId>
    like catalog-id-string
    void take
    note <The ID of the Data Catalog where the partitions in question reside. If none is provided, the Amazon Web Services account ID is used by default.>
  take database-name, name <DatabaseName>
    like name-string
    note <The name of the catalog database where the partitions reside.>
  take table-name, name <TableName>
    like name-string
    note <The name of the partitions' table.>
  take expression, name <Expression>
    like predicate-string
    void take
    note <An expression that filters the partitions to be returned.

The expression uses SQL syntax similar to the SQL `WHERE` filter clause. The SQL statement parser [JSQLParser](http://jsqlparser.sourceforge.net/home.php) parses the expression.

_Operators_: The following are the operators that you can use in the `Expression` API call:

=

Checks whether the values of the two operands are equal; if yes, then the condition becomes true.

Example: Assume 'variable a' holds 10 and 'variable b' holds 20.

(a = b) is not true.

&lt; &gt;

Checks whether the values of two operands are equal; if the values are not equal, then the condition becomes true.

Example: (a &lt; &gt; b) is true.

&gt;

Checks whether the value of the left operand is greater than the value of the right operand; if yes, then the condition becomes true.

Example: (a &gt; b) is not true.

&lt;

Checks whether the value of the left operand is less than the value of the right operand; if yes, then the condition becomes true.

Example: (a &lt; b) is true.

&gt;=

Checks whether the value of the left operand is greater than or equal to the value of the right operand; if yes, then the condition becomes true.

Example: (a &gt;= b) is not true.

&lt;=

Checks whether the value of the left operand is less than or equal to the value of the right operand; if yes, then the condition becomes true.

Example: (a &lt;= b) is true.

AND, OR, IN, BETWEEN, LIKE, NOT, IS NULL

Logical operators.

_Supported Partition Key Types_: The following are the supported partition keys.

- `string`

- `date`

- `timestamp`

- `int`

- `bigint`

- `long`

- `tinyint`

- `smallint`

- `decimal`

If an type is encountered that is not valid, an exception is thrown.

The following list shows the valid operators on each type. When you define a crawler, the `partitionKey` type is created as a `STRING`, to be compatible with the catalog partitions.

_Sample API Call_:>
  take next-token, name <NextToken>
    like token
    void take
    note <A continuation token, if this is not the first call to retrieve these partitions.>
  take segment, name <Segment>
    like segment
    void take
    note <The segment of the table's partitions to scan in this request.>
  take max-results, name <MaxResults>
    like page-size
    void take
    note <The maximum number of partitions to return in a single response.>
  take exclude-column-schema, name <ExcludeColumnSchema>
    like boolean-nullable
    void take