
load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/cache-cluster-not-found-fault
  take form cache-cluster-not-found-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/cache-parameter-group-not-found-fault
  take form cache-parameter-group-not-found-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/cache-security-group-not-found-fault
  take form cache-security-group-not-found-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/cache-subnet-group-not-found-fault
  take form cache-subnet-group-not-found-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/cluster-quota-for-customer-exceeded-fault
  take form cluster-quota-for-customer-exceeded-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/create-replication-group-result
  take form create-replication-group-result

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/global-replication-group-not-found-fault
  take form global-replication-group-not-found-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/insufficient-cache-cluster-capacity-fault
  take form insufficient-cache-cluster-capacity-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/invalid-cache-cluster-state-fault
  take form invalid-cache-cluster-state-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/invalid-global-replication-group-state-fault
  take form invalid-global-replication-group-state-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/invalid-parameter-combination-exception
  take form invalid-parameter-combination-exception

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/invalid-parameter-value-exception
  take form invalid-parameter-value-exception

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/invalid-user-group-state-fault
  take form invalid-user-group-state-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/invalid-vpc-network-state-fault
  take form invalid-vpc-network-state-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/log-delivery-configuration-request
  take form log-delivery-configuration-request

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/node-group-configuration
  take form node-group-configuration

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/node-groups-per-replication-group-quota-exceeded-fault
  take form node-groups-per-replication-group-quota-exceeded-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/node-quota-for-cluster-exceeded-fault
  take form node-quota-for-cluster-exceeded-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/node-quota-for-customer-exceeded-fault
  take form node-quota-for-customer-exceeded-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/replication-group-already-exists-fault
  take form replication-group-already-exists-fault

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/tag
  take form tag

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/tag-quota-per-resource-exceeded
  take form tag-quota-per-resource-exceeded

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/user-group-id
  take form user-group-id

load @drumwork/snow/amazonaws.com/elasticache/2015-02-02/base/user-group-not-found-fault
  take form user-group-not-found-fault

load @drumwork/snow/base/list
  take form list

load @drumwork/snow/base/native-boolean
  take form native-boolean

load @drumwork/snow/base/native-integer
  take form native-integer

load @drumwork/snow/base/native-string
  take form native-string

load @drumwork/snow/base/string
  take form string

boot get-create-replication-group, name <GET_CreateReplicationGroup>
  note <Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.

This API can be used to create a standalone regional replication group or a secondary replication group associated with a Global datastore.

A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.

A Redis cluster-mode enabled cluster is comprised of from 1 to 90 shards (API/CLI: node groups). Each shard has a primary node and up to 5 read-only replica nodes. The configuration can range from 90 shards and 0 replicas to 15 shards and 5 replicas, which is the maximum number or replicas allowed.

The node or shard limit can be increased to a maximum of 500 per cluster if the Redis engine version is 5.0.6 or higher. For example, you can choose to configure a 500 node cluster that ranges between 83 shards (one primary and 5 replicas per shard) and 500 shards (single primary and no replicas). Make sure there are enough available IP addresses to accommodate the increase. Common pitfalls include the subnets in the subnet group have too small a CIDR range or the subnets are shared and heavily used by other clusters. For more information, see [Creating a Subnet Group](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.Creating.html). For versions below 5.0.6, the limit is 250 per cluster.

To request a limit increase, see [Amazon Service Limits](https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html) and choose the limit type **Nodes per cluster per instance type**.

When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. If you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' scaling. For more information, see [Scaling ElastiCache for Redis Clusters](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Scaling.html) in the _ElastiCache User Guide_.

This operation is valid for Redis only.>

  take replication-group-id
    like native-string
    note <The replication group identifier. This parameter is stored as a lowercase string.

Constraints:

- A name must contain from 1 to 40 alphanumeric characters or hyphens.

- The first character must be a letter.

- A name cannot end with a hyphen or contain two consecutive hyphens.>
  take replication-group-description
    like native-string
    note <A user-created description for the replication group.>
  take global-replication-group-id
    like native-string
    note <The name of the Global datastore>
    void take
  take primary-cluster-id
    like native-string
    note <The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of `available`.

This parameter is not required if `NumCacheClusters`, `NumNodeGroups`, or `ReplicasPerNodeGroup` is specified.>
    void take
  take automatic-failover-enabled
    like native-boolean
    note <Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.

`AutomaticFailoverEnabled` must be enabled for Redis (cluster mode enabled) replication groups.

Default: false>
    void take
  take multi-az-enabled
    like native-boolean
    note <A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see [Minimizing Downtime: Multi-AZ](http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html).>
    void take
  take num-cache-clusters
    like native-integer
    note <The number of clusters this replication group initially has.

This parameter is not used if there is more than one node group (shard). You should use `ReplicasPerNodeGroup` instead.

If `AutomaticFailoverEnabled` is `true`, the value of this parameter must be at least 2. If `AutomaticFailoverEnabled` is `false` you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.

The maximum permitted value for `NumCacheClusters` is 6 (1 primary plus 5 replicas).>
    void take
  take preferred-cache-cluster-a-zs
    like list
      like string
    note <A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.

This parameter is not used if there is more than one node group (shard). You should use `NodeGroupConfiguration` instead.

If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.

The number of Availability Zones listed must equal the value of `NumCacheClusters`.

Default: system chosen Availability Zones.>
    void take
  take num-node-groups
    like native-integer
    note <An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.

Default: 1>
    void take
  take replicas-per-node-group
    like native-integer
    note <An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.>
    void take
  take node-group-configuration
    like list
      like node-group-configuration
    note <A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: `PrimaryAvailabilityZone`, `ReplicaAvailabilityZones`, `ReplicaCount`, and `Slots`.

If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, it is required when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file. You must configure each node group (shard) using this parameter because you must specify the slots for each node group.>
    void take
  take cache-node-type
    like native-string
    note <The compute and memory capacity of the nodes in the node group (shard).

The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.

- General purpose:

  - Current generation:

    **M6g node types** (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).

    `cache.m6g.large`, `cache.m6g.xlarge`, `cache.m6g.2xlarge`, `cache.m6g.4xlarge`, `cache.m6g.8xlarge`, `cache.m6g.12xlarge`, `cache.m6g.16xlarge`

    For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion)

    **M5 node types:** `cache.m5.large`, `cache.m5.xlarge`, `cache.m5.2xlarge`, `cache.m5.4xlarge`, `cache.m5.12xlarge`, `cache.m5.24xlarge`

    **M4 node types:** `cache.m4.large`, `cache.m4.xlarge`, `cache.m4.2xlarge`, `cache.m4.4xlarge`, `cache.m4.10xlarge`

    **T3 node types:** `cache.t3.micro`, `cache.t3.small`, `cache.t3.medium`

    **T2 node types:** `cache.t2.micro`, `cache.t2.small`, `cache.t2.medium`

  - Previous generation: (not recommended)

    **T1 node types:** `cache.t1.micro`

    **M1 node types:** `cache.m1.small`, `cache.m1.medium`, `cache.m1.large`, `cache.m1.xlarge`

    **M3 node types:** `cache.m3.medium`, `cache.m3.large`, `cache.m3.xlarge`, `cache.m3.2xlarge`

- Compute optimized:

  - Previous generation: (not recommended)

    **C1 node types:** `cache.c1.xlarge`

- Memory optimized:

  - Current generation:

    **R6g node types** (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).

    `cache.r6g.large`, `cache.r6g.xlarge`, `cache.r6g.2xlarge`, `cache.r6g.4xlarge`, `cache.r6g.8xlarge`, `cache.r6g.12xlarge`, `cache.r6g.16xlarge`

    For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion)

    **R5 node types:** `cache.r5.large`, `cache.r5.xlarge`, `cache.r5.2xlarge`, `cache.r5.4xlarge`, `cache.r5.12xlarge`, `cache.r5.24xlarge`

    **R4 node types:** `cache.r4.large`, `cache.r4.xlarge`, `cache.r4.2xlarge`, `cache.r4.4xlarge`, `cache.r4.8xlarge`, `cache.r4.16xlarge`

  - Previous generation: (not recommended)

    **M2 node types:** `cache.m2.xlarge`, `cache.m2.2xlarge`, `cache.m2.4xlarge`

    **R3 node types:** `cache.r3.large`, `cache.r3.xlarge`, `cache.r3.2xlarge`, `cache.r3.4xlarge`, `cache.r3.8xlarge`

**Additional node type info** - All current generation instance types are created in Amazon VPC by default.

- Redis append-only files (AOF) are not supported for T1 or T2 instances.

- Redis Multi-AZ with automatic failover is not supported on T1 instances.

- Redis configuration variables `appendonly` and `appendfsync` are not supported on Redis version 2.8.22 and later.>
    void take
  take engine
    like native-string
    note <The name of the cache engine to be used for the clusters in this replication group. Must be Redis.>
    void take
  take engine-version
    like native-string
    note <The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the `DescribeCacheEngineVersions` operation.

**Important:** You can upgrade to a newer engine version (see [Selecting a Cache Engine and Version](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement)) in the _ElastiCache User Guide_, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version.>
    void take
  take cache-parameter-group-name
    like native-string
    note <The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.

If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name.

- To create a Redis (cluster mode disabled) replication group, use `CacheParameterGroupName=default.redis3.2`.

- To create a Redis (cluster mode enabled) replication group, use `CacheParameterGroupName=default.redis3.2.cluster.on`.>
    void take
  take cache-subnet-group-name
    like native-string
    note <The name of the cache subnet group to be used for the replication group.

If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see [Subnets and Subnet Groups](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html).>
    void take
  take cache-security-group-names
    like list
      like string
    note <A list of cache security group names to associate with this replication group.>
    void take
  take security-group-ids
    like list
      like string
    note <One or more Amazon VPC security groups associated with this replication group.

Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).>
    void take
  take tags
    like list
      like tag
    note <A list of tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=`myKey`, Value=`myKeyValue`. You can include multiple tags as shown following: Key=`myKey`, Value=`myKeyValue` Key=`mySecondKey`, Value=`mySecondKeyValue`. Tags on replication groups will be replicated to all nodes.>
    void take
  take snapshot-arns
    like list
      like string
    note <A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter _NumNodeGroups_ or the number of node groups configured by _NodeGroupConfiguration_ regardless of the number of ARNs specified here.

Example of an Amazon S3 ARN: `arn:aws:s3:::my_bucket/snapshot1.rdb`>
    void take
  take snapshot-name
    like native-string
    note <The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to `restoring` while the new replication group is being created.>
    void take
  take preferred-maintenance-window
    like native-string
    note <Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for `ddd` are:

Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.

Valid values for `ddd` are:

- `sun`

- `mon`

- `tue`

- `wed`

- `thu`

- `fri`

- `sat`

Example: `sun:23:00-mon:01:30`>
    void take
  take port
    like native-integer
    note <The port number on which each member of the replication group accepts connections.>
    void take
  take notification-topic-arn
    like native-string
    note <The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.

The Amazon SNS topic owner must be the same as the cluster owner.>
    void take
  take auto-minor-version-upgrade
    like native-boolean
    note <This parameter is currently disabled.>
    void take
  take snapshot-retention-limit
    like native-integer
    note <The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set `SnapshotRetentionLimit` to 5, a snapshot that was taken today is retained for 5 days before being deleted.

Default: 0 (i.e., automatic backups are disabled for this cluster).>
    void take
  take snapshot-window
    like native-string
    note <The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).

Example: `05:00-09:00`

If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.>
    void take
  take auth-token
    like native-string
    note <**Reserved parameter.** The password used to access a password protected server.

`AuthToken` can be specified only on replication groups where `TransitEncryptionEnabled` is `true`.

For HIPAA compliance, you must specify `TransitEncryptionEnabled` as `true`, an `AuthToken`, and a `CacheSubnetGroup`.

Password constraints:

- Must be only printable ASCII characters.

- Must be at least 16 characters and no more than 128 characters in length.

- The only permitted printable special characters are !, &, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.

For more information, see [AUTH password](http://redis.io/commands/AUTH) at http://redis.io/commands/AUTH.>
    void take
  take transit-encryption-enabled
    like native-boolean
    note <A flag that enables in-transit encryption when set to `true`.

You cannot modify the value of `TransitEncryptionEnabled` after the cluster is created. To enable in-transit encryption on a cluster you must set `TransitEncryptionEnabled` to `true` when you create a cluster.

This parameter is valid only if the `Engine` parameter is `redis`, the `EngineVersion` parameter is `3.2.6`, `4.x` or later, and the cluster is being created in an Amazon VPC.

If you enable in-transit encryption, you must also specify a value for `CacheSubnetGroup`.

**Required:** Only available when creating a replication group in an Amazon VPC using redis version `3.2.6`, `4.x` or later.

Default: `false`

For HIPAA compliance, you must specify `TransitEncryptionEnabled` as `true`, an `AuthToken`, and a `CacheSubnetGroup`.>
    void take
  take at-rest-encryption-enabled
    like native-boolean
    note <A flag that enables encryption at rest when set to `true`.

You cannot modify the value of `AtRestEncryptionEnabled` after the replication group is created. To enable encryption at rest on a replication group you must set `AtRestEncryptionEnabled` to `true` when you create the replication group.

**Required:** Only available when creating a replication group in an Amazon VPC using redis version `3.2.6`, `4.x` or later.

Default: `false`>
    void take
  take kms-key-id
    like native-string
    note <The ID of the KMS key used to encrypt the disk in the cluster.>
    void take
  take user-group-ids
    like list
      like user-group-id
    note <The user group to associate with the replication group.>
    void take
  take log-delivery-configurations
    like list
      like log-delivery-configuration-request
    note <Specifies the destination, format and type of the logs.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=CreateReplicationGroup>

  find <ReplicationGroupId>, loan replication-group-id
  find <ReplicationGroupDescription>, loan replication-group-description
  find <GlobalReplicationGroupId>, loan global-replication-group-id
  find <PrimaryClusterId>, loan primary-cluster-id
  find <AutomaticFailoverEnabled>, loan automatic-failover-enabled
  find <MultiAZEnabled>, loan multi-az-enabled
  find <NumCacheClusters>, loan num-cache-clusters
  find <PreferredCacheClusterAZs>, loan preferred-cache-cluster-a-zs
  find <NumNodeGroups>, loan num-node-groups
  find <ReplicasPerNodeGroup>, loan replicas-per-node-group
  find <NodeGroupConfiguration>, loan node-group-configuration
  find <CacheNodeType>, loan cache-node-type
  find <Engine>, loan engine
  find <EngineVersion>, loan engine-version
  find <CacheParameterGroupName>, loan cache-parameter-group-name
  find <CacheSubnetGroupName>, loan cache-subnet-group-name
  find <CacheSecurityGroupNames>, loan cache-security-group-names
  find <SecurityGroupIds>, loan security-group-ids
  find <Tags>, loan tags
  find <SnapshotArns>, loan snapshot-arns
  find <SnapshotName>, loan snapshot-name
  find <PreferredMaintenanceWindow>, loan preferred-maintenance-window
  find <Port>, loan port
  find <NotificationTopicArn>, loan notification-topic-arn
  find <AutoMinorVersionUpgrade>, loan auto-minor-version-upgrade
  find <SnapshotRetentionLimit>, loan snapshot-retention-limit
  find <SnapshotWindow>, loan snapshot-window
  find <AuthToken>, loan auth-token
  find <TransitEncryptionEnabled>, loan transit-encryption-enabled
  find <AtRestEncryptionEnabled>, loan at-rest-encryption-enabled
  find <KmsKeyId>, loan kms-key-id
  find <UserGroupIds>, loan user-group-ids
  find <LogDeliveryConfigurations>, loan log-delivery-configurations
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like create-replication-group-result
    note <Success>
  loot 480
    seed xml, like cache-cluster-not-found-fault
    note <CacheClusterNotFoundFault>
  loot 481
    seed xml, like invalid-cache-cluster-state-fault
    note <InvalidCacheClusterStateFault>
  loot 482
    seed xml, like replication-group-already-exists-fault
    note <ReplicationGroupAlreadyExistsFault>
  loot 483
    seed xml, like invalid-user-group-state-fault
    note <InvalidUserGroupStateFault>
  loot 484
    seed xml, like user-group-not-found-fault
    note <UserGroupNotFoundFault>
  loot 485
    seed xml, like insufficient-cache-cluster-capacity-fault
    note <InsufficientCacheClusterCapacityFault>
  loot 486
    seed xml, like cache-security-group-not-found-fault
    note <CacheSecurityGroupNotFoundFault>
  loot 487
    seed xml, like cache-subnet-group-not-found-fault
    note <CacheSubnetGroupNotFoundFault>
  loot 488
    seed xml, like cluster-quota-for-customer-exceeded-fault
    note <ClusterQuotaForCustomerExceededFault>
  loot 489
    seed xml, like node-quota-for-cluster-exceeded-fault
    note <NodeQuotaForClusterExceededFault>
  loot 490
    seed xml, like node-quota-for-customer-exceeded-fault
    note <NodeQuotaForCustomerExceededFault>
  loot 491
    seed xml, like cache-parameter-group-not-found-fault
    note <CacheParameterGroupNotFoundFault>
  loot 492
    seed xml, like invalid-vpc-network-state-fault
    note <InvalidVPCNetworkStateFault>
  loot 493
    seed xml, like tag-quota-per-resource-exceeded
    note <TagQuotaPerResourceExceeded>
  loot 494
    seed xml, like node-groups-per-replication-group-quota-exceeded-fault
    note <NodeGroupsPerReplicationGroupQuotaExceededFault>
  loot 495
    seed xml, like global-replication-group-not-found-fault
    note <GlobalReplicationGroupNotFoundFault>
  loot 496
    seed xml, like invalid-global-replication-group-state-fault
    note <InvalidGlobalReplicationGroupStateFault>
  loot 497
    seed xml, like invalid-parameter-value-exception
    note <InvalidParameterValueException>
  loot 498
    seed xml, like invalid-parameter-combination-exception
    note <InvalidParameterCombinationException>