
load @textsurf/snow/amazonaws.com/glacier/2012-06-01/base/invalid-parameter-value-exception
  take form invalid-parameter-value-exception

load @textsurf/snow/amazonaws.com/glacier/2012-06-01/base/list-multipart-uploads-output
  take form list-multipart-uploads-output

load @textsurf/snow/amazonaws.com/glacier/2012-06-01/base/missing-parameter-value-exception
  take form missing-parameter-value-exception

load @textsurf/snow/amazonaws.com/glacier/2012-06-01/base/resource-not-found-exception
  take form resource-not-found-exception

load @textsurf/snow/amazonaws.com/glacier/2012-06-01/base/service-unavailable-exception
  take form service-unavailable-exception

load @textsurf/snow/base/native-string
  take form native-string

boot list-multipart-uploads, name <ListMultipartUploads>
  deed get
  note <This operation lists in-progress multipart uploads for the specified vault. An in-progress multipart upload is a multipart upload that has been initiated by an InitiateMultipartUpload request, but has not yet been completed or aborted. The list returned in the List Multipart Upload response has no guaranteed order.

The List Multipart Uploads operation supports pagination. By default, this operation returns up to 50 multipart uploads in the response. You should always check the response for a `marker` at which to continue the list; if there are no more items the `marker` is `null`. To return a list of multipart uploads that begins at a specific upload, set the `marker` request parameter to the value you obtained from a previous List Multipart Upload request. You can also limit the number of uploads returned in the response by specifying the `limit` parameter in the request.

Note the difference between this operation and listing parts (ListParts). The List Multipart Uploads operation lists all multipart uploads for a vault and does not require a multipart upload ID. The List Parts operation requires a multipart upload ID since parts are associated with a single upload.

An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

For conceptual information and the underlying REST API, see [Working with Archives in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html) and [List Multipart Uploads](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-list-uploads.html) in the _Amazon Glacier Developer Guide_.>

  take account-id
    like native-string
    note <The `AccountId` value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.>
  take vault-name
    like native-string
    note <The name of the vault.>
  take marker
    like native-string
    note <An opaque string used for pagination. This value specifies the upload at which the listing of uploads should begin. Get the marker value from a previous List Uploads response. You need only include the marker if you are continuing the pagination of results started in a previous List Uploads request.>
    void take
  take limit
    like native-string
    note <Specifies the maximum number of uploads returned in the response body. If this value is not specified, the List Uploads operation returns up to 50 uploads.>
    void take

  line </{account-id}/vaults/{vault-name}/multipart-uploads>

  find <marker>, loan marker
  find <limit>, loan limit

  loot 200
    seed json, like list-multipart-uploads-output
    note <Success>
  loot 480
    seed json, like resource-not-found-exception
    note <ResourceNotFoundException>
  loot 481
    seed json, like invalid-parameter-value-exception
    note <InvalidParameterValueException>
  loot 482
    seed json, like missing-parameter-value-exception
    note <MissingParameterValueException>
  loot 483
    seed json, like service-unavailable-exception
    note <ServiceUnavailableException>