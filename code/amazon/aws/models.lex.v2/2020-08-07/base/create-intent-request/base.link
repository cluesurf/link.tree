
load @nerdbond/snow/amazonaws.com/models.lex.v2/2020-08-07/base/description
  take form description

load @nerdbond/snow/amazonaws.com/models.lex.v2/2020-08-07/base/dialog-code-hook-settings
  take form dialog-code-hook-settings

load @nerdbond/snow/amazonaws.com/models.lex.v2/2020-08-07/base/fulfillment-code-hook-settings
  take form fulfillment-code-hook-settings

load @nerdbond/snow/amazonaws.com/models.lex.v2/2020-08-07/base/input-contexts-list
  take form input-contexts-list

load @nerdbond/snow/amazonaws.com/models.lex.v2/2020-08-07/base/intent-closing-setting
  take form intent-closing-setting

load @nerdbond/snow/amazonaws.com/models.lex.v2/2020-08-07/base/intent-confirmation-setting
  take form intent-confirmation-setting

load @nerdbond/snow/amazonaws.com/models.lex.v2/2020-08-07/base/intent-signature
  take form intent-signature

load @nerdbond/snow/amazonaws.com/models.lex.v2/2020-08-07/base/kendra-configuration
  take form kendra-configuration

load @nerdbond/snow/amazonaws.com/models.lex.v2/2020-08-07/base/name
  take form name

load @nerdbond/snow/amazonaws.com/models.lex.v2/2020-08-07/base/output-contexts-list
  take form output-contexts-list

load @nerdbond/snow/amazonaws.com/models.lex.v2/2020-08-07/base/sample-utterances-list
  take form sample-utterances-list

form create-intent-request, name <CreateIntentRequest>
  take intent-name, name <intentName>
    like name
    note <The name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.>
  take description, name <description>
    like description
    void take
    note <A description of the intent. Use the description to help identify the intent in lists.>
  take parent-intent-signature, name <parentIntentSignature>
    like intent-signature
    void take
    note <A unique identifier for the built-in intent to base this intent on.>
  take sample-utterances, name <sampleUtterances>
    like sample-utterances-list
    void take
    note <An array of strings that a user might say to signal the intent. For example, "I want a pizza", or "I want a {PizzaSize} pizza".

In an utterance, slot names are enclosed in curly braces ("{", "}") to indicate where they should be displayed in the utterance shown to the user..>
  take dialog-code-hook, name <dialogCodeHook>
    like dialog-code-hook-settings
    void take
    note <Specifies that Amazon Lex invokes the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction.

For example, suppose that your bot determines that the user's name is John. You Lambda function might retrieve John's information from a backend database and prepopulate some of the values. For example, if you find that John is gluten intolerant, you might set the corresponding intent slot, `glutenIntolerant` to `true`. You might find John's phone number and set the corresponding session attribute.>
  take fulfillment-code-hook, name <fulfillmentCodeHook>
    like fulfillment-code-hook-settings
    void take
    note <Specifies that Amazon Lex invokes the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user.

For example, in a pizza ordering bot, the Lambda function can look up the closest pizza restaurant to the customer's location and then place an order on the customer's behalf.>
  take intent-confirmation-setting, name <intentConfirmationSetting>
    like intent-confirmation-setting
    void take
    note <Provides prompts that Amazon Lex sends to the user to confirm the completion of an intent. If the user answers "no," the settings contain a statement that is sent to the user to end the intent.>
  take intent-closing-setting, name <intentClosingSetting>
    like intent-closing-setting
    void take
    note <Sets the response that Amazon Lex sends to the user when the intent is closed.>
  take input-contexts, name <inputContexts>
    like input-contexts-list
    void take
    note <A list of contexts that must be active for this intent to be considered by Amazon Lex.

When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent.

A context can be automatically activated using the `outputContexts` property or it can be set at runtime.

For example, if there are two intents with different input contexts that respond to the same utterances, only the intent with the active context will respond.

An intent may have up to 5 input contexts. If an intent has multiple input contexts, all of the contexts must be active to consider the intent.>
  take output-contexts, name <outputContexts>
    like output-contexts-list
    void take
    note <A lists of contexts that the intent activates when it is fulfilled.

You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer.

When you use the `outputContextsList` property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active.>
  take kendra-configuration, name <kendraConfiguration>
    like kendra-configuration
    void take
    note <Configuration information required to use the `AMAZON.KendraSearchIntent` intent to connect to an Amazon Kendra index. The `AMAZON.KendraSearchIntent` intent is called when Amazon Lex can't determine another intent to invoke.>