
load @termsurf/snow/amazonaws.com/iot/2015-05-28/base/aws-arn
  take form aws-arn

load @termsurf/snow/amazonaws.com/iot/2015-05-28/base/batch-mode
  take form batch-mode

load @termsurf/snow/amazonaws.com/iot/2015-05-28/base/input-name
  take form input-name

load @termsurf/snow/amazonaws.com/iot/2015-05-28/base/message-id
  take form message-id

form iot-events-action, name <IotEventsAction>
  note <Sends an input to an IoT Events detector.>
  take input-name, name <inputName>
    like input-name
    note <The name of the IoT Events input.>
  take message-id, name <messageId>
    like message-id
    void take
    note <The ID of the message. The default `messageId` is a new UUID value.

When `batchMode` is `true`, you can't specify a `messageId`--a new UUID value will be assigned.

Assign a value to this property to ensure that only one input (message) with a given `messageId` will be processed by an IoT Events detector.>
  take batch-mode, name <batchMode>
    like batch-mode
    void take
    note <Whether to process the event actions as a batch. The default value is `false`.

When `batchMode` is `true`, you can't specify a `messageId`.

When `batchMode` is `true` and the rule SQL statement evaluates to an Array, each Array element is treated as a separate message when it's sent to IoT Events by calling [`BatchPutMessage`](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchPutMessage.html) . The resulting array can't have more than 10 messages.>
  take role-arn, name <roleArn>
    like aws-arn
    note <The ARN of the role that grants IoT permission to send an input to an IoT Events detector. ("Action":"iotevents:BatchPutMessage").>