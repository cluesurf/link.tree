
load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/already-exists-exception
  take form already-exists-exception

load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/capability
  take form capability

load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/create-change-set-output
  take form create-change-set-output

load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/insufficient-capabilities-exception
  take form insufficient-capabilities-exception

load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/limit-exceeded-exception
  take form limit-exceeded-exception

load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/monitoring-time-in-minutes
  take form monitoring-time-in-minutes

load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/notification-arn
  take form notification-arn

load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/parameter
  take form parameter

load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/resource-to-import
  take form resource-to-import

load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/resource-type
  take form resource-type

load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/rollback-triggers
  take form rollback-triggers

load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/tag
  take form tag

load @nerdbond/snow/base/form
  take form form

load @nerdbond/snow/base/list
  take form list

load @nerdbond/snow/base/native-boolean
  take form native-boolean

load @nerdbond/snow/base/native-string
  take form native-string

boot get-create-change-set, name <GET_CreateChangeSet>
  deed get
  note <Creates a list of changes that will be applied to a stack so that you can review the changes before executing them. You can create a change set for a stack that doesn't exist or an existing stack. If you create a change set for a stack that doesn't exist, the change set shows all of the resources that CloudFormation will create. If you create a change set for an existing stack, CloudFormation compares the stack's information with the information that you submit in the change set and lists the differences. Use change sets to understand which resources CloudFormation will create or change, and how it will change resources in an existing stack, before you create or update a stack.

To create a change set for a stack that doesn't exist, for the `ChangeSetType` parameter, specify `CREATE`. To create a change set for an existing stack, specify `UPDATE` for the `ChangeSetType` parameter. To create a change set for an import operation, specify `IMPORT` for the `ChangeSetType` parameter. After the `CreateChangeSet` call successfully completes, CloudFormation starts creating the change set. To check the status of the change set or to review it, use the DescribeChangeSet action.

When you are satisfied with the changes the change set will make, execute the change set by using the ExecuteChangeSet action. CloudFormation doesn't make changes until you execute the change set.

To create a change set for the entire stack hierachy, set `IncludeNestedStacks` to `True`.>

  take stack-name
    like native-string
    note <The name or the unique ID of the stack for which you are creating a change set. CloudFormation generates the change set by comparing this stack's information with the information that you submit, such as a modified template or different parameter input values.>
  take template-body
    like native-string
    note <A structure that contains the body of the revised template, with a minimum length of 1 byte and a maximum length of 51,200 bytes. CloudFormation generates the change set by comparing this template with the template of the stack that you specified.

Conditional: You must specify only `TemplateBody` or `TemplateURL`.>
    void take
  take template-url
    like native-string
    note <The location of the file that contains the revised template. The URL must point to a template (max size: 460,800 bytes) that is located in an S3 bucket or a Systems Manager document. CloudFormation generates the change set by comparing this template with the stack that you specified.

Conditional: You must specify only `TemplateBody` or `TemplateURL`.>
    void take
  take use-previous-template
    like native-boolean
    note <Whether to reuse the template that is associated with the stack to create the change set.>
    void take
  take parameters
    like list
      like parameter
    note <A list of `Parameter` structures that specify input parameters for the change set. For more information, see the Parameter data type.>
    void take
  take capabilities
    like list
      like capability
    note <In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to create the stack.

- `CAPABILITY_IAM` and `CAPABILITY_NAMED_IAM`

  Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities.

  The following IAM resources require you to specify either the `CAPABILITY_IAM` or `CAPABILITY_NAMED_IAM` capability.

  - If you have IAM resources, you can specify either capability.

  - If you have IAM resources with custom names, you _must_ specify `CAPABILITY_NAMED_IAM`.

  - If you don't specify either of these capabilities, CloudFormation returns an `InsufficientCapabilities` error.

  If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.

  - [AWS::IAM::AccessKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html)

  - [AWS::IAM::Group](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html)

  - [AWS::IAM::InstanceProfile](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html)

  - [AWS::IAM::Policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html)

  - [AWS::IAM::Role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)

  - [AWS::IAM::User](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html)

  - [AWS::IAM::UserToGroupAddition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html)

  For more information, see [Acknowledging IAM Resources in CloudFormation Templates](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).

- `CAPABILITY_AUTO_EXPAND`

  Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually creating the stack. If your stack template contains one or more macros, and you choose to create a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the [AWS::Include](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html) and [AWS::Serverless](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html) transforms, which are macros hosted by CloudFormation.

  This capacity does not apply to creating change sets, and specifying it when creating change sets has no effect.

  If you want to create a stack from a stack template that contains macros _and_ nested stacks, you must create or update the stack directly from the template using the CreateStack or UpdateStack action, and specifying this capability.

  For more information on macros, see [Using CloudFormation Macros to Perform Custom Processing on Templates](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html).>
    void take
  take resource-types
    like list
      like resource-type
    note <The template resource types that you have permissions to work with if you execute this change set, such as `AWS::EC2::Instance`, `AWS::EC2::*`, or `Custom::MyCustomInstance`.

If the list of resource types doesn't include a resource type that you're updating, the stack update fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for condition keys in IAM policies for CloudFormation. For more information, see [Controlling Access with Identity and Access Management](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html) in the CloudFormation User Guide.>
    void take
  take role-arn
    like native-string
    note <The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes when executing the change set. CloudFormation uses the role's credentials to make calls on your behalf. CloudFormation uses this role for all future operations on the stack. As long as users have permission to operate on the stack, CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least privilege.

If you don't specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.>
    void take
  take rollback-configuration
    like form
      take rollback-triggers, name <RollbackTriggers>
        like rollback-triggers
        void take
        note <The triggers to monitor during stack creation or update actions.

By default, CloudFormation saves the rollback triggers specified for a stack and applies them to any subsequent update operations for the stack, unless you specify otherwise. If you do specify rollback triggers for this parameter, those triggers replace any list of triggers previously specified for the stack. This means:

- To use the rollback triggers previously specified for this stack, if any, don't specify this parameter.

- To specify new or updated rollback triggers, you must specify _all_ the triggers that you want used for this stack, even triggers you've specifed before (for example, when creating the stack or during a previous stack update). Any triggers that you don't include in the updated list of triggers are no longer applied to the stack.

- To remove all currently specified triggers, specify an empty list for this parameter.

If a specified trigger is missing, the entire stack operation fails and is rolled back.>
      take monitoring-time-in-minutes, name <MonitoringTimeInMinutes>
        like monitoring-time-in-minutes
        void take
        note <The amount of time, in minutes, during which CloudFormation should monitor all the rollback triggers after the stack creation or update operation deploys all necessary resources.

The default is 0 minutes.

If you specify a monitoring period but do not specify any rollback triggers, CloudFormation still waits the specified period of time before cleaning up old resources after update operations. You can use this monitoring period to perform any manual stack validation desired, and manually cancel the stack creation or update (using [CancelUpdateStack](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CancelUpdateStack.html), for example) as necessary.

If you specify 0 for this parameter, CloudFormation still monitors the specified rollback triggers during stack creation and update operations. Then, for update operations, it begins disposing of old resources immediately once the operation completes.>
    note <The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.>
    void take
  take notification-ar-ns
    like list
      like notification-arn
    note <The Amazon Resource Names (ARNs) of Amazon Simple Notification Service (Amazon SNS) topics that CloudFormation associates with the stack. To remove all associated notification topics, specify an empty list.>
    void take
  take tags
    like list
      like tag
    note <Key-value pairs to associate with this stack. CloudFormation also propagates these tags to resources in the stack. You can specify a maximum of 50 tags.>
    void take
  take change-set-name
    like native-string
    note <The name of the change set. The name must be unique among all change sets that are associated with the specified stack.

A change set name can contain only alphanumeric, case sensitive characters and hyphens. It must start with an alphabetic character and cannot exceed 128 characters.>
  take client-token
    like native-string
    note <A unique identifier for this `CreateChangeSet` request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to create another change set with the same name. You might retry `CreateChangeSet` requests to ensure that CloudFormation successfully received them.>
    void take
  take description
    like native-string
    note <A description to help you identify this change set.>
    void take
  take change-set-type
    like native-string
    note <The type of change set operation. To create a change set for a new stack, specify `CREATE`. To create a change set for an existing stack, specify `UPDATE`. To create a change set for an import operation, specify `IMPORT`.

If you create a change set for a new stack, CloudFormation creates a stack with a unique stack ID, but no template or resources. The stack will be in the [`REVIEW_IN_PROGRESS`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-describing-stacks.html#d0e11995) state until you execute the change set.

By default, CloudFormation specifies `UPDATE`. You can't use the `UPDATE` type to create a change set for a new stack or the `CREATE` type to create a change set for an existing stack.>
    void take
  take resources-to-import
    like list
      like resource-to-import
    note <The resources to import into your stack.>
    void take
  take include-nested-stacks
    like native-boolean
    note <Creates a change set for the all nested stacks specified in the template. The default behavior of this action is set to `False`. To include nested sets in a change set, specify `True`.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=CreateChangeSet>

  find <StackName>, loan stack-name
  find <TemplateBody>, loan template-body
  find <TemplateURL>, loan template-url
  find <UsePreviousTemplate>, loan use-previous-template
  find <Parameters>, loan parameters
  find <Capabilities>, loan capabilities
  find <ResourceTypes>, loan resource-types
  find <RoleARN>, loan role-arn
  find <RollbackConfiguration>, loan rollback-configuration
  find <NotificationARNs>, loan notification-ar-ns
  find <Tags>, loan tags
  find <ChangeSetName>, loan change-set-name
  find <ClientToken>, loan client-token
  find <Description>, loan description
  find <ChangeSetType>, loan change-set-type
  find <ResourcesToImport>, loan resources-to-import
  find <IncludeNestedStacks>, loan include-nested-stacks
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like create-change-set-output
    note <Success>
  loot 480
    seed xml, like already-exists-exception
    note <AlreadyExistsException>
  loot 481
    seed xml, like insufficient-capabilities-exception
    note <InsufficientCapabilitiesException>
  loot 482
    seed xml, like limit-exceeded-exception
    note <LimitExceededException>