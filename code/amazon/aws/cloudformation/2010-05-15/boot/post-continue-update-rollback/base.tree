
load @termsurf/snow/amazonaws.com/cloudformation/2010-05-15/base/continue-update-rollback-output
  take form continue-update-rollback-output

load @termsurf/snow/amazonaws.com/cloudformation/2010-05-15/base/token-already-exists-exception
  take form token-already-exists-exception

load @termsurf/snow/base/native-string
  take form native-string

boot post-continue-update-rollback, name <POST_ContinueUpdateRollback>
  deed post
  note <For a specified stack that is in the `UPDATE_ROLLBACK_FAILED` state, continues rolling it back to the `UPDATE_ROLLBACK_COMPLETE` state. Depending on the cause of the failure, you can manually [fix the error](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed) and continue the rollback. By continuing the rollback, you can return your stack to a working state (the `UPDATE_ROLLBACK_COMPLETE` state), and then try to update the stack again.

A stack goes into the `UPDATE_ROLLBACK_FAILED` state when CloudFormation cannot roll back all changes after a failed stack update. For example, you might have a stack that is rolling back to an old database instance that was deleted outside of CloudFormation. Because CloudFormation doesn't know the database was deleted, it assumes that the database instance still exists and attempts to roll back to it, causing the update rollback to fail.>

  take action
    like native-string
  take version
    like native-string
  take continue-update-rollback-input, like continue-update-rollback-input
    void take

  line </#Action=ContinueUpdateRollback>

  find <Action>, loan action
  find <Version>, loan version

  seed xml, loan continue-update-rollback-input

  loot 200
    seed xml, like continue-update-rollback-output
    note <Success>
  loot 480
    seed xml, like token-already-exists-exception
    note <TokenAlreadyExistsException>