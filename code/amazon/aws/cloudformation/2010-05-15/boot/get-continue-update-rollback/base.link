
load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/continue-update-rollback-output
  take form continue-update-rollback-output

load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/resource-to-skip
  take form resource-to-skip

load @nerdbond/snow/amazonaws.com/cloudformation/2010-05-15/base/token-already-exists-exception
  take form token-already-exists-exception

load @nerdbond/snow/base/list
  take form list

load @nerdbond/snow/base/native-string
  take form native-string

boot get-continue-update-rollback, name <GET_ContinueUpdateRollback>
  deed get
  note <For a specified stack that is in the `UPDATE_ROLLBACK_FAILED` state, continues rolling it back to the `UPDATE_ROLLBACK_COMPLETE` state. Depending on the cause of the failure, you can manually [fix the error](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed) and continue the rollback. By continuing the rollback, you can return your stack to a working state (the `UPDATE_ROLLBACK_COMPLETE` state), and then try to update the stack again.

A stack goes into the `UPDATE_ROLLBACK_FAILED` state when CloudFormation cannot roll back all changes after a failed stack update. For example, you might have a stack that is rolling back to an old database instance that was deleted outside of CloudFormation. Because CloudFormation doesn't know the database was deleted, it assumes that the database instance still exists and attempts to roll back to it, causing the update rollback to fail.>

  take stack-name
    like native-string
    note <The name or the unique ID of the stack that you want to continue rolling back.

Don't specify the name of a nested stack (a stack that was created by using the `AWS::CloudFormation::Stack` resource). Instead, use this operation on the parent stack (the stack that contains the `AWS::CloudFormation::Stack` resource).>
  take role-arn
    like native-string
    note <The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to roll back the stack. CloudFormation uses the role's credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. As long as users have permission to operate on the stack, CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least privilege.

If you don't specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.>
    void take
  take resources-to-skip
    like list
      like resource-to-skip
    note <A list of the logical IDs of the resources that CloudFormation skips during the continue update rollback operation. You can specify only resources that are in the `UPDATE_FAILED` state because a rollback failed. You can't specify resources that are in the `UPDATE_FAILED` state for other reasons, for example, because an update was cancelled. To check why a resource update failed, use the DescribeStackResources action, and view the resource status reason.

Specify this property to skip rolling back resources that CloudFormation can't successfully roll back. We recommend that you [troubleshoot](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed) resources before skipping them. CloudFormation sets the status of the specified resources to `UPDATE_COMPLETE` and continues to roll back the stack. After the rollback is complete, the state of the skipped resources will be inconsistent with the state of the resources in the stack template. Before performing another stack update, you must update the stack or resources to be consistent with each other. If you don't, subsequent stack updates might fail, and the stack will become unrecoverable.

Specify the minimum number of resources required to successfully roll back your stack. For example, a failed resource update might cause dependent resources to fail. In this case, it might not be necessary to skip the dependent resources.

To skip resources that are part of nested stacks, use the following format: `NestedStackName.ResourceLogicalID`. If you want to specify the logical ID of a stack resource (`Type: AWS::CloudFormation::Stack`) in the `ResourcesToSkip` list, then its corresponding embedded stack must be in one of the following states: `DELETE_IN_PROGRESS`, `DELETE_COMPLETE`, or `DELETE_FAILED`.

Don't confuse a child stack's name with its corresponding logical ID defined in the parent stack. For an example of a continue update rollback operation with nested stacks, see [Using ResourcesToSkip to recover a nested stacks hierarchy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html#nested-stacks).>
    void take
  take client-request-token
    like native-string
    note <A unique identifier for this `ContinueUpdateRollback` request. Specify this token if you plan to retry requests so that CloudFormationknows that you're not attempting to continue the rollback to a stack with the same name. You might retry `ContinueUpdateRollback` requests to ensure that CloudFormation successfully received them.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=ContinueUpdateRollback>

  find <StackName>, loan stack-name
  find <RoleARN>, loan role-arn
  find <ResourcesToSkip>, loan resources-to-skip
  find <ClientRequestToken>, loan client-request-token
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    seed xml, like continue-update-rollback-output
    note <Success>
  loot 480
    seed xml, like token-already-exists-exception
    note <TokenAlreadyExistsException>