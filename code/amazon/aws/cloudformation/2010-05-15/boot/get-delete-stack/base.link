
load @drumwork/snow/amazonaws.com/cloudformation/2010-05-15/base/logical-resource-id
  take form logical-resource-id

load @drumwork/snow/amazonaws.com/cloudformation/2010-05-15/base/token-already-exists-exception
  take form token-already-exists-exception

load @drumwork/snow/base/list
  take form list

load @drumwork/snow/base/native-string
  take form native-string

boot get-delete-stack, name <GET_DeleteStack>
  note <Deletes a specified stack. Once the call completes successfully, stack deletion starts. Deleted stacks do not show up in the DescribeStacks API if the deletion has been completed successfully.>

  take stack-name
    like native-string
    note <The name or the unique stack ID that is associated with the stack.>
  take retain-resources
    like list
      like logical-resource-id
    note <For stacks in the `DELETE_FAILED` state, a list of resource logical IDs that are associated with the resources you want to retain. During deletion, CloudFormation deletes the stack but does not delete the retained resources.

Retaining resources is useful when you cannot delete a resource, such as a non-empty S3 bucket, but you want to delete the stack.>
    void take
  take role-arn
    like native-string
    note <The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to delete the stack. CloudFormation uses the role's credentials to make calls on your behalf.

If you don't specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.>
    void take
  take client-request-token
    like native-string
    note <A unique identifier for this `DeleteStack` request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to delete a stack with the same name. You might retry `DeleteStack` requests to ensure that CloudFormation successfully received them.

All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a `CreateStack` operation with the token `token1`, then all the `StackEvents` generated by that operation will have `ClientRequestToken` set as `token1`.

In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format _Console-StackOperation-ID_, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: `Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002`.>
    void take
  take action
    like native-string
  take version
    like native-string

  line </#Action=DeleteStack>

  find <StackName>, loan stack-name
  find <RetainResources>, loan retain-resources
  find <RoleARN>, loan role-arn
  find <ClientRequestToken>, loan client-request-token
  find <Action>, loan action
  find <Version>, loan version

  loot 200
    note <Success>
  loot 480
    seed xml, like token-already-exists-exception
    note <TokenAlreadyExistsException>