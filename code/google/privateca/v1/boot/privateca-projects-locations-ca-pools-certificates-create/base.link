
load @termsurf/snow/base/native-boolean
  take form native-boolean

load @termsurf/snow/base/native-string
  take form native-string

load @termsurf/snow/googleapis.com/privateca/v1/base/certificate
  take form certificate

boot privateca-projects-locations-ca-pools-certificates-create, name <privateca.projects.locations.caPools.certificates.create>
  deed post
  note <Create a new Certificate in a given Project, Location from a particular CaPool.>

  take parent
    like native-string
    note <Required. The resource name of the CaPool associated with the Certificate, in the format `projects/*/locations/*/caPools/*`.>
  take certificate-id
    like native-string
    note <Optional. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`. This field is required when using a CertificateAuthority in the Enterprise CertificateAuthority.Tier, but is optional and its value is ignored otherwise.>
    void take
  take issuing-certificate-authority-id
    like native-string
    note <Optional. The resource ID of the CertificateAuthority that should issue the certificate. This optional field will ignore the load-balancing scheme of the Pool and directly issue the certificate from the CA with the specified ID, contained in the same CaPool referenced by `parent`. Per-CA quota rules apply. If left empty, a CertificateAuthority will be chosen from the CaPool by the service. For example, to issue a Certificate from a Certificate Authority with resource name "projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca", you can set the parent to "projects/my-project/locations/us-central1/caPools/my-pool" and the issuing_certificate_authority_id to "my-ca".>
    void take
  take request-id
    like native-string
    note <Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).>
    void take
  take validate-only
    like native-boolean
    note <Optional. If this is true, no Certificate resource will be persisted regardless of the CaPool's tier, and the returned Certificate will not contain the pem_certificate field.>
    void take
  take certificate, like certificate
    void take

  line </v1/{parent}/certificates>

  find <certificateId>, loan certificate-id
  find <issuingCertificateAuthorityId>, loan issuing-certificate-authority-id
  find <requestId>, loan request-id
  find <validateOnly>, loan validate-only

  seed json, loan certificate

  loot 200
    seed json, like certificate
    note <Successful response>