
load @nerdbond/snow/base/native-integer
  take form native-integer

load @nerdbond/snow/base/native-string
  take form native-string

load @nerdbond/snow/googleapis.com/playdeveloperreporting/v1alpha1/base/google-play-developer-reporting-v1alpha1-search-error-reports-response
  take form google-play-developer-reporting-v1alpha1-search-error-reports-response

boot playdeveloperreporting-vitals-errors-reports-search, name <playdeveloperreporting.vitals.errors.reports.search>
  deed get
  note <Searches all error reports received for an app.>

  take parent
    like native-string
    note <Required. Parent resource of the reports, indicating the application for which they were received. Format: apps/{app}>
  take filter
    like native-string
    note <A selection predicate to retrieve only a subset of the reports. For filtering basics, please check [AIP-160](https://google.aip.dev/160). ** Supported field names:** * `apiLevel`: Matches error reports that occurred in the requested Android versions (specified as the numeric API level) only. Example: `apiLevel = 28 OR apiLevel = 29`. * `versionCode`: Matches error reports that occurred in the requested app version codes only. Example: `versionCode = 123 OR versionCode = 456`. * `deviceModel`: Matches error reports that occurred in the requested devices. Example: `deviceModel = "walleye" OR deviceModel = "marlin"`. * `deviceType`: Matches error reports that occurred in the requested device types. Example: `deviceType = "PHONE"`. * `errorIssueType`: Matches error reports of the requested types only. Valid candidates: `JAVA_CRASH`, `NATIVE_CRASH`, `ANR`. Example: `errorIssueType = JAVA_CRASH OR errorIssueType = NATIVE_CRASH`. * `errorIssueId`: Matches error reports belonging to the requested error issue ids only. Example: `errorIssueId = 1234 OR errorIssueId = 4567`. ** Supported operators:** * Comparison operators: The only supported comparison operator is equality. The filtered field must appear on the left hand side of the comparison. * Logical Operators: Logical operators `AND` and `OR` can be used to build complex filters following a conjunctive normal form (CNF), i.e., conjunctions of disjunctions. The `OR` operator takes precedence over `AND` so the use of parenthesis is not necessary when building CNF. The `OR` operator is only supported to build disjunctions that apply to the same field, e.g., `versionCode = 123 OR versionCode = ANR`. The filter expression `versionCode = 123 OR errorIssueType = ANR` is not valid. ** Examples ** Some valid filtering expressions: * `versionCode = 123 AND errorIssueType = ANR` * `versionCode = 123 AND errorIssueType = OR errorIssueType = CRASH` * `versionCode = 123 AND (errorIssueType = OR errorIssueType = CRASH)`>
    void take
  take interval-end-time-day
    like native-integer
    note <Required. Day of month. Must be from 1 to 31 and valid for the year and month.>
    void take
  take interval-end-time-hours
    like native-integer
    note <Required. Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.>
    void take
  take interval-end-time-minutes
    like native-integer
    note <Required. Minutes of hour of day. Must be from 0 to 59.>
    void take
  take interval-end-time-month
    like native-integer
    note <Required. Month of year. Must be from 1 to 12.>
    void take
  take interval-end-time-nanos
    like native-integer
    note <Required. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.>
    void take
  take interval-end-time-seconds
    like native-integer
    note <Required. Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.>
    void take
  take interval-end-time-time-zone-id
    like native-string
    note <IANA Time Zone Database time zone, e.g. "America/New_York".>
    void take
  take interval-end-time-time-zone-version
    like native-string
    note <Optional. IANA Time Zone Database version number, e.g. "2019a".>
    void take
  take interval-end-time-utc-offset
    like native-string
    note <UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.>
    void take
  take interval-end-time-year
    like native-integer
    note <Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.>
    void take
  take interval-start-time-day
    like native-integer
    note <Required. Day of month. Must be from 1 to 31 and valid for the year and month.>
    void take
  take interval-start-time-hours
    like native-integer
    note <Required. Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.>
    void take
  take interval-start-time-minutes
    like native-integer
    note <Required. Minutes of hour of day. Must be from 0 to 59.>
    void take
  take interval-start-time-month
    like native-integer
    note <Required. Month of year. Must be from 1 to 12.>
    void take
  take interval-start-time-nanos
    like native-integer
    note <Required. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.>
    void take
  take interval-start-time-seconds
    like native-integer
    note <Required. Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.>
    void take
  take interval-start-time-time-zone-id
    like native-string
    note <IANA Time Zone Database time zone, e.g. "America/New_York".>
    void take
  take interval-start-time-time-zone-version
    like native-string
    note <Optional. IANA Time Zone Database version number, e.g. "2019a".>
    void take
  take interval-start-time-utc-offset
    like native-string
    note <UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.>
    void take
  take interval-start-time-year
    like native-integer
    note <Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.>
    void take
  take page-size
    like native-integer
    note <The maximum number of reports to return. The service may return fewer than this value. If unspecified, at most 50 reports will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.>
    void take
  take page-token
    like native-string
    note <A page token, received from a previous `SearchErrorReports` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchErrorReports` must match the call that provided the page token.>
    void take

  line </v1alpha1/{parent}/errorReports:search>

  find <filter>, loan filter
  find <interval.endTime.day>, loan interval-end-time-day
  find <interval.endTime.hours>, loan interval-end-time-hours
  find <interval.endTime.minutes>, loan interval-end-time-minutes
  find <interval.endTime.month>, loan interval-end-time-month
  find <interval.endTime.nanos>, loan interval-end-time-nanos
  find <interval.endTime.seconds>, loan interval-end-time-seconds
  find <interval.endTime.timeZone.id>, loan interval-end-time-time-zone-id
  find <interval.endTime.timeZone.version>, loan interval-end-time-time-zone-version
  find <interval.endTime.utcOffset>, loan interval-end-time-utc-offset
  find <interval.endTime.year>, loan interval-end-time-year
  find <interval.startTime.day>, loan interval-start-time-day
  find <interval.startTime.hours>, loan interval-start-time-hours
  find <interval.startTime.minutes>, loan interval-start-time-minutes
  find <interval.startTime.month>, loan interval-start-time-month
  find <interval.startTime.nanos>, loan interval-start-time-nanos
  find <interval.startTime.seconds>, loan interval-start-time-seconds
  find <interval.startTime.timeZone.id>, loan interval-start-time-time-zone-id
  find <interval.startTime.timeZone.version>, loan interval-start-time-time-zone-version
  find <interval.startTime.utcOffset>, loan interval-start-time-utc-offset
  find <interval.startTime.year>, loan interval-start-time-year
  find <pageSize>, loan page-size
  find <pageToken>, loan page-token

  loot 200
    seed json, like google-play-developer-reporting-v1alpha1-search-error-reports-response
    note <Successful response>