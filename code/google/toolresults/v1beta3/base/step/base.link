
load @textsurf/snow/googleapis.com/toolresults/v1beta3/base/duration
  take form duration

load @textsurf/snow/googleapis.com/toolresults/v1beta3/base/multi-step
  take form multi-step

load @textsurf/snow/googleapis.com/toolresults/v1beta3/base/outcome
  take form outcome

load @textsurf/snow/googleapis.com/toolresults/v1beta3/base/test-execution-step
  take form test-execution-step

load @textsurf/snow/googleapis.com/toolresults/v1beta3/base/timestamp
  take form timestamp

load @textsurf/snow/googleapis.com/toolresults/v1beta3/base/tool-execution-step
  take form tool-execution-step

form step, name <Step>
  note <A Step represents a single operation performed as part of Execution. A step can be used to represent the execution of a tool ( for example a test runner execution or an execution of a compiler). Steps can overlap (for instance two steps might have the same start time if some operations are done in parallel). Here is an example, let's consider that we have a continuous build is executing a test runner for each iteration. The workflow would look like: - user creates a Execution with id 1 - user creates an TestExecutionStep with id 100 for Execution 1 - user update TestExecutionStep with id 100 to add a raw xml log + the service parses the xml logs and returns a TestExecutionStep with updated TestResult(s). - user update the status of TestExecutionStep with id 100 to COMPLETE A Step can be updated until its state is set to COMPLETE at which points it becomes immutable. Next tag: 27>
  take completion-time, name <completionTime>
    like timestamp
    void take
  take creation-time, name <creationTime>
    like timestamp
    void take
  take description, name <description>
    void take
  take device-usage-duration, name <deviceUsageDuration>
    like duration
    void take
  take dimension-value, name <dimensionValue>
    void take
  take has-images, name <hasImages>
    void take
  take labels, name <labels>
    void take
  take multi-step, name <multiStep>
    like multi-step
    void take
  take name, name <name>
    void take
  take outcome, name <outcome>
    like outcome
    void take
  take run-duration, name <runDuration>
    like duration
    void take
  take state, name <state>
    void take
  take step-id, name <stepId>
    void take
  take test-execution-step, name <testExecutionStep>
    like test-execution-step
    void take
  take tool-execution-step, name <toolExecutionStep>
    like tool-execution-step
    void take