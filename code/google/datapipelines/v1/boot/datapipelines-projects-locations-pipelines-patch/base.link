
load @nerdbond/snow/base/native-string
  take form native-string

load @nerdbond/snow/googleapis.com/datapipelines/v1/base/google-cloud-datapipelines-v1-pipeline
  take form google-cloud-datapipelines-v1-pipeline

boot datapipelines-projects-locations-pipelines-patch, name <datapipelines.projects.locations.pipelines.patch>
  deed patch
  note <Updates a pipeline. If successful, the updated Pipeline is returned. Returns `NOT_FOUND` if the pipeline doesn't exist. If UpdatePipeline does not return successfully, you can retry the UpdatePipeline request until you receive a successful response.>

  take name
    like native-string
    note <The pipeline name. For example: `projects/PROJECT_ID/locations/LOCATION_ID/pipelines/PIPELINE_ID`. * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), and periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects). * `LOCATION_ID` is the canonical ID for the pipeline's location. The list of available locations can be obtained by calling `google.cloud.location.Locations.ListLocations`. Note that the Data Pipelines service is not available in all regions. It depends on Cloud Scheduler, an App Engine application, so it's only available in [App Engine regions](https://cloud.google.com/about/locations#region). * `PIPELINE_ID` is the ID of the pipeline. Must be unique for the selected project and location.>
  take update-mask
    like native-string
    note <The list of fields to be updated.>
    void take
  take google-cloud-datapipelines-v1-pipeline, like google-cloud-datapipelines-v1-pipeline
    void take

  line </v1/{name}>

  find <updateMask>, loan update-mask

  seed json, loan google-cloud-datapipelines-v1-pipeline

  loot 200
    seed json, like google-cloud-datapipelines-v1-pipeline
    note <Successful response>