
load @wavebond/snow/base/native-string
  take form native-string

load @wavebond/snow/googleapis.com/firebaserules/v1/base/test-ruleset-response
  take form test-ruleset-response

boot firebaserules-projects-test, name <firebaserules.projects.test>
  deed post
  note <Test `Source` for syntactic and semantic correctness. Issues present, if any, will be returned to the caller with a description, severity, and source location. The test method may be executed with `Source` or a `Ruleset` name. Passing `Source` is useful for unit testing new rules. Passing a `Ruleset` name is useful for regression testing an existing rule. The following is an example of `Source` that permits users to upload images to a bucket bearing their user id and matching the correct metadata: _*Example*_ // Users are allowed to subscribe and unsubscribe to the blog. service firebase.storage { match /users/{userId}/images/{imageName} { allow write: if userId == request.auth.uid && (imageName.matches('*.png$') || imageName.matches('*.jpg$')) && resource.mimeType.matches('^image/') } }>

  take name
    like native-string
    note <Required. Tests may either provide `source` or a `Ruleset` resource name. For tests against `source`, the resource name must refer to the project: Format: `projects/{project_id}` For tests against a `Ruleset`, this must be the `Ruleset` resource name: Format: `projects/{project_id}/rulesets/{ruleset_id}`>
  take test-ruleset-request, like test-ruleset-request
    void take

  line </v1/{name}:test>

  seed json, loan test-ruleset-request

  loot 200
    seed json, like test-ruleset-response
    note <Successful response>
