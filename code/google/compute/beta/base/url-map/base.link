
load @treesurf/snow/googleapis.com/compute/beta/base/http-header-action
  take form http-header-action

load @treesurf/snow/googleapis.com/compute/beta/base/http-redirect-action
  take form http-redirect-action

load @treesurf/snow/googleapis.com/compute/beta/base/http-route-action
  take form http-route-action

form url-map, name <UrlMap>
  note <Represents a URL Map resource. Compute Engine has two URL Map resources: * [Global](/compute/docs/reference/rest/beta/urlMaps) * [Regional](/compute/docs/reference/rest/beta/regionUrlMaps) A URL map resource is a component of certain types of cloud load balancers and Traffic Director: * urlMaps are used by external HTTP(S) load balancers and Traffic Director. * regionUrlMaps are used by internal HTTP(S) load balancers. For a list of supported URL map features by the load balancer type, see the Load balancing features: Routing and traffic management table. For a list of supported URL map features for Traffic Director, see the Traffic Director features: Routing and traffic management table. This resource defines mappings from hostnames and URL paths to either a backend service or a backend bucket. To use the global urlMaps resource, the backend service must have a loadBalancingScheme of either EXTERNAL or INTERNAL_SELF_MANAGED. To use the regionUrlMaps resource, the backend service must have a loadBalancingScheme of INTERNAL_MANAGED. For more information, read URL Map Concepts.>
  take creation-timestamp, name <creationTimestamp>
    void take
  take default-route-action, name <defaultRouteAction>
    like http-route-action
    void take
  take default-service, name <defaultService>
    void take
  take default-url-redirect, name <defaultUrlRedirect>
    like http-redirect-action
    void take
  take description, name <description>
    void take
  take fingerprint, name <fingerprint>
    void take
  take header-action, name <headerAction>
    like http-header-action
    void take
  take host-rules, name <hostRules>
    void take
  take id, name <id>
    void take
  take kind, name <kind>
    void take
  take name, name <name>
    void take
  take path-matchers, name <pathMatchers>
    void take
  take region, name <region>
    void take
  take self-link, name <selfLink>
    void take
  take tests, name <tests>
    void take