
load @wavebond/snow/base/native-string
  take form native-string

load @wavebond/snow/googleapis.com/compute/alpha/base/operation
  take form operation

boot compute-instance-group-managers-suspend-instances, name <compute.instanceGroupManagers.suspendInstances>
  deed post
  note <Flags the specified instances in the managed instance group to be immediately suspended. You can only specify instances that are running in this request. This method reduces the targetSize and increases the targetSuspendedSize of the managed instance group by the number of instances that you suspend. The suspendInstances operation is marked DONE if the suspendInstances request is successful. The underlying actions take additional time. You must separately verify the status of the SUSPENDING action with the listmanagedinstances method. If the standbyPolicy.initialDelaySec field is set, the group delays suspension of the instances until initialDelaySec have passed from instance.creationTimestamp (that is, when the instance was created). This delay gives your application time to set itself up and initialize on the instance. If more than initialDelaySec seconds have passed since instance.creationTimestamp when this method is called, there will be zero delay. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is suspended. Suspended instances can be resumed using the resumeInstances method. You can specify a maximum of 1000 instances with this method per request.>

  take project
    like native-string
    note <Project ID for this request.>
  take zone
    like native-string
    note <The name of the zone where the managed instance group is located.>
  take instance-group-manager
    like native-string
    note <The name of the managed instance group.>
  take request-id
    like native-string
    note <An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).>
    void take
  take instance-group-managers-suspend-instances-request, like instance-group-managers-suspend-instances-request
    void take

  line </projects/{project}/zones/{zone}/instanceGroupManagers/{instance-group-manager}/suspendInstances>

  find <requestId>, loan request-id

  seed json, loan instance-group-managers-suspend-instances-request

  loot 200
    seed json, like operation
    note <Successful response>