
load @termsurf/snow/base/native-integer
  take form native-integer

load @termsurf/snow/base/native-string
  take form native-string

load @termsurf/snow/googleapis.com/cloudtrace/v1/base/list-traces-response
  take form list-traces-response

boot cloudtrace-projects-traces-list, name <cloudtrace.projects.traces.list>
  deed get
  note <Returns a list of traces that match the specified filter conditions.>

  take project-id
    like native-string
    note <Required. ID of the Cloud project where the trace data is stored.>
  take end-time
    like native-string
    note <End of the time interval (inclusive) during which the trace data was collected from the application.>
    void take
  take filter
    like native-string
    note <Optional. A filter against labels for the request. By default, searches use prefix matching. To specify exact match, prepend a plus symbol (`+`) to the search term. Multiple terms are ANDed. Syntax: * `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root span starts with `NAME_PREFIX`. * `+root:NAME` or `+NAME`: Return traces where any root span's name is exactly `NAME`. * `span:NAME_PREFIX`: Return traces where any span starts with `NAME_PREFIX`. * `+span:NAME`: Return traces where any span's name is exactly `NAME`. * `latency:DURATION`: Return traces whose overall latency is greater or equal to than `DURATION`. Accepted units are nanoseconds (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For example, `latency:24ms` returns traces whose overall latency is greater than or equal to 24 milliseconds. * `label:LABEL_KEY`: Return all traces containing the specified label key (exact match, case-sensitive) regardless of the key:value pair's value (including empty values). * `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified label key (exact match, case-sensitive) whose value starts with `VALUE_PREFIX`. Both a key and a value must be specified. * `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair exactly matching the specified text. Both a key and a value must be specified. * `method:VALUE`: Equivalent to `/http/method:VALUE`. * `url:VALUE`: Equivalent to `/http/url:VALUE`.>
    void take
  take order-by
    like native-string
    note <Optional. Field used to sort the returned traces. Can be one of the following: * `trace_id` * `name` (`name` field of root span in the trace) * `duration` (difference between `end_time` and `start_time` fields of the root span) * `start` (`start_time` field of the root span) Descending order can be specified by appending `desc` to the sort field (for example, `name desc`). Only one sort field is permitted.>
    void take
  take page-size
    like native-integer
    note <Optional. Maximum number of traces to return. If not specified or &lt;= 0, the implementation selects a reasonable value. The implementation may return fewer traces than the requested page size.>
    void take
  take page-token
    like native-string
    note <Token identifying the page of results to return. If provided, use the value of the `next_page_token` field from a previous request.>
    void take
  take start-time
    like native-string
    note <Start of the time interval (inclusive) during which the trace data was collected from the application.>
    void take
  take view
    like native-string
    note <Optional. Type of data returned for traces in the list. Default is `MINIMAL`.>
    void take

  line </v1/projects/{project-id}/traces>

  find <endTime>, loan end-time
  find <filter>, loan filter
  find <orderBy>, loan order-by
  find <pageSize>, loan page-size
  find <pageToken>, loan page-token
  find <startTime>, loan start-time
  find <view>, loan view

  loot 200
    seed json, like list-traces-response
    note <Successful response>