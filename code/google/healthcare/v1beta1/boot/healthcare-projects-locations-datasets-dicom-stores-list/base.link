
load @nerdbond/snow/base/native-integer
  take form native-integer

load @nerdbond/snow/base/native-string
  take form native-string

load @nerdbond/snow/googleapis.com/healthcare/v1beta1/base/list-dicom-stores-response
  take form list-dicom-stores-response

boot healthcare-projects-locations-datasets-dicom-stores-list, name <healthcare.projects.locations.datasets.dicomStores.list>
  deed get
  note <Lists the DICOM stores in the given dataset.>

  take parent
    like native-string
    note <Name of the dataset.>
  take filter
    like native-string
    note <Restricts stores returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`&lt;`, `&lt;=`, `&gt;`, `&gt;=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`&lt;`, `&lt;=`, `&gt;`, `&gt;=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. Only filtering on labels is supported. For example, `labels.key=value`.>
    void take
  take page-size
    like native-integer
    note <Limit on the number of DICOM stores to return in a single response. If not specified, 100 is used. May not be larger than 1000.>
    void take
  take page-token
    like native-string
    note <The next_page_token value returned from the previous List request, if any.>
    void take

  line </v1beta1/{parent}/dicomStores>

  find <filter>, loan filter
  find <pageSize>, loan page-size
  find <pageToken>, loan page-token

  loot 200
    seed json, like list-dicom-stores-response
    note <Successful response>