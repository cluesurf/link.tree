
load @treesurf/snow/googleapis.com/remotebuildexecution/v1alpha/base/build-bazel-remote-execution-v2-digest
  take form build-bazel-remote-execution-v2-digest

load @treesurf/snow/googleapis.com/remotebuildexecution/v1alpha/base/build-bazel-remote-execution-v2-platform
  take form build-bazel-remote-execution-v2-platform

form build-bazel-remote-execution-v2-action, name <BuildBazelRemoteExecutionV2Action>
  note <An `Action` captures all the information about an execution which is required to reproduce it. `Action`s are the core component of the [Execution] service. A single `Action` represents a repeatable action that can be performed by the execution service. `Action`s can be succinctly identified by the digest of their wire format encoding and, once an `Action` has been executed, will be cached in the action cache. Future requests can then use the cached result rather than needing to run afresh. When a server completes execution of an Action, it MAY choose to cache the result in the ActionCache unless `do_not_cache` is `true`. Clients SHOULD expect the server to do so. By default, future calls to Execute the same `Action` will also serve their results from the cache. Clients must take care to understand the caching behaviour. Ideally, all `Action`s will be reproducible so that serving a result from cache is always desirable and correct.>
  take command-digest, name <commandDigest>
    like build-bazel-remote-execution-v2-digest
    void take
  take do-not-cache, name <doNotCache>
    void take
  take input-root-digest, name <inputRootDigest>
    like build-bazel-remote-execution-v2-digest
    void take
  take platform, name <platform>
    like build-bazel-remote-execution-v2-platform
    void take
  take salt, name <salt>
    void take
  take timeout, name <timeout>
    void take