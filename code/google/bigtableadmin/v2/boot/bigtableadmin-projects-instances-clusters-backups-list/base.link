
load @treesurf/snow/base/native-integer
  take form native-integer

load @treesurf/snow/base/native-string
  take form native-string

load @treesurf/snow/googleapis.com/bigtableadmin/v2/base/list-backups-response
  take form list-backups-response

boot bigtableadmin-projects-instances-clusters-backups-list, name <bigtableadmin.projects.instances.clusters.backups.list>
  deed get
  note <Lists Cloud Bigtable backups. Returns both completed and pending backups.>

  take parent
    like native-string
    note <Required. The cluster to list backups from. Values are of the form `projects/{project}/instances/{instance}/clusters/{cluster}`. Use `{cluster} = '-'` to list backups for all clusters in an instance, e.g., `projects/{project}/instances/{instance}/clusters/-`.>
  take filter
    like native-string
    note <A filter expression that filters backups listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be &lt;, &gt;, &lt;=, &gt;=, !=, =, or :. Colon ':' represents a HAS operator which is roughly synonymous with equality. Filter rules are case insensitive. The fields eligible for filtering are: * `name` * `source_table` * `state` * `start_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ) * `end_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ) * `expire_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ) * `size_bytes` To filter on multiple expressions, provide each separate expression within parentheses. By default, each expression is an AND expression. However, you can include AND, OR, and NOT expressions explicitly. Some examples of using filters are: * `name:"exact"` --&gt; The backup's name is the string "exact". * `name:howl` --&gt; The backup's name contains the string "howl". * `source_table:prod` --&gt; The source_table's name contains the string "prod". * `state:CREATING` --&gt; The backup is pending creation. * `state:READY` --&gt; The backup is fully created and ready for use. * `(name:howl) AND (start_time &lt; \"2018-03-28T14:50:00Z\")` --&gt; The backup name contains the string "howl" and start_time of the backup is before 2018-03-28T14:50:00Z. * `size_bytes &gt; 10000000000` --&gt; The backup's size is greater than 10GB>
    void take
  take order-by
    like native-string
    note <An expression for specifying the sort order of the results of the request. The string value should specify one or more fields in Backup. The full syntax is described at https://aip.dev/132#ordering. Fields supported are: * name * source_table * expire_time * start_time * end_time * size_bytes * state For example, "start_time". The default sorting order is ascending. To specify descending order for the field, a suffix " desc" should be appended to the field name. For example, "start_time desc". Redundant space characters in the syntax are insigificant. If order_by is empty, results will be sorted by `start_time` in descending order starting from the most recently created backup.>
    void take
  take page-size
    like native-integer
    note <Number of backups to be returned in the response. If 0 or less, defaults to the server's maximum allowed page size.>
    void take
  take page-token
    like native-string
    note <If non-empty, `page_token` should contain a next_page_token from a previous ListBackupsResponse to the same `parent` and with the same `filter`.>
    void take

  line </v2/{parent}/backups>

  find <filter>, loan filter
  find <orderBy>, loan order-by
  find <pageSize>, loan page-size
  find <pageToken>, loan page-token

  loot 200
    seed json, like list-backups-response
    note <Successful response>