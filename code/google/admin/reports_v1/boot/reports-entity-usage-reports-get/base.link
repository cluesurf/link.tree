
load @textsurf/snow/base/native-integer
  take form native-integer

load @textsurf/snow/base/native-string
  take form native-string

load @textsurf/snow/googleapis.com/admin/reports_v1/base/usage-reports
  take form usage-reports

boot reports-entity-usage-reports-get, name <reports.entityUsageReports.get>
  deed get
  note <Retrieves a report which is a collection of properties and statistics for entities used by users within the account. For more information, see the Entities Usage Report guide. For more information about the entities report's parameters, see the Entities Usage parameters reference guides.>

  take entity-type
    like native-string
    note <Represents the type of entity for the report.>
  take entity-key
    like native-string
    note <Represents the key of the object to filter the data with. It is a string which can take the value `all` to get activity events for all users, or any other value for an app-specific entity. For details on how to obtain the `entityKey` for a particular `entityType`, see the Entities Usage parameters reference guides.>
  take date
    like native-string
    note <Represents the date the usage occurred. The timestamp is in the ISO 8601 format, yyyy-mm-dd. We recommend you use your account's time zone for this.>
  take customer-id
    like native-string
    note <The unique ID of the customer to retrieve data for.>
    void take
  take filters
    like native-string
    note <The `filters` query string is a comma-separated list of an application's event parameters where the parameter's value is manipulated by a relational operator. The `filters` query string includes the name of the application whose usage is returned in the report. The application values for the Entities usage report include `accounts`, `docs`, and `gmail`. Filters are in the form `[application name]:parameter name[parameter value],...`. In this example, the `&lt;&gt;` 'not equal to' operator is URL-encoded in the request's query string (%3C%3E): GET https://www.googleapis.com/admin/reports/v1/usage/gplus_communities/all/dates/2017-12-01 ?parameters=gplus:community_name,gplus:num_total_members &filters=gplus:num_total_members%3C%3E0 The relational operators include: - `==` - 'equal to'. - `&lt;&gt;` - 'not equal to'. It is URL-encoded (%3C%3E). - `&lt;` - 'less than'. It is URL-encoded (%3C). - `&lt;=` - 'less than or equal to'. It is URL-encoded (%3C=). - `&gt;` - 'greater than'. It is URL-encoded (%3E). - `&gt;=` - 'greater than or equal to'. It is URL-encoded (%3E=). Filters can only be applied to numeric parameters.>
    void take
  take max-results
    like native-integer
    note <Determines how many activity records are shown on each response page. For example, if the request sets `maxResults=1` and the report has two activities, the report has two pages. The response's `nextPageToken` property has the token to the second page.>
    void take
  take page-token
    like native-string
    note <Token to specify next page. A report with multiple pages has a `nextPageToken` property in the response. In your follow-on request getting the next page of the report, enter the `nextPageToken` value in the `pageToken` query string.>
    void take
  take parameters
    like native-string
    note <The `parameters` query string is a comma-separated list of event parameters that refine a report's results. The parameter is associated with a specific application. The application values for the Entities usage report are only `gplus`. A `parameter` query string is in the CSV form of `[app_name1:param_name1], [app_name2:param_name2]...`. *Note:* The API doesn't accept multiple values of a parameter. If a particular parameter is supplied more than once in the API request, the API only accepts the last value of that request parameter. In addition, if an invalid request parameter is supplied in the API request, the API ignores that request parameter and returns the response corresponding to the remaining valid request parameters. An example of an invalid request parameter is one that does not belong to the application. If no parameters are requested, all parameters are returned.>
    void take

  line </admin/reports/v1/usage/{entity-type}/{entity-key}/dates/{date}>

  find <customerId>, loan customer-id
  find <filters>, loan filters
  find <maxResults>, loan max-results
  find <pageToken>, loan page-token
  find <parameters>, loan parameters

  loot 200
    seed json, like usage-reports
    note <Successful response>