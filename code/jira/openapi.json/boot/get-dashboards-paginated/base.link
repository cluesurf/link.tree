
load @tunebond/snow/base/native-integer
  take form native-integer

load @tunebond/snow/base/native-string
  take form native-string

load @tunebond/snow/jira/openapi.json/base/error-collection
  take form error-collection

load @tunebond/snow/jira/openapi.json/base/page-bean-dashboard
  take form page-bean-dashboard

boot get-dashboards-paginated, name <getDashboardsPaginated>
  deed get
  note <Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned. This operation can be accessed anonymously. **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned: * Dashboards owned by the user. Not returned for anonymous users. * Dashboards shared with a group that the user is a member of. Not returned for anonymous users. * Dashboards shared with a private project that the user can browse. Not returned for anonymous users. * Dashboards shared with a public project. * Dashboards shared with the public.>

  take dashboard-name
    like native-string
    note <String used to perform a case-insensitive partial match with `name`.>
    void take
  take account-id
    like native-string
    note <User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter.>
    void take
  take owner
    like native-string
    note <This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter.>
    void take
  take groupname
    like native-string
    note <Group name used to returns dashboards that are shared with a group that matches `sharePermissions.group.name`.>
    void take
  take project-id
    like native-integer
      bind lace, lace int64
    note <Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`.>
    void take
  take order-by
    like native-string
        fall <name>
    note <[Order](#ordering) the results by a field: * `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use. * `favourite_count` Sorts by dashboard popularity. * `id` Sorts by dashboard ID. * `is_favourite` Sorts by whether the dashboard is marked as a favorite. * `name` Sorts by dashboard name. * `owner` Sorts by dashboard owner name.>
    void take
  take start-at
    like native-integer
      bind lace, lace int64
        fall <0>
    note <The index of the first item to return in a page of results (page offset).>
    void take
  take max-results
    like native-integer
      bind lace, lace int32
        fall <50>
    note <The maximum number of items to return per page.>
    void take
  take status
    like native-string
        fall <active>
    note <The status to filter by. It may be active, archived or deleted.>
    void take
  take expand
    like native-string
    note <Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include: * `description` Returns the description of the dashboard. * `owner` Returns the owner of the dashboard. * `viewUrl` Returns the URL that is used to view the dashboard. * `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite. * `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite. * `sharePermissions` Returns details of the share permissions defined for the dashboard. * `editPermissions` Returns details of the edit permissions defined for the dashboard. * `isWritable` Returns whether the current user has permission to edit the dashboard.>
    void take

  line </rest/api/3/dashboard/search>

  find <dashboardName>, loan dashboard-name
  find <accountId>, loan account-id
  find <owner>, loan owner
  find <groupname>, loan groupname
  find <projectId>, loan project-id
  find <orderBy>, loan order-by
  find <startAt>, loan start-at
  find <maxResults>, loan max-results
  find <status>, loan status
  find <expand>, loan expand

  loot 200
    seed json, like page-bean-dashboard
    note <Returned if the request is successful.>
  loot 400
    seed json, like error-collection
    note <Returned if: * `orderBy` is invalid. * `expand` includes an invalid value. * `accountId` and `owner` are provided.>
  loot 401
    seed json, like error-collection
    note <401 response>
