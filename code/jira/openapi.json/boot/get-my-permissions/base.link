
load @drumwork/snow/base/native-string
  take form native-string

load @drumwork/snow/jira/openapi.json/base/error-collection
  take form error-collection

load @drumwork/snow/jira/openapi.json/base/permissions
  take form permissions

boot get-my-permissions, name <getMyPermissions>
  deed get
  note <Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, or issue context. The user is reported as having a project permission: * in the global context, if the user has the project permission in any project. * for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project. * for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue. This means that users may be shown as having an issue permission (such as EDIT\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\_ISSUES permission for that issue. Global permissions are unaffected by context. This operation can be accessed anonymously. **[Permissions](#permissions) required:** None.>

  take project-key
    like native-string
    note <The key of project. Ignored if `projectId` is provided.>
    void take
  take project-id
    like native-string
    note <The ID of project.>
    void take
  take issue-key
    like native-string
    note <The key of the issue. Ignored if `issueId` is provided.>
    void take
  take issue-id
    like native-string
    note <The ID of the issue.>
    void take
  take permissions
    like native-string
    note <A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get).>
    void take
  take project-uuid
    like native-string
    void take
  take project-configuration-uuid
    like native-string
    void take

  line </rest/api/3/mypermissions>

  find <projectKey>, loan project-key
  find <projectId>, loan project-id
  find <issueKey>, loan issue-key
  find <issueId>, loan issue-id
  find <permissions>, loan permissions
  find <projectUuid>, loan project-uuid
  find <projectConfigurationUuid>, loan project-configuration-uuid

  loot 200
    seed json, like permissions
    note <Returned if the request is successful.>
  loot 400
    seed json, like error-collection
    note <Returned if `permissions` is empty or the permission key it contains is not found or deprecated.>
  loot 401
    seed json, like error-collection
    note <Returned if the authentication credentials are incorrect or missing.>
  loot 404
    seed json, like error-collection
    note <Returned if the project or issue is not found or the user does not have permission to view the project or issue.>