
load @treesurf/snow/base/list
  take form list

load @treesurf/snow/base/native-boolean
  take form native-boolean

load @treesurf/snow/base/native-integer
  take form native-integer

load @treesurf/snow/base/native-string
  take form native-string

load @treesurf/snow/jira/openapi.json/base/error-collection
  take form error-collection

load @treesurf/snow/jira/openapi.json/base/page-bean-filter-details
  take form page-bean-filter-details

boot get-filters-paginated, name <getFiltersPaginated>
  deed get
  note <Returns a [paginated](#pagination) list of filters. Use this operation to get: * specific filters, by defining `id` only. * filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned. This operation can be accessed anonymously. **[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned: * filters owned by the user. * filters shared with a group that the user is a member of. * filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for. * filters shared with a public project. * filters shared with the public.>

  take filter-name
    like native-string
    note <String used to perform a case-insensitive partial match with `name`.>
    void take
  take account-id
    like native-string
    note <User account ID used to return filters with the matching `owner.accountId`. This parameter cannot be used with `owner`.>
    void take
  take owner
    like native-string
    note <This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching `owner.name`. This parameter cannot be used with `accountId`.>
    void take
  take groupname
    like native-string
    note <Group name used to returns filters that are shared with a group that matches `sharePermissions.group.groupname`.>
    void take
  take project-id
    like native-integer
      bind lace, lace int64
    note <Project ID used to returns filters that are shared with a project that matches `sharePermissions.project.id`.>
    void take
  take id
    like list
      like native-integer
        bind lace, lace int64
    note <The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.>
    void take
  take order-by
    like native-string
        fall <name>
    note <[Order](#ordering) the results by a field: * `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use. * `favourite_count` Sorts by the count of how many users have this filter as a favorite. * `is_favourite` Sorts by whether the filter is marked as a favorite. * `id` Sorts by filter ID. * `name` Sorts by filter name. * `owner` Sorts by the ID of the filter owner. * `is_shared` Sorts by whether the filter is shared.>
    void take
  take start-at
    like native-integer
      bind lace, lace int64
        fall <0>
    note <The index of the first item to return in a page of results (page offset).>
    void take
  take max-results
    like native-integer
      bind lace, lace int32
        fall <50>
    note <The maximum number of items to return per page.>
    void take
  take expand
    like native-string
    note <Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include: * `description` Returns the description of the filter. * `favourite` Returns an indicator of whether the user has set the filter as a favorite. * `favouritedCount` Returns a count of how many users have set this filter as a favorite. * `jql` Returns the JQL query that the filter uses. * `owner` Returns the owner of the filter. * `searchUrl` Returns a URL to perform the filter's JQL query. * `sharePermissions` Returns the share permissions defined for the filter. * `editPermissions` Returns the edit permissions defined for the filter. * `isWritable` Returns whether the current user has permission to edit the filter. * `subscriptions` Returns the users that are subscribed to the filter. * `viewUrl` Returns a URL to view the filter.>
    void take
  take override-share-permissions
    like native-boolean
    note <EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).>
    void take

  line </rest/api/3/filter/search>

  find <filterName>, loan filter-name
  find <accountId>, loan account-id
  find <owner>, loan owner
  find <groupname>, loan groupname
  find <projectId>, loan project-id
  find <id>, loan id
  find <orderBy>, loan order-by
  find <startAt>, loan start-at
  find <maxResults>, loan max-results
  find <expand>, loan expand
  find <overrideSharePermissions>, loan override-share-permissions

  loot 200
    seed json, like page-bean-filter-details
    note <Returned if the request is successful.>
  loot 400
    seed json, like error-collection
    note <Returned if: * `owner` and `accountId` are provided. * `expand` includes an invalid value. * `orderBy` is invalid.>
  loot 401
    note <Returned if the authentication credentials are incorrect or missing.>