
load @wavebond/snow/base/list
  take form list

load @wavebond/snow/base/native-string
  take form native-string

load @wavebond/snow/jira/openapi.json/base/issue-create-metadata
  take form issue-create-metadata

boot get-create-issue-meta, name <getCreateIssueMeta>
  deed get
  note <Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post). The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors. This operation can be accessed anonymously. **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.>

  take project-ids
    like list
      like native-string
    note <List of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, `projectIds=10000,10001&projectIds=10020,10021`. This parameter may be provided with `projectKeys`.>
    void take
  take project-keys
    like list
      like native-string
    note <List of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter may be provided with `projectIds`.>
    void take
  take issuetype-ids
    like list
      like native-string
    note <List of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter may be provided with `issuetypeNames`.>
    void take
  take issuetype-names
    like list
      like native-string
    note <List of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter may be provided with `issuetypeIds`.>
    void take
  take expand
    like native-string
    note <Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts `projects.issuetypes.fields`, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the `fields` and `update` fields in [Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).>
    void take

  line </rest/api/3/issue/createmeta>

  find <projectIds>, loan project-ids
  find <projectKeys>, loan project-keys
  find <issuetypeIds>, loan issuetype-ids
  find <issuetypeNames>, loan issuetype-names
  find <expand>, loan expand

  loot 200
    seed json, like issue-create-metadata
    note <Returned if the request is successful.>
  loot 401
    note <Returned if the authentication credentials are incorrect or missing.>
